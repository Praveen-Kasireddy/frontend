{"version":3,"sources":["webpack:///./node_modules/lodash/_DataView.js","webpack:///./node_modules/lodash/_Hash.js","webpack:///./node_modules/lodash/_ListCache.js","webpack:///./node_modules/lodash/_Map.js","webpack:///./node_modules/lodash/_MapCache.js","webpack:///./node_modules/lodash/_Promise.js","webpack:///./node_modules/lodash/_Set.js","webpack:///./node_modules/lodash/_Stack.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/_Uint8Array.js","webpack:///./node_modules/lodash/_WeakMap.js","webpack:///./node_modules/lodash/_arrayEach.js","webpack:///./node_modules/lodash/_arrayFilter.js","webpack:///./node_modules/lodash/_arrayLikeKeys.js","webpack:///./node_modules/lodash/_arrayMap.js","webpack:///./node_modules/lodash/_arrayPush.js","webpack:///./node_modules/lodash/_assignValue.js","webpack:///./node_modules/lodash/_assocIndexOf.js","webpack:///./node_modules/lodash/_baseAssign.js","webpack:///./node_modules/lodash/_baseAssignIn.js","webpack:///./node_modules/lodash/_baseAssignValue.js","webpack:///./node_modules/lodash/_baseClone.js","webpack:///./node_modules/lodash/_baseCreate.js","webpack:///./node_modules/lodash/_baseFindIndex.js","webpack:///./node_modules/lodash/_baseGet.js","webpack:///./node_modules/lodash/_baseGetAllKeys.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/lodash/_baseIndexOf.js","webpack:///./node_modules/lodash/_baseIsArguments.js","webpack:///./node_modules/lodash/_baseIsMap.js","webpack:///./node_modules/lodash/_baseIsNaN.js","webpack:///./node_modules/lodash/_baseIsNative.js","webpack:///./node_modules/lodash/_baseIsSet.js","webpack:///./node_modules/lodash/_baseIsTypedArray.js","webpack:///./node_modules/lodash/_baseKeys.js","webpack:///./node_modules/lodash/_baseKeysIn.js","webpack:///./node_modules/lodash/_baseSet.js","webpack:///./node_modules/lodash/_baseTimes.js","webpack:///./node_modules/lodash/_baseToString.js","webpack:///./node_modules/lodash/_baseUnary.js","webpack:///./node_modules/lodash/_baseValues.js","webpack:///./node_modules/lodash/_castPath.js","webpack:///./node_modules/lodash/_cloneArrayBuffer.js","webpack:///./node_modules/lodash/_cloneBuffer.js","webpack:///./node_modules/lodash/_cloneDataView.js","webpack:///./node_modules/lodash/_cloneRegExp.js","webpack:///./node_modules/lodash/_cloneSymbol.js","webpack:///./node_modules/lodash/_cloneTypedArray.js","webpack:///./node_modules/lodash/_copyArray.js","webpack:///./node_modules/lodash/_copyObject.js","webpack:///./node_modules/lodash/_copySymbols.js","webpack:///./node_modules/lodash/_copySymbolsIn.js","webpack:///./node_modules/lodash/_coreJsData.js","webpack:///./node_modules/lodash/_defineProperty.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///./node_modules/lodash/_getAllKeys.js","webpack:///./node_modules/lodash/_getAllKeysIn.js","webpack:///./node_modules/lodash/_getMapData.js","webpack:///./node_modules/lodash/_getNative.js","webpack:///./node_modules/lodash/_getPrototype.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/lodash/_getSymbols.js","webpack:///./node_modules/lodash/_getSymbolsIn.js","webpack:///./node_modules/lodash/_getTag.js","webpack:///./node_modules/lodash/_getValue.js","webpack:///./node_modules/lodash/_hashClear.js","webpack:///./node_modules/lodash/_hashDelete.js","webpack:///./node_modules/lodash/_hashGet.js","webpack:///./node_modules/lodash/_hashHas.js","webpack:///./node_modules/lodash/_hashSet.js","webpack:///./node_modules/lodash/_initCloneArray.js","webpack:///./node_modules/lodash/_initCloneByTag.js","webpack:///./node_modules/lodash/_initCloneObject.js","webpack:///./node_modules/lodash/_isIndex.js","webpack:///./node_modules/lodash/_isKey.js","webpack:///./node_modules/lodash/_isKeyable.js","webpack:///./node_modules/lodash/_isMasked.js","webpack:///./node_modules/lodash/_isPrototype.js","webpack:///./node_modules/lodash/_listCacheClear.js","webpack:///./node_modules/lodash/_listCacheDelete.js","webpack:///./node_modules/lodash/_listCacheGet.js","webpack:///./node_modules/lodash/_listCacheHas.js","webpack:///./node_modules/lodash/_listCacheSet.js","webpack:///./node_modules/lodash/_mapCacheClear.js","webpack:///./node_modules/lodash/_mapCacheDelete.js","webpack:///./node_modules/lodash/_mapCacheGet.js","webpack:///./node_modules/lodash/_mapCacheHas.js","webpack:///./node_modules/lodash/_mapCacheSet.js","webpack:///./node_modules/lodash/_memoizeCapped.js","webpack:///./node_modules/lodash/_nativeCreate.js","webpack:///./node_modules/lodash/_nativeKeys.js","webpack:///./node_modules/lodash/_nativeKeysIn.js","webpack:///./node_modules/lodash/_nodeUtil.js","webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/lodash/_overArg.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_stackClear.js","webpack:///./node_modules/lodash/_stackDelete.js","webpack:///./node_modules/lodash/_stackGet.js","webpack:///./node_modules/lodash/_stackHas.js","webpack:///./node_modules/lodash/_stackSet.js","webpack:///./node_modules/lodash/_strictIndexOf.js","webpack:///./node_modules/lodash/_stringToPath.js","webpack:///./node_modules/lodash/_toKey.js","webpack:///./node_modules/lodash/_toSource.js","webpack:///./node_modules/lodash/cloneDeep.js","webpack:///./node_modules/lodash/eq.js","webpack:///./node_modules/lodash/get.js","webpack:///./node_modules/lodash/includes.js","webpack:///./node_modules/lodash/isArguments.js","webpack:///./node_modules/lodash/isArray.js","webpack:///./node_modules/lodash/isArrayLike.js","webpack:///./node_modules/lodash/isBuffer.js","webpack:///./node_modules/lodash/isFunction.js","webpack:///./node_modules/lodash/isLength.js","webpack:///./node_modules/lodash/isMap.js","webpack:///./node_modules/lodash/isObject.js","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./node_modules/lodash/isSet.js","webpack:///./node_modules/lodash/isString.js","webpack:///./node_modules/lodash/isSymbol.js","webpack:///./node_modules/lodash/isTypedArray.js","webpack:///./node_modules/lodash/keys.js","webpack:///./node_modules/lodash/keysIn.js","webpack:///./node_modules/lodash/memoize.js","webpack:///./node_modules/lodash/setWith.js","webpack:///./node_modules/lodash/stubArray.js","webpack:///./node_modules/lodash/stubFalse.js","webpack:///./node_modules/lodash/toFinite.js","webpack:///./node_modules/lodash/toInteger.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./node_modules/lodash/toString.js","webpack:///./node_modules/lodash/values.js","webpack:///./src/assets/js/Common.js","webpack:///./src/assets/js/Constants.js","webpack:///./src/assets/js/MultiLevelHashMap.js","webpack:///./src/assets/js/ResizableDivider.js","webpack:///./src/assets/js/Tab.js","webpack:///./src/assets/js/datasets/filter-template-1.js","webpack:///./src/assets/js/datasets/filter-template-2.js","webpack:///./src/assets/js/datasets/filter-template-3.js","webpack:///./src/assets/js/datasets/filter-template-4.js","webpack:///./src/assets/js/datasets/filter-template-5.js","webpack:///./src/assets/js/datasets/global-terms.js","webpack:///./src/assets/js/entities/DataExplorerAnalysis.js","webpack:///./src/assets/js/entities/DataExplorerCard.js","webpack:///./src/assets/js/entities/DataExplorerCellData.js","webpack:///./src/assets/js/entities/DataExplorerDrillDownStatus.js","webpack:///./src/assets/js/entities/DataStructure.js","webpack:///./src/assets/js/entities/Dimension.js","webpack:///./src/assets/js/entities/Project.js","webpack:///./src/assets/js/entities/SourceFile.js","webpack:///./src/assets/js/entities/VirtualTableCell.js","webpack:///./src/assets/js/services/DimensionTypesService.js","webpack:///./src/assets/js/services/ImportXlsxService.js","webpack:///./src/assets/js/services/KeyboardService.js","webpack:///./src/assets/js/services/SourceFilesService.js","webpack:///./src/assets/js/services/StorageService.js","webpack:///./src/assets/js/tabs/DatabaseView.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorer.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerAnalyses.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerAttributesTree.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerCellFormulas.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerEval.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerFormulas.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerHelper.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerImport.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerQueryBuilder.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerRenderChart.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerSecondarySidebar.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerSections.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerSidebar.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerStorage.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerTemplate.js","webpack:///./src/assets/js/tabs/data-explorer/DataExplorerVirtualTable.js","webpack:///./src/assets/js/tabs/data-explorer/table/DataExplorerCellEditing.js","webpack:///./src/assets/js/tabs/data-explorer/table/DataExplorerCellViewer.js","webpack:///./src/assets/js/tabs/data-explorer/table/DataExplorerDrillDown.js","webpack:///./src/assets/js/tabs/data-explorer/table/DataExplorerRenderTable.js","webpack:///./src/assets/js/tabs/dropbox/Dropbox.js","webpack:///./src/assets/js/tabs/project-setup/ProjectSetup.js","webpack:///./src/assets/js/tabs/source-data/SourceData.js","webpack:///./src/assets/js/tabs/source-data/SourceDataFiles.js","webpack:///./src/assets/js/tabs/source-data/SourceDataGraphView.js","webpack:///./src/assets/js/tabs/source-data/SourceDataPoints.js","webpack:///./src/assets/js/tabs/source-data/SourceDataPointsSidebar.js","webpack:///./src/assets/js/tabs/source-data/SourceDataService.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/AddFileSteps.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflow.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflowAutoDetectTable.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflowItemFormatter.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflowLegend.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflowStep1.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflowStep2.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflowStep3.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/FileWorkflowStep4.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/SourceDataEditTableCell.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/SourceDataFilesReviewTable.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/SourceDataFilesSidebar.js","webpack:///./src/assets/js/tabs/source-data/add-file-workflow/SourceDataTableCellModal.js","webpack:///./src/assets/js/tabs/source-data/add-manual-workflow/AddManualSidebar.js","webpack:///./src/assets/js/tabs/source-data/add-manual-workflow/AddManualTable.js","webpack:///./src/assets/js/tabs/source-data/source-data-structures/SourceDataStructureSets.js","webpack:///./src/assets/js/tabs/source-data/source-data-structures/SourceDataStructureValidator.js","webpack:///./src/assets/js/tabs/source-data/source-data-structures/SourceDataStructures.js"],"names":[],"mappings":";;;;;;;;;AAAA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACNA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,cAAc,mBAAO,CAAC,qDAAY;AAClC,cAAc,mBAAO,CAAC,qDAAY;AAClC,cAAc,mBAAO,CAAC,qDAAY;;AAElC;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/BA,qBAAqB,mBAAO,CAAC,mEAAmB;AAChD,sBAAsB,mBAAO,CAAC,qEAAoB;AAClD,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/BA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACNA,oBAAoB,mBAAO,CAAC,iEAAkB;AAC9C,qBAAqB,mBAAO,CAAC,mEAAmB;AAChD,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,kBAAkB,mBAAO,CAAC,6DAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/BA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACNA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACNA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,eAAe,mBAAO,CAAC,uDAAa;AACpC,eAAe,mBAAO,CAAC,uDAAa;AACpC,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1BA,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACLA,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACLA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACxBA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,kBAAkB,mBAAO,CAAC,2DAAe;AACzC,cAAc,mBAAO,CAAC,mDAAW;AACjC,eAAe,mBAAO,CAAC,qDAAY;AACnC,cAAc,mBAAO,CAAC,qDAAY;AAClC,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA,sBAAsB,mBAAO,CAAC,qEAAoB;AAClD,SAAS,mBAAO,CAAC,yCAAM;;AAEvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC3BA,SAAS,mBAAO,CAAC,yCAAM;;AAEvB;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,WAAW,mBAAO,CAAC,6CAAQ;;AAE3B;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,aAAa,mBAAO,CAAC,iDAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA,qBAAqB,mBAAO,CAAC,mEAAmB;;AAEhD;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;;;;;;;;;;;;ACxBA,YAAY,mBAAO,CAAC,iDAAU;AAC9B,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,oBAAoB,mBAAO,CAAC,iEAAkB;AAC9C,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,aAAa,mBAAO,CAAC,mDAAW;AAChC,qBAAqB,mBAAO,CAAC,mEAAmB;AAChD,qBAAqB,mBAAO,CAAC,mEAAmB;AAChD,sBAAsB,mBAAO,CAAC,qEAAoB;AAClD,cAAc,mBAAO,CAAC,mDAAW;AACjC,eAAe,mBAAO,CAAC,qDAAY;AACnC,YAAY,mBAAO,CAAC,+CAAS;AAC7B,eAAe,mBAAO,CAAC,qDAAY;AACnC,YAAY,mBAAO,CAAC,+CAAS;AAC7B,WAAW,mBAAO,CAAC,6CAAQ;;AAE3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,QAAQ;AACnB;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;;;;;;;;;;;AC1KA,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvBA,eAAe,mBAAO,CAAC,uDAAa;AACpC,YAAY,mBAAO,CAAC,iDAAU;;AAE9B;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,aAAa,EAAE;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvBA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,cAAc,mBAAO,CAAC,mDAAW;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA,aAAa,mBAAO,CAAC,mDAAW;AAChC,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,qBAAqB,mBAAO,CAAC,mEAAmB;;AAEhD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC3BA,oBAAoB,mBAAO,CAAC,iEAAkB;AAC9C,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,oBAAoB,mBAAO,CAAC,iEAAkB;;AAE9C;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA,aAAa,mBAAO,CAAC,mDAAW;AAChC,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACXA,iBAAiB,mBAAO,CAAC,yDAAc;AACvC,eAAe,mBAAO,CAAC,uDAAa;AACpC,eAAe,mBAAO,CAAC,qDAAY;AACnC,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9CA,aAAa,mBAAO,CAAC,mDAAW;AAChC,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,eAAe,mBAAO,CAAC,qDAAY;AACnC,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC3DA,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC7BA,eAAe,mBAAO,CAAC,qDAAY;AACnC,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChCA,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,eAAe,mBAAO,CAAC,uDAAa;AACpC,cAAc,mBAAO,CAAC,qDAAY;AAClC,eAAe,mBAAO,CAAC,qDAAY;AACnC,YAAY,mBAAO,CAAC,iDAAU;;AAE9B;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,WAAW,EAAE;AACb,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA,aAAa,mBAAO,CAAC,mDAAW;AAChC,eAAe,mBAAO,CAAC,uDAAa;AACpC,cAAc,mBAAO,CAAC,mDAAW;AACjC,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACbA,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;;AClBA,cAAc,mBAAO,CAAC,mDAAW;AACjC,YAAY,mBAAO,CAAC,iDAAU;AAC9B,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA,yDAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;AClCA,uBAAuB,mBAAO,CAAC,uEAAqB;;AAEpD;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA,aAAa,mBAAO,CAAC,mDAAW;;AAEhC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA,uBAAuB,mBAAO,CAAC,uEAAqB;;AAEpD;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,sBAAsB,mBAAO,CAAC,qEAAoB;;AAElD;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO,WAAW;AAC7B,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA,wBAAwB;;AAExB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvCA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO,WAAW;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO,WAAW;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA,WAAW,mBAAO,CAAC,+CAAS;;AAE5B;AACA;;AAEA;;;;;;;;;;;;ACLA,gBAAgB,mBAAO,CAAC,yDAAc;;AAEtC;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,GAAG;AACH,CAAC;;AAED;;;;;;;;;;;;ACVA;AACA;;AAEA;;;;;;;;;;;;ACHA,qBAAqB,mBAAO,CAAC,mEAAmB;AAChD,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,WAAW,mBAAO,CAAC,6CAAQ;;AAE3B;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA,qBAAqB,mBAAO,CAAC,mEAAmB;AAChD,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,aAAa,mBAAO,CAAC,iDAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA,gBAAgB,mBAAO,CAAC,yDAAc;;AAEtC;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA,cAAc,mBAAO,CAAC,qDAAY;;AAElC;AACA;;AAEA;;;;;;;;;;;;ACLA,aAAa,mBAAO,CAAC,mDAAW;;AAEhC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC7CA,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,gBAAgB,mBAAO,CAAC,uDAAa;;AAErC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;;AC7BA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,gBAAgB,mBAAO,CAAC,uDAAa;;AAErC;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACxBA,eAAe,mBAAO,CAAC,uDAAa;AACpC,UAAU,mBAAO,CAAC,6CAAQ;AAC1B,cAAc,mBAAO,CAAC,qDAAY;AAClC,UAAU,mBAAO,CAAC,6CAAQ;AAC1B,cAAc,mBAAO,CAAC,qDAAY;AAClC,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACZA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC7BA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtBA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtBA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACzBA,uBAAuB,mBAAO,CAAC,uEAAqB;AACpD,oBAAoB,mBAAO,CAAC,iEAAkB;AAC9C,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,sBAAsB,mBAAO,CAAC,qEAAoB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5EA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,mBAAmB,mBAAO,CAAC,+DAAiB;AAC5C,kBAAkB,mBAAO,CAAC,6DAAgB;;AAE1C;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACxBA,cAAc,mBAAO,CAAC,mDAAW;AACjC,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACdA,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACZA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AClCA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;AClBA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACzBA,WAAW,mBAAO,CAAC,+CAAS;AAC5B,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,UAAU,mBAAO,CAAC,6CAAQ;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACrBA,cAAc,mBAAO,CAAC,mDAAW;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;;;;;;;;;;;ACzBA,gBAAgB,mBAAO,CAAC,yDAAc;;AAEtC;AACA;;AAEA;;;;;;;;;;;;ACLA,cAAc,mBAAO,CAAC,qDAAY;;AAElC;AACA;;AAEA;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA,+DAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH,CAAC;;AAED;;;;;;;;;;;;;AC7BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACdA,iBAAiB,mBAAO,CAAC,2DAAe;;AAExC;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACRA,gBAAgB,mBAAO,CAAC,yDAAc;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACbA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,UAAU,mBAAO,CAAC,6CAAQ;AAC1B,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtBA,oBAAoB,mBAAO,CAAC,iEAAkB;;AAE9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;;;;;;;;;;;;AC1BA,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpBA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;;;;;;;;;;ACzBA,gBAAgB,mBAAO,CAAC,yDAAc;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,EAAE;AACf;AACA;AACA;AACA,mBAAmB,SAAS,GAAG,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,iBAAiB;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpCA,cAAc,mBAAO,CAAC,qDAAY;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,WAAW,EAAE;AACb,aAAa,EAAE;AACf;AACA;AACA,iBAAiB,QAAQ,OAAO,SAAS,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChCA,kBAAkB,mBAAO,CAAC,6DAAgB;AAC1C,kBAAkB,mBAAO,CAAC,2DAAe;AACzC,eAAe,mBAAO,CAAC,qDAAY;AACnC,gBAAgB,mBAAO,CAAC,uDAAa;AACrC,aAAa,mBAAO,CAAC,iDAAU;;AAE/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpDA,sBAAsB,mBAAO,CAAC,qEAAoB;AAClD,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA,6BAA6B,kBAAkB,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA,8CAA8C,kBAAkB,EAAE;AAClE;AACA;AACA;;AAEA;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACzBA,iBAAiB,mBAAO,CAAC,yDAAc;AACvC,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChCA,yDAAW,mBAAO,CAAC,+CAAS;AAC5B,gBAAgB,mBAAO,CAAC,uDAAa;;AAErC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACrCA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AClCA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5BA,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1BA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,cAAc,mBAAO,CAAC,mDAAW;AACjC,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC7BA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,mBAAmB,mBAAO,CAAC,6DAAgB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5BA,uBAAuB,mBAAO,CAAC,uEAAqB;AACpD,gBAAgB,mBAAO,CAAC,yDAAc;AACtC,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1BA,oBAAoB,mBAAO,CAAC,iEAAkB;AAC9C,eAAe,mBAAO,CAAC,uDAAa;AACpC,kBAAkB,mBAAO,CAAC,2DAAe;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpCA,oBAAoB,mBAAO,CAAC,iEAAkB;AAC9C,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,kBAAkB,mBAAO,CAAC,2DAAe;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/BA,eAAe,mBAAO,CAAC,uDAAa;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA,iBAAiB;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACxEA,cAAc,mBAAO,CAAC,qDAAY;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,WAAW,EAAE;AACb,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACzCA,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACnCA,eAAe,mBAAO,CAAC,qDAAY;AACnC,eAAe,mBAAO,CAAC,qDAAY;;AAEnC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjEA,mBAAmB,mBAAO,CAAC,+DAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC3BA,iBAAiB,mBAAO,CAAC,2DAAe;AACxC,WAAW,mBAAO,CAAC,6CAAQ;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACe;;AAEtD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA,QAAQ,kEAAW;AACnB;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,QAAQ,kEAAW;AACnB,2BAA2B,oDAAK;AAChC,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,QAAQ,kEAAW;AACnB;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE,qDAAM;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,uCAAuC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC7UP;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO,kC;;;;;;;;;;;;ACzDP;AAAA;AAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;AC7CA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,gD;;;;;;;;;;;;ACxCP;AAAA;AAAA;AAAA;AAA2D;AACsB;;AAE1E;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,uEAAc;;AAEvC;AACA;AACA;AACA,gBAAgB,uEAAc;AAC9B,gBAAgB,6FAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AC7LA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;;;;;;;;;;;ACxIA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;;;;;;;;;;;ACtIA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;;;;;;;;;;;ACvNA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;;;;;;;;;;;ACdA;AAAA;AAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;AC1KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACoB;AACQ;;AAEvD;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,kEAAgB;AAC3C,aAAa;;AAEb;AACA,2BAA2B,kEAAgB;AAC3C,aAAa;AACb;AACA;;AAEA;AACA,mBAAmB;AACnB,sBAAsB;AACtB,gBAAgB;AAChB;AACA;AACA,uBAAuB,kDAAG,oBAAoB,IAAI,IAAI,OAAO;;AAE7D;AACA,2BAA2B,0EAAoB;AAC/C;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB,sBAAsB;AACtB,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,kDAAG,oBAAoB,IAAI,IAAI,OAAO;AAC9C;AACA;;;;;;;;;;;;;AChGA;AAAA;AAAA;AAA4E;;AAErE;AACP;AACA;;AAEA;;AAEA;AACA,+CAA+C,mDAAmD;AAClG;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,4BAA4B;AAC/C,mCAAmC,wFAA2B;;AAE9D;AACA;;AAEA;AACA,2CAA2C,wFAA2B;AACtE;AACA;AACA;;AAEA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;;;;;;;;;;;;AC9CA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAO;AACP;AACA;AACA,+CAA+C,mDAAmD;AAClG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAyC;AACiC;;AAEnE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qFAAqB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,oDAAS;AACpC;;AAEA;AACA,2BAA2B,oDAAS;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACM;AACiC;AACd;AACE;AACd;AACR;AACE;;AAEnC;AACP;AACA;;AAEA;;AAEA,mBAAmB,aAAa;AAChC;;AAEA,mBAAmB,kBAAkB;AACrC;;AAEA,mBAAmB,YAAY;AAC/B;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA,gBAAgB,0EAAoB;AACpC;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,6CAA6C,sDAAU;AACvD;;AAEA;AACA,2BAA2B,oDAAS;AACpC,aAAa;;AAEb;AACA;AACA;AACA,gDAAgD,4DAAa;AAC7D;AACA;;AAEA;AACA,2BAA2B,0EAAoB;AAC/C,aAAa;AACb;;AAEA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA,8BAA8B,qFAAqB;AACnD;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA,8BAA8B,qFAAqB;AACnD;AACA,iBAAiB;AACjB,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,sDAAU;AAC7C;AACA;AACA,mBAAmB,8CAAM;AACzB;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,sBAAsB,8CAAM;AAC5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;;AAEA;AACA;AACA,qCAAqC,qFAAqB;AAC1D;AACA;AACA;AACA,uDAAuD,oBAAoB;AAC3E;AACA;AACA;AACA,qCAAqC,qFAAqB;AAC1D;AACA;AACA;AACA,uDAAuD,oBAAoB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8CAAM;AACnB;AACA;AACA;AACA,uBAAuB,oDAAS;AAChC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,8CAAM;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,8CAA8C,EAAE,SAAS,EAAE;AAC3D;AACA,kDAAkD,EAAE,SAAS,EAAE;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,2BAA2B,8CAAM;AACjC;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,uEAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,wBAAwB,uEAAc;AACtC;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,8BAA8B,oDAAS;AACvC;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,8CAAM;;AAEzB;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,uBAAuB,4BAA4B;AACnD;AACA;;AAEA,2BAA2B,uBAAuB;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,4BAA4B;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qBAAqB,4DAAa;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,8CAAM;AACzC;AACA;AACA,iCAAiC,8CAAM;AACvC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC3sBA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACO;;AAE7B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC,gDAAO;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;;AAEA;AACA,2BAA2B,iDAAG,yBAAyB,IAAI,IAAI,IAAI;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,iDAAG,yBAAyB,IAAI,IAAI,IAAI;;AAEzE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,0D;;;;;;;;;;;;ACRP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACM;AACW;AACM;AAC8B;AAChC;AAClD;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,QAAQ,8DAAc;;AAEtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,qBAAqB;AAC3D;;AAEA,oCAAoC,eAAe;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,8DAAc;;AAExC,kDAAkD,yDAAO;;AAEzD,+BAA+B,+DAAU;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT,qBAAqB,8CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa,8DAAc;;AAE3B;AACA;;AAEA;AACA,2BAA2B,8FAA0B;AACrD;AACA;AACA;;AAEA,wBAAwB,8DAAc,mCAAmC,yDAAO,KAAK,8DAAc;AACnG;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,kDAAG;AACrC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEO;;;;;;;;;;;;;AC/KP;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEO,8C;;;;;;;;;;;;AChCP;AAAA;AAAA;AAAA;AAAA;AAA6B;AACqB;;AAElD;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA,eAAe,iDAAG,CAAC,8DAAc,gCAAgC,iBAAiB;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,uCAAuC,wBAAwB;AAC/D,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,iDAAG,+BAA+B,MAAM;AAC7E;;AAEA;AACA,SAAS;AACT;AACA;;AAEO;;;;;;;;;;;;;ACjDP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACW;AACoC;AACF;AAC5B;AACF;AACgB;AACN;;AAE5D;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,uBAAuB,iBAAiB;AACxC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,8CAAM;AACzC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,yDAAO;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,uEAAU;AAClB,QAAQ,6FAAoB;AAC5B,QAAQ,6EAAY;AACpB,QAAQ,6DAAO;AACf,QAAQ,+DAAY;AACpB,QAAQ,2FAAmB;AAC3B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC9LP;AAAA;AAAA;AAAA;AAA8C;AACc;;AAE5D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,uEAAc;AAC1B,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,yDAAO;AACrC;;AAEA,wBAAwB,uEAAc;AACtC,YAAY,uEAAc;AAC1B,SAAS;;AAET;AACA;AACA;AACA;;AAEA,YAAY,uEAAc;AAC1B,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uEAAc;AACtC,gBAAgB,uEAAc;AAC9B,aAAa;AACb,SAAS;AACT;;AAEA;AACA,YAAY,uEAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,uEAAc;;AAEpC;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,uEAAc;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC7EP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;AACQ;AACR;AACJ;AACA;AACU;AACU;AAChB;AACF;AACA;AACE;AACQ;;AAEtE;AACA;AACA;AACA;AACA;AACA,4CAA4C,kFAAwB;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,0EAAoB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,0EAAoB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,sEAAkB;AAC3C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,uBAAuB,EAAE,sEAAkB;AAC3C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE,sEAAkB;AAC3C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE,sEAAkB;AAC3C;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,uBAAuB,EAAE,sEAAkB;AAC3C;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,0EAAoB;AAC3D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE,sEAAkB;AAC3C;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,0EAAoB;AAC3D;AACA;AACA,uCAAuC,0EAAoB;AAC3D;AACA;AACA,uCAAuC,0EAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;;AAEA,QAAQ,0FAA4B;;AAEpC;AACA;AACA,YAAY,wEAAmB,MAAM,0EAAoB;AACzD,YAAY,mFAAwB;AACpC,SAAS;;AAET;AACA;AACA;AACA;;AAEA,YAAY,gFAAuB;;AAEnC,oBAAoB,gFAAuB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,mFAAwB;AACpC,SAAS;;AAET;AACA;AACA;AACA;;AAEA,YAAY,gFAAuB;;AAEnC,YAAY,mFAAwB;AACpC,SAAS;;AAET;AACA;AACA;AACA;;AAEA,YAAY,gFAAuB;;AAEnC,YAAY,mFAAwB;AACpC,SAAS;;AAET;AACA;AACA,YAAY,2EAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oBAAoB,0EAAoB;AACxC;;AAEA,gBAAgB,sEAAkB;AAClC;AACA,SAAS;;AAET,QAAQ,0EAAoB;AAC5B,QAAQ,wEAAmB;AAC3B,QAAQ,sEAAkB;AAC1B;AACA;;AAEO;;;;;;;;;;;;;AC9PP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACS;AACqC;AACjB;AACK;AAC/B;AACc;AACY;AACE;AACc;;AAE1E,mCAAmC,wCAAG;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,0DAAY;;AAEpB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,sEAAkB;AACvC;AACA;;AAEA,QAAQ,sEAAkB;AAC1B;AACA,QAAQ,sEAAkB;AAC1B,QAAQ,sEAAkB;AAC1B,QAAQ,sEAAkB;AAC1B;;AAEA;AACA;AACA;AACA,YAAY,sEAAkB;;AAE9B,YAAY,kEAAgB;AAC5B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC,iBAAiB,gCAAgC;AACjD;AACA,oBAAoB,sFAAuB;AAC3C;AACA;;AAEA,yCAAyC,uEAAc;AACvD;AACA;AACA;AACA;AACA,gBAAgB,sEAAkB;AAClC,gBAAgB,sEAAkB;AAClC;;AAEA,YAAY,sEAAkB;AAC9B,SAAS;AACT,YAAY,kEAAgB;AAC5B,gBAAgB,sFAAuB;AACvC,aAAa;;AAEb,YAAY,sEAAkB;AAC9B;AACA;;AAEA;AACA;AACA,YAAY,sFAAuB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAc;AAC1B;;AAEA;AACA;AACA;AACA,QAAQ,wEAAmB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,uEAAc;AACzC,gCAAgC,mFAAoB;AACpD;AACA;AACA,SAAS;AACT,QAAQ,uEAAc;;AAEtB;AACA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,sFAAuB;;AAE3E,QAAQ,sEAAkB;AAC1B;;AAEA;AACA,QAAQ,8CAAM;AACd,4BAA4B,uEAAc;AAC1C,6BAA6B,kDAAG;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEO;;;;;;;;;;;;;AC9JP;AAAA;AAAA;AAAA;AAAA;AAAsC;AACyB;AACL;;AAEnD;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,uEAAc;AACtC,sBAAsB,uEAAc;AACpC,yBAAyB,8CAAM;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sEAAkB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA,mCAAmC,sEAAkB;AACrD;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACD;AACA;AACF;AACU;;AAE/D;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,0EAAoB;AAChC,SAAS;AACT;AACA;AACA;AACA;;AAEA,YAAY,0EAAoB;AAChC,SAAS;AACT;;AAEA;AACA;AACA,QAAQ,0EAAoB;;AAE5B;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,uEAAc;AACnD,YAAY,0EAAoB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ,wEAAmB,MAAM,0EAAoB;;AAErD;AACA,QAAQ,kFAAwB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,uEAAc;AAC5C,YAAY,0EAAoB;AAChC;AACA;AACA,QAAQ,0EAAoB;;AAE5B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmE;AACJ;AACjB;AACY;;AAE1D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,0DAAY;AAChC;AACA;AACA,SAAS;AACT,oBAAoB,0DAAY;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,2EAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uCAAuC;AACvC,uBAAuB,uEAAc;AACrC,oBAAoB,sEAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;;;;;;;;;;;AClJA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACY;AACR;;AAE9D;AACA;AACA;AACA,sBAAsB,0EAAoB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,sEAAkB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,QAAQ,kFAAwB;AAChC;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,sEAAkB;AAClC,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,kFAAwB,QAAQ;AACxC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,sEAAkB;AAClC;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACxMP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AAC6B;AACJ;AACjB;AACgB;AACA;AACF;AACU;;AAEtE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA,YAAY,0EAAoB;AAChC;;AAEA;AACA,YAAY,0EAAoB;AAChC,YAAY,0EAAoB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,2BAA2B,6BAA6B;AACxD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,uEAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAM;AAC/B;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,iCAAiC,2EAAgB;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,0DAAY;AACpB;;AAEA;AACA,QAAQ,0DAAY;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,mBAAmB;AAC9C;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,wEAAmB,MAAM,0EAAoB;AACrD,QAAQ,kFAAwB;AAChC;;AAEA;AACA,QAAQ,kFAAwB;AAChC,QAAQ,wEAAmB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEO;;;;;;;;;;;;;AChYP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AAC6B;AACW;AACN;AACD;AACY;AACA;;AAE1E;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sFAAuB;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wBAAwB,sFAAuB;AAC/C,wBAAwB,sFAAuB;;AAE/C,qCAAqC,sFAAuB;AAC5D;;AAEA;AACA;;AAEA,wCAAwC,sFAAuB;AAC/D;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,sFAAuB;AAC3C,mCAAmC,sFAAuB;AAC1D,oBAAoB,sFAAuB;AAC3C,qCAAqC,sFAAuB;AAC5D,mCAAmC,sFAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA,wBAAwB,sFAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,wBAAwB,sFAAuB;AAC/C;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,oCAAoC,uEAAc;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,QAAQ,kEAAgB;AACxB;AACA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,gCAAgC;AAC7C;AACA,gBAAgB,sFAAuB;AACvC;AACA;;AAEA;AACA,0BAA0B,6EAAiB;AAC3C,QAAQ,uEAAc;AACtB;AACA,sBAAsB,0EAAoB;;AAE1C;AACA,YAAY,sFAAuB;AACnC,SAAS;;AAET;;AAEA;AACA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;;AAEtB;AACA;;AAEA;AACA;AACA,yBAAyB,uEAAc,8BAA8B,0EAAoB;AACzF;AACA,yBAAyB,iDAAG,CAAC,uEAAc,gCAAgC,KAAK;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC/LP;AAAA;AAAA;AAAA;AAAA;AAAsC;AACyB;AACL;;AAE1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qEAAqE,8CAAM;AAC3E;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,uEAAc;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,8CAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,uEAAc;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,2BAA2B,sEAAkB;AAC7C;AACA;AACA,sDAAsD,8CAAM,0BAA0B,8CAAM;AAC5F,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACxKP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACyB;AACD;AACJ;AACY;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,KAAK,kFAAwB,kBAAkB;AAC1E,0BAA0B,kFAAwB;;AAElD,qBAAqB,sEAAkB;AACvC;AACA;;AAEA,+BAA+B,gBAAgB;AAC/C,yBAAyB,sEAAkB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,2BAA2B,KAAK,kFAAwB,kBAAkB;AAC1E,0BAA0B,kFAAwB;AAClD;;AAEA,iCAAiC,uEAAc,8BAA8B,0EAAoB;AACjG,qBAAqB,sEAAkB;AACvC;AACA;;AAEA,+BAA+B,gBAAgB;AAC/C,yBAAyB,sEAAkB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C,qBAAqB,sEAAkB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW,OAAO,qBAAqB;AAC5E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAAM;;AAEhC;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEO;;;;;;;;;;;;;ACpJP;AAAA;AAAA;AAAA;AAAA;AAA+D;AACW;AAChB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,yBAAyB,uEAAc;AACvC;AACA;AACA,SAAS;;AAET;AACA;AACA,uBAAuB,+BAA+B;AACtD,qDAAqD,sFAA0B;AAC/E;AACA;;AAEA;AACA;AACA,uBAAuB,4CAA4C;AACnE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,sEAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B,sEAAkB;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACjKP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AAC2B;AACF;AACjB;AACY;AACY;;AAEtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAkB;AAC9B,YAAY,sEAAkB;AAC9B,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,kFAAwB;;AAEpC;AACA,SAAS;;AAET;AACA;AACA,YAAY,sEAAkB;AAC9B,SAAS;AACT;AACA,8BAA8B,yEAAe,0BAA0B,yEAAe;AACtF;AACA;AACA,SAAS;AACT;AACA,YAAY,sEAAkB;;AAE9B,8BAA8B,yEAAe,0BAA0B,yEAAe;AACtF;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,sEAAkB;;AAE1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,EAAE,sEAAkB;AAC3C;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB,uEAAc;AACpC,oBAAoB,8CAAM;;AAE1B;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAkB;AAC9B,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAkB;AAC9B,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0DAAY;AAC9B;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,8EAA8E,0DAAY;AAC1F;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,+EAA+E,0DAAY;AAC3F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AClNP;AAAA;AAAA;AAAA;AAAA;AAAiE;AACH;AACJ;;AAE1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,yEAAe,2BAA2B,yEAAe;AACzE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,gBAAgB,yEAAe,2BAA2B,yEAAe;AACzE;AACA;AACA;AACA;AACA;AACA,oBAAoB,0EAAoB;AACxC;AACA,iBAAiB;;AAEjB;AACA,gBAAgB,sEAAkB;AAClC,gBAAgB,sEAAkB;;AAElC;AACA;;AAEA;AACA;AACA,oBAAoB,sEAAkB;AACtC,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA,iBAAiB,yEAAe,cAAc,yEAAe;AAC7D;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,iBAAiB,yEAAe,cAAc,yEAAe;AAC7D;AACA;;AAEA;AACA,gBAAgB,yEAAe;AAC/B;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC3FP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmE;AACJ;AACjB;AACgB;AACJ;AACoB;AAChB;AACQ;;AAEtE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,6BAA6B;AACpD;;AAEA,6BAA6B,SAAS;AACtC;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;;AAEtB,QAAQ,uEAAc;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,2EAAgB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,YAAY,uEAAc;AAC1B;AACA;;AAEA;;AAEA,QAAQ,0FAA4B;;AAEpC;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;;AAEA,qBAAqB,uEAAc,yBAAyB,0EAAoB;;AAEhF;AACA;;AAEA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,QAAQ,kFAAwB;;AAEhC,QAAQ,sEAAkB;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,0DAAY;AACxB,SAAS;AACT,YAAY,0DAAY;AACxB;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,0DAAY,wBAAwB,0DAAY;AACnG,+BAA+B,0EAAoB;AACnD;AACA;AACA;;AAEA,2BAA2B,0DAAY;;AAEvC;;AAEA;AACA;AACA;AACA,2CAA2C,sEAAkB;AAC7D;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA,+BAA+B,0DAAY,8BAA8B,0DAAY;AACrF,qBAAqB;AACrB,+BAA+B,0DAAY,8BAA8B,0DAAY;AACrF;AACA;;AAEA;AACA,2BAA2B,0EAAoB;AAC/C;;AAEA;AACA,2BAA2B,0EAAoB;AAC/C;;AAEA;AACA,2BAA2B,0EAAoB;AAC/C;;AAEA;AACA,2BAA2B,0EAAoB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,uEAAc;;AAEpC,uBAAuB,oBAAoB;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,sEAAkB;AAC/C;;AAEA,QAAQ,sEAAkB;AAC1B;AACA;;AAEO;;;;;;;;;;;;;ACrPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmE;AACA;AACA;AACA;AACA;AACJ;AACjB;AACgB;AACJ;AACI;AACF;AACU;;AAEtE;AACA;AACA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA,aAAa;AACb;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA,aAAa;AACb;;AAEA,QAAQ,0EAAoB,oEAAoE,UAAU;AAC1G;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,+BAA+B,yBAAyB;AACxD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,6BAA6B;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0EAAoB;AAC5C;AACA;;AAEA;AACA,wBAAwB,0EAAoB;AAC5C;AACA;;AAEA;AACA,wBAAwB,0EAAoB;AAC5C;AACA;;AAEA;AACA,wBAAwB,0DAAY;AACpC;;AAEA;AACA,4CAA4C,0DAAY;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gCAAgC,0DAAY;;AAE5C,+BAA+B,iBAAiB;AAChD,qCAAqC,sEAAkB;AACvD;AACA;;AAEA,gBAAgB,0EAAoB;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,IAAI;AAC1B,0CAA0C,+BAA+B;AACzE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iDAAiD,IAAI,0CAA0C,EAAE;AACjG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,2EAAe,EAAE,2EAAe,EAAE,2EAAe,EAAE,2EAAe,EAAE,2EAAe;AAClH;;AAEA;AACA,2BAA2B,uEAAc;;AAEzC;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,uEAAc;AAC9D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,0DAAY;AACpB,QAAQ,0DAAY;;AAEpB;AACA,4DAA4D,0DAAY;;AAExE;AACA,4DAA4D,0DAAY;;AAExE;AACA;;AAEA;;AAEA,uBAAuB,4BAA4B;AACnD;AACA,+BAA+B,yCAAyC;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA;AACA;;AAEA;;AAEA,QAAQ,sEAAkB;;AAE1B,QAAQ,yEAAmB,MAAM,0EAAoB;;AAErD,QAAQ,mFAAwB;AAChC;AACA;;AAEO;;;;;;;;;;;;;ACtRP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACL;AACmD;AACtB;AACJ;AACD;AACR;AACI;AACU;AACN;AACQ;AACI;;AAE1E;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,+BAA+B,2BAA2B;AAC1D;;AAEA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA,iCAAiC,0EAAoB;;AAErD,2BAA2B,8BAA8B;AACzD;AACA;AACA,wCAAwC,0EAAoB;;AAE5D;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,gCAAgC,8CAAM;AACtC,qBAAqB;AACrB;AACA,gCAAgC,8CAAM;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,YAAY,gFAAuB;AACnC,YAAY,uFAAuB;AACnC;AACA,YAAY,gFAAuB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,gFAAuB;AACnC;AACA;AACA,YAAY,uFAAuB;AACnC,YAAY,uFAAuB;AACnC;AACA,YAAY,gFAAuB;AACnC,YAAY,gFAAuB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,sEAAkB;AAC9C;AACA;AACA,sBAAsB,uEAAc;AACpC,yBAAyB,uEAAc,yBAAyB,0EAAoB;AACpF;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,6BAA6B,sEAAkB;AAC/C;;AAEA;AACA;;AAEA;AACA;AACA,0CAA0C,2EAAgB;AAC1D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,mFAAqB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,uEAAc;AACrC,SAAS;AACT;AACA,uCAAuC,sEAAkB;AACzD,gBAAgB,uEAAc;AAC9B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,IAAI;AACjB;AACA;;AAEA;AACA,8BAA8B,qDAAM;;AAEpC;AACA,oCAAoC,wDAAS;AAC7C;;AAEA;AACA;;AAEA;AACA,0CAA0C,2EAAgB;AAC1D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D,iGAA2B;AACtF;AACA;AACA;AACA,8CAA8C,mFAAqB;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA,6BAA6B,sEAAkB;AAC/C;AACA,iCAAiC,0EAAoB;AACrD,oCAAoC,0EAAoB;AACxD,0CAA0C;AAC1C,2BAA2B,uEAAc,yBAAyB,0EAAoB;AACtF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,kEAAgB;AAC3C,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB,6DAA6D;AAC7D;AACA,6BAA6B;AAC7B,6DAA6D;AAC7D;AACA,6BAA6B;AAC7B,qCAAqC,sEAAkB;AACvD,gCAAgC,sEAAkB;AAClD;AACA,sCAAsC,sEAAkB;AACxD,gCAAgC,sEAAkB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,YAAY,sBAAsB;AACvG,qEAAqE,YAAY,sBAAsB;AACvG,kDAAkD,sEAAkB;AACpE,wCAAwC,sEAAkB;AAC1D;AACA,kDAAkD,sEAAkB;AACpE,wCAAwC,sEAAkB;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,sEAAkB;AAC7D,wCAAwC,sEAAkB;AAC1D;AACA;AACA,iCAAiC;AACjC,2CAA2C,kEAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,2CAA2C,kEAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,2EAAgB;AAClD;AACA,2BAA2B,2EAAgB;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC7aP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACA;AACyB;AACH;AACJ;AACgB;;AAE3E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,8CAAM;AAClB,mBAAmB,8CAAM;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,uEAAc;AACzC,yBAAyB,uEAAc,yBAAyB,0EAAoB;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,uEAAc,yBAAyB,0EAAoB;AACpF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,uEAAc;AACrC;AACA;AACA,YAAY,sFAAuB;AACnC;;AAEA,yBAAyB,sEAAkB;AAC3C,yBAAyB,sEAAkB;AAC3C;AACA,sCAAsC,uEAAc;;AAEpD,6CAA6C,sEAAkB;AAC/D,2CAA2C,sEAAkB;;AAE7D,kCAAkC,uEAAc;AAChD;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,sDAAO,yCAAyC;AAChF;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA,gCAAgC,qDAAM,GAAG;AACzC;AACA;;AAEA,kCAAkC,uEAAc,iCAAiC,sEAAkB;AACnG;AACA,YAAY,sDAAO;AACnB;;AAEA;AACA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEO;;;;;;;;;;;;;AC3NP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6C;AACf;;AAE/D;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,oBAAoB,sDAAO;AAC3B;AACA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;AACT;;AAEA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET,QAAQ,mFAAgB;;AAExB;AACA;AACA,SAAS;;AAET,QAAQ,mFAAgB;AACxB;;AAEA;AACA,QAAQ,mFAAgB;AACxB;AACA;;AAEA,QAAQ,mFAAgB;AACxB;;AAEA;AACA;AACA,uBAAuB,0EAAoB;AAC3C;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AChFP;AAAA;AAAA;AAAA;AAAA;AAAkE;AACH;AACQ;;AAEvE;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mCAAmC,uEAAc;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uEAAc,yBAAyB,0EAAoB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,uEAAc;AAC3C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,uEAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,uEAAc,yBAAyB,0EAAoB;;AAEpF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2DAA2D,YAAY,cAAc,MAAM;AAC3F;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,uEAAc,yBAAyB,0EAAoB;AACpF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,QAAQ,kFAAwB;AAChC;AACA;;AAEO;;;;;;;;;;;;;ACjKP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AAC6B;AACnB;AACwB;AACI;AACF;AACF;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oBAAoB,kFAAqB;AACzC,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,mCAAmC,kDAAG,CAAC,kFAAwB,eAAe,QAAQ,IAAI,IAAI;AAC9F;AACA;AACA,wBAAwB,oFAAsB;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oBAAoB,sFAAuB;AAC3C,iBAAiB;AACjB;AACA,oBAAoB,sFAAuB;AAC3C,iBAAiB;AACjB;AACA,oBAAoB,0DAAY;AAChC,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAM,KAAK,kFAAwB;AAC7D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,aAAa,uEAAc;AAC3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,kDAAG,CAAC,kFAAwB,eAAe,QAAQ,IAAI,IAAI;AAClF;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACvMP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACS;AACM;AACyB;AACE;AACR;AAC/B;AACyE;AAChC;;AAEzE,sBAAsB,wCAAG;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,+EAAkB;;AAE5C;AACA,kCAAkC,uEAAc,8BAA8B,iDAAG;;AAEjF;AACA;AACA,uBAAuB,WAAW;AAClC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAS;AACrC,4BAA4B,oDAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAM;;AAEpB,QAAQ,+EAAkB;AAC1B,2BAA2B,+EAAkB;AAC7C,QAAQ,iFAAe;AACvB,QAAQ,iFAAe;;AAEvB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,iHAAsB;AAC9B,QAAQ,iHAAsB;;AAE9B,wBAAwB,iFAAe;AACvC;AACA;AACA,gBAAgB,iFAAe;AAC/B;AACA,SAAS;;AAET,QAAQ,8CAAM;AACd;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,cAAc,8CAAM;;AAEpB,2BAA2B,6EAAiB;AAC5C;AACA;AACA;;AAEO;;;;;;;;;;;;;ACzKP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACuC;AACd;AAC/B;AACyD;;AAEzF,2BAA2B,wCAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,iGAAuB;AACnC,SAAS;AACT;;AAEA;AACA,wBAAwB,uEAAc;AACtC;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA,wBAAwB,uEAAc;AACtC;AACA,iBAAiB;AACjB,+CAA+C,8CAAM;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAc;AAClC,oBAAoB,uEAAc;AAClC,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAc;AAClC,oBAAoB,uEAAc;AAClC,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAc;AAClC,oBAAoB,uEAAc;AAClC,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAc;AAClC,oBAAoB,uEAAc;AAClC,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gEAAgE,qFAAqB;AACrF,6CAA6C,qFAAqB;AAClE,qBAAqB,kDAAkD,qFAAqB;AAC5F,6CAA6C,qFAAqB;AAClE,qBAAqB;AACrB,6CAA6C,qFAAqB;AAClE;;AAEA,oBAAoB,uEAAc;AAClC,oBAAoB,uEAAc;AAClC,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,gBAAgB,uEAAc;AAC9B,gBAAgB,uEAAc;AAC9B;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAc;AAClC;AACA,aAAa;;AAEb,YAAY,uEAAc;AAC1B,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uEAAc;AAC9B,gBAAgB,uEAAc;AAC9B,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC/KP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACyB;AAC/B;AACqB;AAC+B;AACV;AACJ;AACe;AACjC;AACQ;AACN;;AAEtD,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA,+BAA+B,gEAAe;AAC9C,gCAAgC,mEAAgB;AAChD,wCAAwC,iGAAoB;AAC5D,YAAY,uEAAc;AAC1B,YAAY,uEAAc;AAC1B,SAAS;AACT,mCAAmC,wEAAmB;AACtD,8BAA8B,kFAAc;;AAE5C,uEAAuE,gGAAsB;AAC7F,yCAAyC,6DAAO;AAChD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,sFAAgB;AACpC;;AAEA;AACA,oBAAoB,wEAAmB;AACvC;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,6CAA6C,uEAAc;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,kDAAkD;AAC/F;;AAEA;AACA,6CAA6C,mCAAmC;AAChF;AACA;AACA;;AAEO;;;;;;;;;;;;;ACzHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgE;AACsB;AACF;AACd;;AAEtE;AACA;AACA;AACA;;AAEA;AACA,QAAQ,gGAAsB;AAC9B,QAAQ,kGAAuB;AAC/B,QAAQ,kFAAc;;AAEtB;AACA;AACA;AACA;AACA;AACA,wCAAwC,4EAAY;AACpD;AACA,gBAAgB,4EAAY;AAC5B,gBAAgB,4EAAY;AAC5B,aAAa;AACb,yCAAyC,4EAAY;AACrD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb;AACA,gBAAgB,4EAAY;AAC5B;AACA,SAAS;AACT;AACA,YAAY,4EAAY;AACxB,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,QAAQ,gGAAsB;;AAE9B;AACA,QAAQ,kGAAuB;AAC/B;AACA;;AAEO;;;;;;;;;;;;;AC5DP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACH;AACiB;AACK;AACG;AACsC;AAC3D;AACY;;AAEtD;AACA;AACA;AACA,gDAAgD,iHAA4B;AAC5E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uEAAc;;AAEtC;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,4CAA4C,uDAAS;AACrD;AACA,oBAAoB,+DAAU;AAC9B;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,MAAM,MAAM;;AAEhE;AACA,8BAA8B,8CAAM;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,wBAAwB,uEAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAM;AAC/B;AACA,2BAA2B,cAAc;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA,uBAAuB,cAAc;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS,IAAI;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gCAAgC,8CAAM;AACtC,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,kEAAgB;AACpC;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,kEAAgB;AAChC,gBAAgB,kEAAgB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAgB;AAChC,aAAa;AACb;AACA;AACA;;AAEA;AACA,gBAAgB,sDAAU;;AAE1B;AACA;AACA,qCAAqC,sDAAU;AAC/C;AACA,mCAAmC,0BAA0B;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,uEAAc;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA,sBAAsB,oEAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA,gEAAgE;AAChE,SAAS;AACT;;AAEA;AACA;AACA,uBAAuB,8CAAM;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY,8CAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC3oBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACF;AACM;AACiC;AACd;AACK;AACZ;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,gFAAuB;;AAE/B;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,8CAAM;AACnE;;AAEA;AACA,+CAA+C,8CAAM;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,gBAAgB,gFAAuB;AACvC,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,oDAAS;AACnC;AACA;AACA;AACA;AACA,0BAA0B,oDAAS;AACnC;AACA;AACA;AACA,yCAAyC,oDAAS;AAClD,gEAAgE,oDAAS;AACzE,sEAAsE,oDAAS;AAC/E;AACA,8BAA8B,oDAAS;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,kCAAkC,oEAAiB;AACnD;AACA,wBAAwB,uEAAc;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,8CAAM;;AAEjC;AACA;AACA,kDAAkD;AAClD;AACA,mCAAmC,uEAAc;AACjD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,uEAAc;;AAE9B;AACA,gBAAgB,uEAAc;AAC9B,gBAAgB,uEAAc;AAC9B;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;;AAEA;AACA,QAAQ,gFAAuB;;AAE/B;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,uEAAc,KAAK,uEAAc;AACrE;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,uEAAc;AACvC;AACA;;AAEA;AACA;AACA,wBAAwB,uEAAc;AACtC;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oEAAiB;AAC1C;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT,QAAQ,uEAAc,KAAK,uEAAc;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,kDAAG;;AAE9B;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,kDAAG;AACpC,iCAAiC,qFAAqB;AACtD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,8CAAM;AACtB;AACA,SAAS;AACT;;AAEA;AACA,kBAAkB,wDAAS;;AAE3B,wBAAwB,uEAAc;;AAEtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,sDAAsD,8CAAM,0BAA0B,8CAAM;;AAE5F;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AClWP;AAAA;AAAA;AAAA;AAAA;AAA+D;AACT;AACE;;AAExD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,uEAAc;AACtC;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,oEAAiB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,uEAAc;;AAErC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,kEAAgB;AAC5B;;AAEA;AACA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA,2BAA2B,uEAAc;AACzC,oBAAoB,uEAAc;AAClC;AACA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA;AACA,QAAQ,kEAAgB;AACxB;AACA;;AAEA;AACA,wBAAwB,uEAAc;AACtC;;AAEA;AACA,YAAY,uEAAc;AAC1B,YAAY,uEAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEO;;;;;;;;;;;;;ACrQP;AAAA;AAAA;AAAA;AAAA;AAAgC;AACM;;AAEtC;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,8CAAM;AAC3B,SAAS;AACT;AACA,qBAAqB,8CAAM;AAC3B;AACA;AACA;AACA,qBAAqB,8CAAM;AAC3B,SAAS;AACT,qBAAqB,8CAAM;AAC3B,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,qDAAM,OAAO,8CAAM;AAC1C,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEO;;;;;;;;;;;;;AChEP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACZ;AACU;AACF;AACI;AACM;AACc;AACa;AACR;AACsB;AACU;AACA;AACA;AACA;AACY;AACM;AACR;AACV;AAChC;AACU;;AAE5E;AACA;AACA;AACA;AACA,gCAAgC,6FAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wGAAiB;AACjC,gBAAgB,wGAAiB;AACjC,gBAAgB,wGAAiB;AACjC,gBAAgB,wGAAiB;AACjC;;AAEA,mBAAmB,QAAQ;AAC3B;;AAEA,kCAAkC,oDAAS;AAC3C;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,wEAAU;AAClB;AACA;AACA;AACA;AACA,QAAQ,oHAAuB;;AAE/B;AACA,QAAQ,kFAAe;AACvB,QAAQ,kFAAe;;AAEvB,QAAQ,uEAAc;AACtB;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,+EAAkB;AACvC;AACA;AACA;;AAEA,4BAA4B,kFAAe;;AAE3C;AACA,2BAA2B,kHAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA,uCAAuC,iDAAG,0BAA0B,EAAE,IAAI,EAAE;AAC5E,gCAAgC,iDAAG,0BAA0B,EAAE,IAAI,EAAE;AACrE,oBAAoB,sDAAQ;AAC5B,gCAAgC,iDAAG,0BAA0B,EAAE,IAAI,EAAE;AACrE;AACA;AACA,+CAA+C,gBAAgB;AAC/D,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA,uBAAuB,UAAU;AACjC,2BAA2B,UAAU;AACrC;AACA;AACA,qCAAqC,iDAAG,cAAc,EAAE,IAAI,EAAE;AAC9D,mCAAmC,UAAU;AAC7C,6BAA6B,iDAAG,cAAc,EAAE,IAAI,EAAE;AACtD,4BAA4B,qDAAO,aAAa,EAAE,GAAG,EAAE;AACvD,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA,uCAAuC,UAAU;AACjD;AACA,uCAAuC,cAAc;AACrD,iDAAiD,iDAAG,cAAc,EAAE,IAAI,EAAE;AAC1E,gCAAgC,qDAAO,aAAa,EAAE,GAAG,EAAE;AAC3D,6BAA6B;AAC7B;AACA,+CAA+C,QAAQ;AACvD,oCAAoC,qDAAO,aAAa,EAAE,GAAG,EAAE;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D,KAAK,aAAa,MAAM,yBAAyB,EAAE;AAC/G;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,kHAAsB;;AAE9B;AACA;;AAEA;AACA;;AAEA;AACA,YAAY,kHAAsB;AAClC;AACA;AACA;;AAEA;AACA,QAAQ,+EAAkB;AAC1B,QAAQ,uEAAc;;AAEtB;AACA,QAAQ,kHAAsB;AAC9B;;AAEA;AACA;AACA,QAAQ,kHAAsB;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,+EAAkB;AAC7E,oBAAoB,iDAAG,6BAA6B,cAAc;;AAElE;AACA,wBAAwB,uEAAc;;AAEtC;AACA;AACA;;AAEA;AACA;AACA,2CAA2C;;AAE3C;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,uEAAc;AACzC;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,QAAQ,wGAAgB;;AAExB;AACA;AACA,YAAY,uEAAc;AAC1B,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,gBAAgB,+EAAkB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,oHAAuB;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB,QAAQ,wEAAU;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,0HAA0B;;AAElC;AACA;AACA;;AAEA;AACA,qBAAqB,+EAAkB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uDAAS;;AAEjD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,2CAA2C,+EAAkB;AAC7D;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,+EAAkB;;AAE3C;AACA,8CAA8C,uDAAS;AACvD;AACA,+BAA+B,8CAAM;AACrC;;AAEA;AACA,aAAa;;AAEb;AACA,YAAY,kHAAsB;AAClC,YAAY,kHAAsB;AAClC;;AAEA,QAAQ,uEAAc;AACtB;;AAEA;AACA;AACA,qBAAqB,+EAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,wBAAwB,kHAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,+EAAkB;AAC1B,QAAQ,uEAAc;;AAEtB;AACA,QAAQ,kHAAsB;AAC9B;;AAEA;AACA;AACA,YAAY,kEAAgB,oEAAoE;AAChG;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,YAAY,kEAAgB;AAC5B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACniBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0E;AACrB;AACmB;AACJ;;AAE7D;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA,iCAAiC,oFAAyB;AAC1D;;AAEA;AACA;AACA;AACA,QAAQ,gEAAe;AACvB,QAAQ,gEAAe;AACvB;;AAEA;AACA;AACA;AACA;AACA,QAAQ,gEAAe;AACvB,QAAQ,gEAAe;AACvB;;AAEA;AACA;AACA;AACA;AACA,QAAQ,gEAAe;AACvB,QAAQ,gEAAe;AACvB;;AAEA;AACA;AACA,YAAY,gEAAe;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0CAA0C,gEAAe;AACzD;;AAEA,UAAU,gEAAe;AACzB;AACA;AACA,QAAQ,gEAAe;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,gEAAe;AACzD;;AAEA,UAAU,gEAAe;AACzB;AACA;AACA,QAAQ,gEAAe;AACvB;;AAEA;AACA;AACA,UAAU,gEAAe;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,gFAAuB;AACvC;;AAEA;AACA;;AAEA;AACA,uCAAuC,+EAAkB;;AAEzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,gBAAgB,gEAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,gEAAe;AAC1D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B,gEAAe;AAC7C,gBAAgB,gEAAe;AAC/B;;AAEA;AACA;AACA;AACA,oBAAoB,gEAAe;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,gEAAe;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;;;;;;;;;;;;AC9QA;AAAA;AAAA;AAAA;AAA0E;AACR;;AAE3D;AACP;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,2BAA2B,+EAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yBAAyB;AAChE,0CAA0C,0BAA0B;AACpE;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,yBAAyB;AAChE,0CAA0C,0BAA0B;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,8CAA8C,sBAAsB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B,GAAG,0BAA0B;AAC7G;;AAEA;AACA,2CAA2C,mBAAmB;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wBAAwB,GAAG,uBAAuB;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sCAAsC;AAC/D,yBAAyB;AACzB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,+EAAkB,iCAAiC,8EAAsB;AACzF;AACA;AACA;AACA;;;;;;;;;;;;;AC3GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACkB;AAC2B;AAC5B;AACoB;;AAE3D;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,+EAAkB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,uCAAuC;AAClE;AACA;AACA;AACA,wBAAwB,oDAAS;AACjC,wBAAwB,oDAAS;AACjC;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iCAAiC,yCAAyC,qCAAqC,EAAE;AACjH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,+EAAkB;AAC7C,qBAAqB,iDAAG,+BAA+B,IAAI,IAAI,IAAI;;AAEnE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,8BAA8B,iDAAG;AACjC;AACA;AACA;AACA,+BAA+B,KAAK,8EAAsB,mBAAmB;AAC7E,wBAAwB,8EAAsB;AAC9C;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,0DAAY;AACpD;AACA,+BAA+B,oDAAS;AACxC,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1NA;AAAA;AAAA;AAA+C;;AAExC;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;;AAEjE;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AAC6C;AACR;AAC4C;AACzD;AACuB;AACV;;AAE3D;AACP;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,gEAAe;AAC3B,SAAS;AACT;AACA,YAAY,gEAAe;AAC3B,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAe;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mHAAuB;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,gEAAe;AAC3B;AACA;;AAEA;AACA;AACA,YAAY,gEAAe;AAC3B;AACA;;AAEA;AACA,qBAAqB,+EAAkB;AACvC,sBAAsB,gEAAe;;AAErC,yBAAyB,oBAAoB;AAC7C,6BAA6B,yBAAyB;AACtD,iCAAiC,iDAAG,0BAA0B,IAAI,IAAI,IAAI;AAC1E;AACA,uCAAuC,iDAAG,0BAA0B,IAAI,IAAI,IAAI;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,+EAAkB;AACvC,sBAAsB,gEAAe;AACrC;AACA;AACA;AACA;;AAEA,yBAAyB,oBAAoB;AAC7C,6BAA6B,yBAAyB;AACtD,iCAAiC,iDAAG,0BAA0B,IAAI,IAAI,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wCAAwC,UAAU;AAClD,iDAAiD,UAAU;AAC3D,iCAAiC,iDAAG,0BAA0B,IAAI,IAAI,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+CAA+C,yBAAyB,GAAG,2BAA2B;;AAEtG;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,2BAA2B,+EAAkB;;AAE7C,wCAAwC,4BAA4B;AACpE,6CAA6C,2BAA2B;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,8EAAsB;AAC9B,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,wCAAwC,4BAA4B;AACpE,6CAA6C,2BAA2B;AACxE,mCAAmC,+EAAkB;;AAErD;AACA;AACA;;AAEA,QAAQ,8EAAsB;AAC9B,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB,wFAA2B;AACpD;;AAEA,QAAQ,8EAAsB;AAC9B,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA,2BAA2B,+EAAkB;;AAE7C,wCAAwC,4BAA4B;AACpE,6CAA6C,2BAA2B;AACxE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,+EAAkB,6BAA6B,8EAAsB;AACrF,8BAA8B,iDAAG;AACjC;AACA;AACA;AACA;AACA;;AAEA,QAAQ,8EAAsB;AAC9B,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA,2BAA2B,+EAAkB;AAC7C;;AAEA;AACA,uCAAuC,wBAAwB;AAC/D,2CAA2C,wBAAwB;AACnE;;AAEA;AACA;AACA;AACA;;AAEA,iDAAiD,mHAAuB;AACxE;AACA;AACA;AACA;;;;;;;;;;;;;AC9VA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0E;AACR;AACb;AACP;AACoB;;AAE3D;AACP;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,+EAAkB;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,YAAY,8EAAsB;AAClC,YAAY,uEAAc;AAC1B,YAAY,uEAAc;;AAE1B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,gEAAe;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACV;AAC2B;AACM;AACR;;AAE3D;AACP;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,iBAAiB,yEAAe,cAAc,yEAAe;AAC7D;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,yEAAe,cAAc,yEAAe;AAC7D;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,yEAAe;AAC/B;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,wBAAwB,uEAAc;AACtC;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,+EAAkB;AAC7C;AACA;AACA;AACA,QAAQ,uEAAc;;AAEtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,uEAAc;;AAEzD,qBAAqB,+EAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAK;AAC1C,yBAAyB;AACzB,qCAAqC,oDAAK;AAC1C;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,qDAAqD,oDAAK;AAC1D;AACA;AACA,iBAAiB;AACjB,qDAAqD,oDAAK;AAC1D;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,8CAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yDAAyD,oDAAK;AAC9D,qBAAqB;AACrB,yDAAyD,oDAAK;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAiE,oDAAK;AACtE,6BAA6B;AAC7B,iEAAiE,oDAAK;AACtE;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAM;AAC1B;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB,qDAAqD,yDAAU;AAC/D;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACnSA;AAAA;AAAO;AACP;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACY;AACiC;AACR;AACsB;AACoB;AACI;AACpC;;AAE5E;AACA;AACA;AACA;;AAEA;AACA,QAAQ,qHAAwB;AAChC;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,QAAQ,qHAAwB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,+EAAkB;AACvC;AACA;AACA,oBAAoB,iFAAe;;AAEnC;;AAEA,QAAQ,6FAAY;;AAEpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uCAAuC,iDAAG,yBAAyB,QAAQ,IAAI,IAAI;AACnF;AACA,oBAAoB,iFAAe;AACnC,iBAAiB;AACjB;AACA;AACA,+CAA+C,iDAAG,yBAAyB,QAAQ,IAAI,IAAI;AAC3F;AACA,4BAA4B,iFAAe;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uDAAuD,iDAAG,yBAAyB,QAAQ,IAAI,QAAQ;AACvG;AACA,oCAAoC,iFAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,yCAAyC,mBAAmB;AAC5D,2CAA2C,iDAAG,yBAAyB,EAAE,IAAI,QAAQ;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iFAAe;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA,wCAAwC,oBAAoB;AAC5D,2CAA2C,iDAAG,yBAAyB,QAAQ,IAAI,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iFAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,6FAAY,mBAAmB,6FAAY;AACvD;AACA;;AAEA;;AAEA,aAAa,iFAAe;AAC5B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA,YAAY,iFAAe;AAC3B;AACA,YAAY,qHAAwB;AACpC,SAAS;AACT;AACA,YAAY,qHAAwB;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,qHAAwB;;AAEhC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,4BAA4B,qHAAwB;AACpD;AACA;AACA;AACA;;AAEA,gBAAgB,qHAAwB;AACxC;;AAEA;AACA;AACA;;AAEA,gBAAgB,qHAAwB;AACxC,oBAAoB,qHAAwB;AAC5C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,kBAAkB,iFAAe;AACjC,qBAAqB,+EAAkB;AACvC,mCAAmC,qBAAqB;AACxD,sCAAsC,sBAAsB;AAC5D;AACA,4BAA4B,iFAAe;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,+EAAkB,6BAA6B,iHAAsB;AACzF;AACA;AACA;;AAEA;AACA;AACA,QAAQ,iHAAsB;AAC9B,QAAQ,iFAAe;AACvB,QAAQ,iFAAe;AACvB,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB;;AAEA;AACA,qBAAqB,+EAAkB;AACvC,sBAAsB,iFAAe;AACrC,2BAA2B,iHAAsB;AACjD;;AAEA;AACA,6BAA6B,oBAAoB;AACjD,iCAAiC,yBAAyB;AAC1D,qCAAqC,iDAAG,0BAA0B,IAAI,IAAI,IAAI;;AAE9E;AACA;AACA;;AAEA,kCAAkC,iDAAG,0BAA0B,IAAI,IAAI,IAAI;AAC3E,sCAAsC,iDAAG,0BAA0B,IAAI,IAAI,IAAI;;AAE/E;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA,yBAAyB,8CAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,+EAAkB;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACvXP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACM;AACiC;AACR;AAC0C;;AAE5G;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iEAAiE,8CAAM;AACvE;AACA;;AAEA;AACA,+CAA+C,8CAAM;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,+EAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,iHAAsB;;AAEjD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,kBAAkB,wDAAS;;AAE3B,wBAAwB,uEAAc;AACtC;;AAEA;AACA;AACA,sDAAsD,8CAAM,0BAA0B,8CAAM;;AAE5F;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACzIP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;AACkB;AACiC;AACR;AACoB;AAC3C;AACU;AACgB;AACvB;AACY;AACU;AACM;AACJ;;AAEtE;AACA;AACA;AACA;AACA;AACA,wCAAwC,iGAAoB;AAC5D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sCAAsC,sEAAkB;AACxD;AACA;AACA;;AAEA;AACA,QAAQ,0DAAY;;AAEpB;AACA;AACA,SAAS;;AAET;AACA,YAAY,0DAAY;AACxB,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gFAAuB;AACnC,SAAS;;AAET;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,gBAAgB,iFAAuB;AACvC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,mFAAwB;AAChD,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,iFAAuB;AACvC;AACA,SAAS;;AAET,QAAQ,uFAA0B;AAClC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,+EAAkB;;AAE/C;AACA;;AAEA,6BAA6B,oBAAoB;AACjD,oBAAoB,gEAAe;AACnC;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gEAAe;AAC/B,aAAa;AACb,gBAAgB,gEAAe;AAC/B;AACA,SAAS;AACT,mCAAmC,gEAAe;AAClD;;AAEA;AACA;AACA,qBAAqB,+EAAkB;AACvC;AACA,4BAA4B,6CAAC;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,6BAA6B,6CAAC;AAC9B;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,6BAA6B,6CAAC;AAC9B;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA,+BAA+B,gEAAe;AAC9C,+BAA+B,gEAAe;AAC9C;;AAEA;AACA;AACA,QAAQ,uFAA0B;;AAElC;AACA;AACA;;AAEA;AACA,qBAAqB,+EAAkB;;AAEvC;AACA;AACA;AACA;AACA,yBAAyB,6CAAC;AAC1B;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,uEAAc;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,YAAY,0DAAY,iBAAiB,0DAAY;AACrD;AACA;;AAEA;AACA,QAAQ,0DAAY,SAAS,0DAAY;;AAEzC;AACA,wBAAwB,uEAAc;AACtC,QAAQ,0DAAY,WAAW,uDAAS;;AAExC,QAAQ,0DAAY;;AAEpB,QAAQ,sDAAU;AAClB;;AAEA;AACA,qBAAqB,+EAAkB;;AAEvC;AACA;AACA,YAAY,0DAAY,mBAAmB,0DAAY;AACvD;AACA;AACA;AACA;AACA,gBAAgB,0DAAY,mBAAmB,0DAAY;AAC3D;AACA;;AAEA,YAAY,0DAAY,mBAAmB,0DAAY;AACvD;AACA;AACA,SAAS;AACT;AACA;;AAEA,YAAY,uFAA0B;AACtC,YAAY,uFAA0B;AACtC;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,0DAAY;AAC5B;AACA;;AAEA;AACA;AACA,YAAY,0DAAY;AACxB;AACA,gBAAgB,0DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,gEAAe;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,0DAAY;AAC5B;AACA,SAAS;;AAET;AACA;AACA,YAAY,0DAAY;AACxB;AACA;;AAEA;AACA,qBAAqB,+EAAkB;AACvC;AACA;AACA;AACA,sCAAsC,6CAAC;AACvC;AACA,SAAS;AACT;AACA;AACA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;AACtB,QAAQ,gEAAe;AACvB;;AAEA;AACA,qDAAqD,0DAAY,iBAAiB,0DAAY;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEO;;;;;;;;;;;;;ACjYP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACH;AACiC;AACR;AACsB;AACsB;AACF;AAChC;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,6FAAY;AAC5B;AACA,4BAA4B,wCAAwC;AACpE,4BAA4B;AAC5B,qBAAqB;;AAErB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,kBAAkB,iFAAe;AACjC;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA,qDAAqD,mHAAuB;;AAE5E;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,mHAAuB;AACvC;AACA,SAAS;AACT;;AAEA;;AAEA;AACA,qBAAqB,iHAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,+EAAkB;AACrD;AACA;AACA;;AAEA,YAAY,iFAAe;AAC3B,wBAAwB,iFAAe;AACvC,wBAAwB,iFAAe;AACvC,+BAA+B,kDAAG,yBAAyB,IAAI,IAAI,IAAI;AACvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,uCAAuC,kDAAG,yBAAyB,IAAI,IAAI,IAAI,sBAAsB,MAAM;AAC3G;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,oBAAoB,kDAAG,yBAAyB,IAAI,IAAI,IAAI;AAC5D,oBAAoB,kDAAG,yBAAyB,IAAI,IAAI,IAAI;AAC5D;AACA;AACA,SAAS;AACT,sBAAsB,iFAAe;AACrC,uCAAuC,qBAAqB;AAC5D,0CAA0C,sBAAsB;AAChE,uCAAuC,kDAAG,yBAAyB,IAAI,IAAI,IAAI;AAC/E;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,iFAAe;;AAE7B;AACA,cAAc,iFAAe;;AAE7B,6BAA6B,WAAW;AACxC,+BAA+B,iFAAe;AAC9C;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,iFAAe;;AAE7B;AACA,cAAc,iFAAe;;AAE7B,6BAA6B,WAAW;AACxC,+BAA+B,iFAAe;AAC9C;AACA;AACA;AACA,SAAS;AACT,6BAA6B,WAAW;AACxC,kCAAkC,iFAAe;AACjD,qCAAqC,iFAAe;AACpD;AACA;AACA;;AAEA,6BAA6B,WAAW;AACxC,mCAAmC,iFAAe;AAClD,oCAAoC,iFAAe;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA,yCAAyC,OAAO;AAChD;AACA,SAAS;AACT,qCAAqC,OAAO;AAC5C;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,YAAY,iFAAe;AAC3B,wBAAwB,iFAAe;AACvC,wBAAwB,iFAAe;;AAEvC,uCAAuC,+EAAkB;AACzD,0BAA0B,kDAAG,yBAAyB,IAAI,IAAI,IAAI;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,+EAAkB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,iHAAsB;AAC1E;AACA,6BAA6B;;AAE7B;AACA;;AAEA,mDAAmD,oDAAK;AACxD,iEAAiE,oDAAK;AACtE;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,2CAA2C,oDAAK;AAChD,qDAAqD,oDAAK;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,oDAAK;AACxD,uDAAuD,oDAAK;AAC5D;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,+EAAkB;AACrD;;AAEA;AACA;AACA,YAAY,iFAAe;AAC3B,sBAAsB,iFAAe;AACrC,mCAAmC,kDAAG,yBAAyB,YAAY,IAAI,WAAW;AAC1F;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,wBAAwB,uEAAc;AACtC,qBAAqB,iHAAsB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,8CAAM;AACnC;;AAEA;AACA,6BAA6B,8CAAM;AACnC;;AAEA;AACA,6BAA6B,8CAAM;AACnC;AACA;;AAEA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,6FAAY;AAChC,6CAA6C,iFAAe;AAC5D;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,6BAA6B;AAC3E,8CAA8C,sCAAsC;AACpF;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA,8CAA8C,iFAAe;AAC7D;AACA,qCAAqC,+EAAkB;AACvD,sCAAsC,iFAAe;AACrD,4CAA4C,iFAAe;AAC3D,4CAA4C,iFAAe;;AAE3D;AACA,6CAA6C,oBAAoB;AACjE,iDAAiD,yBAAyB;AAC1E,qDAAqD,kDAAG,0BAA0B,IAAI,IAAI,IAAI;AAC9F;AACA,oDAAoD,kDAAG,0BAA0B,IAAI,IAAI,IAAI;AAC7F;AACA,wDAAwD,iFAAe;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oBAAoB,6FAAY;AAChC;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,oBAAoB,iFAAe;AACnC;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA,qBAAqB,+EAAkB;AACvC,YAAY,mHAAuB;AACnC,YAAY,mHAAuB;;AAEnC,sBAAsB,iFAAe;AACrC,6BAA6B,kDAAG,yBAAyB,YAAY,IAAI,WAAW;AACpF;AACA;AACA;;AAEA;AACA,qBAAqB,iFAAe;AACpC;AACA;AACA,wBAAwB,uEAAc;AACtC,2BAA2B,+EAAkB;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,gBAAgB,gCAAgC;AAChD,gBAAgB;AAChB,SAAS;AACT;;AAEA;AACA,kCAAkC,sBAAsB;AACxD,uCAAuC,qBAAqB;AAC5D;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,6FAAY,mBAAmB,6FAAY;AACnE,wCAAwC,kDAAG;AAC3C;AACA,uDAAuD,oDAAK;;AAE5D,6CAA6C,kDAAG;AAChD;AACA,4DAA4D,oDAAK;AACjE;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,oDAAK;AAChD,qBAAqB;AACrB;AACA;AACA,mDAAmD,oDAAK;AACxD,6BAA6B;AAC7B,mDAAmD,qDAAM;AACzD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,iFAAe;AACnC,mCAAmC,+EAAkB;AACrD;;AAEA;AACA,mCAAmC,qBAAqB;AACxD,sCAAsC,sBAAsB;AAC5D,4BAA4B,kDAAG,yBAAyB,IAAI,IAAI,IAAI,IAAI,SAAS;;AAEjF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACnuBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;AACkB;AACyB;AAC0C;AACd;AACe;AAC3C;AAC0B;AACZ;;AAEhF;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,kHAAoB;AAC5D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ,mGAAc;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,YAAY,iGAAuB;AACnC;AACA,YAAY,uEAAc;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,0BAA0B,iHAAsB;AAChD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6CAAC;;AAElB;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,uDAAS,CAAC,uEAAc;AAC3D;AACA,6BAA6B,qFAAiB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,2BAA2B,uEAAc;AACzC;AACA;;AAEA;AACA;;AAEA,QAAQ,mGAAc;;AAEtB,QAAQ,mGAAc;AACtB;AACA;;AAEA;AACA;;AAEA,2BAA2B,uEAAc;AACzC;AACA;;AAEA;AACA;;AAEA,oBAAoB,mGAAc;AAClC,QAAQ,mGAAc;AACtB;AACA,QAAQ,mGAAc;AACtB;;AAEA;AACA,oBAAoB,mGAAc;AAClC,QAAQ,mGAAc;;AAEtB,QAAQ,mGAAc;AACtB;;AAEA;AACA;AACA,QAAQ,mGAAc;AACtB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,mGAAc;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,QAAQ,mGAAc;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,mGAAc;AAC9B;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA,wBAAwB,uEAAc;;AAEtC;AACA,mBAAmB,QAAQ;AAC3B,uBAAuB,uDAAS;AAChC,iEAAiE,mGAAc;;AAE/E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,6CAAC,YAAY,mGAAc;AACpD;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA,2BAA2B,uEAAc;;AAEzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,QAAQ,mGAAc,eAAe,6CAAC;;AAEtC;AACA;;AAEA,QAAQ,uEAAc;AACtB,QAAQ,uEAAc;;AAEtB;AACA,QAAQ,mGAAc;;AAEtB;AACA;;AAEA,YAAY,mGAAc,wBAAwB,mGAAc;AAChE,YAAY,mGAAc;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,mGAAc,wBAAwB,mGAAc;AAChE,YAAY,mGAAc;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,uEAAU;AAClB,QAAQ,mGAAc;AACtB;AACA;AACA,QAAQ,mGAAc;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAC;AACvB;AACA,QAAQ,mGAAc;AACtB;;AAEA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;AC3aP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACM;AACyB;AACsB;AACoB;AACV;AAClB;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,uGAAgB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,8CAAM;AACnE;;AAEA;AACA,+CAA+C,8CAAM;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,gBAAgB,uGAAgB;AAChC,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,oBAAoB,uGAAgB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,kCAAkC,qFAAiB;AACnD;AACA,wBAAwB,uGAAgB;AACxC;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yEAAyE,8CAAM;AAC/E;AACA;;AAEA;AACA;AACA,kDAAkD;AAClD;AACA,mCAAmC,uEAAc;AACjD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,uGAAgB;AAChC;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,YAAY,uGAAgB;AAC5B,8BAA8B,uGAAgB;AAC9C,SAAS;AACT,8BAA8B,iHAAsB;AACpD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uGAAgB;AAChC;AACA;;AAEA;AACA,+DAA+D,6FAAY;AAC3E;AACA;AACA,YAAY,uGAAgB;AAC5B;;AAEA;AACA,iEAAiE,uGAAgB;AACjF,mEAAmE,uGAAgB;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,kBAAkB,wDAAS;;AAE3B,wBAAwB,uEAAc;AACtC;;AAEA;AACA;AACA,sDAAsD,8CAAM,0BAA0B,8CAAM;;AAE5F;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;;;;;;;;;;;;;ACzNP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACM;AACe;AACqE;;AAEtH;AACP;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA,gDAAgD,kIAA4B;AAC5E;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,8CAAM;AAC7D;AACA;;AAEA;AACA;AACA,uDAAuD,8CAAM;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA,gCAAgC,8CAAM;AACtC;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,wDAAS;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,8CAAM,+BAA+B,8CAAM;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,6DAAS;AAC7B;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,oBAAoB,6DAAS;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;;;;;;;;;;;;AC9YA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACW;AACW;;AAExD;AACP;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,sBAAsB,oEAAiB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA,gEAAgE;AAChE,SAAS;AACT;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8CAAM;AAClC,4BAA4B,8CAAM;AAClC;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA,0CAA0C,8CAAM,+BAA+B,8CAAM;AACrF;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,yBAAyB,8CAAM;;AAE/B;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACM;AACM;AACmB;AACiD;AACU;AAC7C;;AAEzE;AACP;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA,gDAAgD,kIAA4B;AAC5E,2CAA2C,wHAAuB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,oDAAS;AAC3C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,8CAAM;AACrC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA;AACA,kCAAkC,qFAAiB;;AAEnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA;AACA,kCAAkC,qFAAiB;;AAEnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C;AAC9C;AACA,8BAA8B,qFAAiB;;AAE/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,UAAU;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wDAAS;AACxC,qBAAqB,8CAAM;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,uEAAc;;AAE7C;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"0.js","sourcesContent":["var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n\n    return result;\n  }\n\n  if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n\n    return result;\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var arrayPush = require('./_arrayPush'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbols = require('./_getSymbols'),\n    keys = require('./keys');\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","var arrayFilter = require('./_arrayFilter'),\n    stubArray = require('./stubArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var baseCreate = require('./_baseCreate'),\n    getPrototype = require('./_getPrototype'),\n    isPrototype = require('./_isPrototype');\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var baseIndexOf = require('./_baseIndexOf'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    toInteger = require('./toInteger'),\n    values = require('./values');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nmodule.exports = includes;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var baseSet = require('./_baseSet');\n\n/**\n * This method is like `_.set` except that it accepts `customizer` which is\n * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n * path creation is handled by the method instead. The `customizer` is invoked\n * with three arguments: (nsValue, key, nsObject).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {};\n *\n * _.setWith(object, '[0][1]', 'a', Object);\n * // => { '0': { '1': 'a' } }\n */\nfunction setWith(object, path, value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return object == null ? object : baseSet(object, path, value, customizer);\n}\n\nmodule.exports = setWith;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","import { random, union } from 'lodash';\r\nimport { globalTerms } from './datasets/global-terms';\r\n\r\nclass Common {\r\n    constructor() {\r\n        this.formatter = new Intl.NumberFormat('en-US', {\r\n            minimumFractionDigits: 1,\r\n            maximumFractionDigits: 1\r\n        });\r\n    }\r\n\r\n    formatNumber(value) {\r\n        // If the number is zero, avoid showing \"(0.0)\" due to rounding errors.\r\n        if (common.isDeltaZero(value)) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = '(' + common.formatter.format(-value) + ')';\r\n        } else {\r\n            value = common.formatter.format(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    formatPercent(value) {\r\n        return this.formatNumber(value * 100) + ' %';\r\n    }\r\n\r\n    parseScale(scale) {\r\n        if (!scale) {\r\n            scale = 1;\r\n        }\r\n\r\n        if (typeof scale === 'string' && parseInt(scale) === 0) {\r\n            scale = '1' + scale;\r\n        }\r\n\r\n        scale = parseInt(scale);\r\n\r\n        return scale;\r\n    }\r\n\r\n    parseInverse(inverse) {\r\n        if (inverse === 'No' || inverse === undefined || inverse === '') {\r\n            inverse = 1;\r\n        } else if (inverse === 'Yes') {\r\n            inverse = -1;\r\n        }\r\n\r\n        return inverse;\r\n    }\r\n\r\n    getUniqueValues(data, property) {\r\n        let names = {};\r\n        let a = [];\r\n\r\n        // Get all possible names.\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (property in data[i] && data[i][property]) {\r\n                names[data[i][property]] = true;\r\n            }\r\n        }\r\n\r\n        // Convert to array.\r\n        for (let j in names) {\r\n            a.push(j);\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n    getSlugFromName(name) {\r\n        // Replace non-alphanumeric with underline.\r\n        name = name.replace(/[^A-Za-z0-9]/g, '_');\r\n\r\n        // Replace successive underlines with a single underline.\r\n        name = name.replace(/[_]+/g, '_');\r\n\r\n        // Lower case everything.\r\n        name = name.toLowerCase();\r\n\r\n        return name;\r\n    }\r\n\r\n    // https://stackoverflow.com/a/13542669\r\n    shadeColor2(color, percent) {\r\n        let f = parseInt(color.slice(1), 16),\r\n            t = percent < 0 ? 0 : 255,\r\n            p = percent < 0 ? percent * -1 : percent,\r\n            R = f >> 16,\r\n            G = (f >> 8) & 0x00ff,\r\n            B = f & 0x0000ff;\r\n        return (\r\n            '#' +\r\n            (\r\n                0x1000000 +\r\n                (Math.round((t - R) * p) + R) * 0x10000 +\r\n                (Math.round((t - G) * p) + G) * 0x100 +\r\n                (Math.round((t - B) * p) + B)\r\n            )\r\n                .toString(16)\r\n                .slice(1)\r\n        );\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n    getNextUuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            let r = (Math.random() * 16) | 0,\r\n                v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    getGlobalTerms() {\r\n        let globalTermsValues = [];\r\n\r\n        globalTerms.map(term => {\r\n            globalTermsValues.push(term.name);\r\n        });\r\n\r\n        return globalTermsValues;\r\n    }\r\n\r\n    getGlobalTermsDictionaries() {\r\n        let dictionaries = [];\r\n\r\n        globalTerms.map(term => {\r\n            dictionaries = union(dictionaries, term.dictionaries);\r\n        });\r\n\r\n        return dictionaries;\r\n    }\r\n\r\n    getGlobalTermsByDictionary(dictionary) {\r\n        let globalTermsValues = [];\r\n\r\n        globalTerms.map(term => {\r\n            if ($.inArray(dictionary, term.dictionaries) !== -1) {\r\n                globalTermsValues.push(term.name);\r\n            }\r\n        });\r\n\r\n        return globalTermsValues;\r\n    }\r\n\r\n    async showFakeLoading(callback) {\r\n        await this.showLoading();\r\n\r\n        setTimeout(() => {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n            this.hideLoading();\r\n        }, random(250, 500));\r\n    }\r\n\r\n    async showLoading() {\r\n        $('._show-loading').css('display', 'block');\r\n\r\n        // Wait 50ms, otherwise the UI won't render and the user won't see any loading screen while other heavy code is running.\r\n        await this.wait(50);\r\n    }\r\n\r\n    hideLoading() {\r\n        $('._show-loading').css('display', 'none');\r\n    }\r\n\r\n    areIdentical(a, b) {\r\n        if (a === b) {\r\n            return true;\r\n        }\r\n\r\n        const fa = parseFloat(a);\r\n        const fb = parseFloat(b);\r\n        if (!Number.isNaN(fa) && !Number.isNaN(fb) && this.isDeltaZero(fa - fb)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isDeltaZero(delta) {\r\n        return Math.abs(delta) < 0.00000001;\r\n    }\r\n\r\n    // https://www.grapecity.com/en/forums/wijmo/want-to-add-wijmo-5-input-_1\r\n    // http://jsfiddle.net/ezk43f9d/102/\r\n    createDatePickerEditor(editColumn) {\r\n        const grid = editColumn.grid;\r\n        grid.formatItem.addHandler(function(s, e) {\r\n            const editRange = grid.editRange,\r\n                column = e.panel.columns[e.col];\r\n\r\n            // check whether this is an editing cell of the wanted column\r\n            if (\r\n                !(\r\n                    e.panel.cellType === wijmo.grid.CellType.Cell &&\r\n                    column === editColumn &&\r\n                    editRange &&\r\n                    editRange.row === e.row &&\r\n                    editRange.col === e.col\r\n                )\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            // hide standard editor (don't remove!)\r\n            if (e.cell.firstChild) {\r\n                e.cell.firstChild.style.display = 'none';\r\n            }\r\n\r\n            // add custom InputNumber editor\r\n            const editorRoot = document.createElement('div'),\r\n                inputDate = new wijmo.input.InputDate(editorRoot, {\r\n                    format: 'yyyy-MM-dd'\r\n                });\r\n\r\n            // inputDate.format = editColumn.format;\r\n            e.cell.appendChild(editorRoot);\r\n            const value = grid.getCellData(e.row, e.col, false);\r\n            if (typeof value === 'string' && value) {\r\n                inputDate.value = value;\r\n            }\r\n\r\n            const editEnding1 = (s, e) => {\r\n                if (!e.cancel) {\r\n                    // Update editor value.\r\n                    const value = common.dateToString(inputDate.value);\r\n                    s.activeEditor.value = value;\r\n                }\r\n            };\r\n\r\n            const editEnding2 = (s, e) => {\r\n                if (!e.cancel) {\r\n                    // We use \"_.set\" because the binding can be something like \"dataStructures.timeIntervalBegin\".\r\n                    // const value = s.activeEditor.value;\r\n                    // set(s.rows[e.row].dataItem, column.binding, value);\r\n                }\r\n\r\n                // Remove events. We use a second event that fires only after all other events, otherwise => bugs.\r\n                grid.cellEditEnding.removeHandler(editEnding1);\r\n                grid.cellEditEnding.removeHandler(editEnding2);\r\n\r\n                inputDate.dispose();\r\n            };\r\n\r\n            // Add handlers as first and last events. Order is important.\r\n            const handlers = grid.cellEditEnding._handlers.slice(0);\r\n            grid.cellEditEnding.removeAllHandlers();\r\n            grid.cellEditEnding.addHandler(editEnding1);\r\n            handlers.forEach(handler => {\r\n                grid.cellEditEnding.addHandler(handler.handler);\r\n            });\r\n            grid.cellEditEnding.addHandler(editEnding2);\r\n        });\r\n    }\r\n\r\n    checkIfCellHasChanged(oldVal, newVal, dataType) {\r\n        // Check if value has been changed.\r\n        if (dataType === wijmo.DataType.Date) {\r\n            const oldValString = common.dateToString(oldVal);\r\n            if (oldValString === newVal) {\r\n                return true;\r\n            }\r\n        } else if ((typeof oldVal === 'string' && oldVal === newVal) || common.isDeltaZero(oldVal - newVal)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    removeTimeZoneFromDate(s) {\r\n        return common.stringToDate(common.dateToString(s));\r\n    }\r\n\r\n    stringToDate(s) {\r\n        if (typeof s === 'string') {\r\n            // Create moment object without timezone.\r\n            s = s.split('-');\r\n            const m = moment.utc({\r\n                year: s[0],\r\n                month: s[1] - 1,\r\n                day: s[2]\r\n            });\r\n\r\n            // Convert to date object.\r\n            return m.toDate();\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    dateToString(s) {\r\n        if (typeof s === 'object') {\r\n            // Get date with timezone.\r\n            const m1 = moment(s);\r\n\r\n            // Recreate date without timezone.\r\n            const m2 = moment.utc({\r\n                year: m1.year(),\r\n                month: m1.month(),\r\n                day: m1.date()\r\n            });\r\n\r\n            return m2.format('YYYY-MM-DD');\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    // This is something that Wijmo should have out-of-the-box.\r\n    setSelectedValue(wijmoComponent, selectedValue) {\r\n        for (let i = 0; i < wijmoComponent.itemsSource.length; i++) {\r\n            const item = wijmoComponent.itemsSource[i];\r\n\r\n            if (item[wijmoComponent.selectedValuePath] === selectedValue) {\r\n                wijmoComponent.selectedItem = item;\r\n                return;\r\n            }\r\n        }\r\n\r\n        wijmoComponent.selectedItem = null;\r\n    }\r\n\r\n    // https://stackoverflow.com/a/39027151/148388\r\n    wait(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}\r\n\r\nexport const common = new Common();\r\n","class Constants {\r\n    constructor() {\r\n        // Colors\r\n        this.COLOR_KPMG_BLUE = '#00338d';\r\n        this.COLOR_MEDIUM_BLUE = '#005eb8';\r\n        this.COLOR_LIGHT_BLUE = '#0091da';\r\n        this.COLOR_VIOLET = '#483698';\r\n        this.COLOR_PURPLE = '#470a68';\r\n        this.COLOR_LIGHT_PURPLE = '#6d2077';\r\n        this.COLOR_GREEN = '#00a3a1';\r\n        this.COLOR_DARK_GREEN = '#009a44';\r\n        this.COLOR_LIGHT_GREEN = '#43b02a';\r\n        this.COLOR_YELLOW = '#eaaa00';\r\n        this.COLOR_ORANGE = '#f68d2e';\r\n        this.COLOR_RED = '#bc204b';\r\n        this.COLOR_PINK = '#c6007e';\r\n        this.COLOR_DARK_BROWN = '#753f19';\r\n        this.COLOR_LIGHT_BROWN = '#9b642e';\r\n        this.COLOR_OLIVE = '#9d9375';\r\n        this.COLOR_BEIGE = '#e3bc9f';\r\n        this.COLOR_LIGHT_PINK = '#e36877';\r\n\r\n        // Misc\r\n        this.CANNOT_EDIT_NORMALIZED_VALUE = 'You cannot edit the normalized value directly.';\r\n        this.CANNOT_EDIT_VALUE = 'This data point was ingested from a file, therefore you cannot change its value.';\r\n        this.CANNOT_SET_GROUP_IF_NO_PARENT = 'You need to set the parent before setting the group.';\r\n        this.DIMENSION_SUFFIX_GROUP = '__group';\r\n        this.DIMENSION_SUFFIX_PARENT = '__parent';\r\n        this.FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN = '#ed2d2d';\r\n        this.FILE_WORKFLOW_CELL_PROGRESS_COLOR_END = '#49CAAE';\r\n    }\r\n\r\n    getAllColors() {\r\n        const colors = [];\r\n\r\n        Object.getOwnPropertyNames(this).forEach((property) => {\r\n            if (property.indexOf('COLOR_') === 0) {\r\n                colors.push(this[property]);\r\n            }\r\n        });\r\n\r\n        return colors;\r\n    }\r\n\r\n    getTextColorForBackground(backgroundColor) {\r\n        // Use white text for dark backgrounds.\r\n        // A minimum contrast of 4.5:1 is recommended to ensure that text is still readable against a background color.\r\n        // http://www.w3.org/TR/WCAG20-TECHS/G18.html\r\n        // http://gka.github.io/chroma.js/#chroma-contrast\r\n        if (chroma.contrast('#111111', backgroundColor) < 4.5) {\r\n            return '#eeeeee';\r\n        }\r\n\r\n        return '#111111';\r\n    }\r\n}\r\n\r\nexport const constants = new Constants();","export class MultiLevelHashMap {\r\n    constructor(levels) {\r\n        this.levels = levels;\r\n        this.map = {};\r\n    }\r\n\r\n    set(keys, value) {\r\n        let currentObject = this.map;\r\n        keys.forEach((key, index) => {\r\n            if (index < keys.length - 1) {\r\n                if (!currentObject.hasOwnProperty(key)) {\r\n                    currentObject[key] = {};\r\n                }\r\n\r\n                currentObject = currentObject[key];\r\n            }\r\n            else {\r\n                currentObject[key] = value;\r\n            }\r\n        });\r\n    }\r\n\r\n    log() {\r\n        console.log(this.map);\r\n    }\r\n\r\n    getUniqueGroups() {\r\n        return this.getUniqueGroupsHelper(this.map, 1);\r\n    }\r\n\r\n    getUniqueGroupsHelper(map, level) {\r\n        if (level !== this.levels) {\r\n            let groups = [];\r\n\r\n            for (let i in map) {\r\n                let subMap = map[i];\r\n\r\n                groups = groups.concat(this.getUniqueGroupsHelper(subMap, level + 1));\r\n            }\r\n\r\n            return groups;\r\n        }\r\n\r\n        return [map];\r\n    }\r\n}","class ResizableDivider {\r\n    enableResizable(target, secondaryTarget, direction, handle, dimensions, callback) {\r\n        let windowSize = 0;\r\n\r\n        if (direction === 'height') {\r\n            windowSize = $(window).height();\r\n        } else {\r\n            windowSize = $(window).width();\r\n        }\r\n\r\n        $(target).css(direction, windowSize / 2 + 'px');\r\n\r\n        $(target).resizable(\r\n            {\r\n                classes: {\r\n                    \"ui-resizable\": \"allow-divider\"\r\n                }\r\n            },\r\n            handle,\r\n            dimensions,\r\n            \"enable\",\r\n            {\r\n                alsoResize: secondaryTarget\r\n            },\r\n            {\r\n                stop: callback()\r\n            }\r\n        );\r\n    }\r\n\r\n    resetResizable(target, callback) {\r\n        try {\r\n            $(target).resizable(\"destroy\");\r\n            callback();\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n}\r\n\r\nexport const resizableDivider = new ResizableDivider();","import { storageService } from './services/StorageService';\r\nimport { dataExplorerAnalyses } from './tabs/data-explorer/DataExplorerAnalyses';\r\n\r\nexport class Tab {\r\n    constructor() {\r\n        this.isDirty = false;\r\n        this.tabHref = null;\r\n    }\r\n\r\n    syncIfVisible(onlyIfDirty) {\r\n        if (onlyIfDirty && !this.isDirty) {\r\n            return;\r\n        }\r\n        let currentTab = storageService.getCurrentTab();\r\n\r\n        // If this tab is not visible, postpone syncing it.\r\n        if (currentTab !== this.tabHref) {\r\n            this.isDirty = true;\r\n            if (storageService.getCurrentTab() !== '#output_table') {\r\n                dataExplorerAnalyses.backToList();\r\n            }\r\n        }\r\n        // Sync now.\r\n        else {\r\n            console.log('Sync Tab \"' + this.tabHref + '\"');\r\n            this.isDirty = false;\r\n            this.sync();\r\n        }\r\n    }\r\n\r\n    sync() {}\r\n}\r\n","export const filterTemplate1 =\r\n    {\r\n        title: 'Awesome Template 1',\r\n        rows: [\r\n            {\r\n                name: 'row 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Revenue'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'row 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Cost of sales'\r\n                    },\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015 GT'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'blank row',\r\n                type: 'blank'\r\n            },\r\n            {\r\n                name: 'row 3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015'\r\n                    },\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Cost of sales'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'row 4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Gross Profit'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'New Margin example',\r\n                type: 'margin',\r\n                year1: 'Cost of sales',\r\n                year2: 'Revenue',\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'New Formula example',\r\n                type: 'formula',\r\n                formula: 'AVERAGE(25,36)',\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'New Formula example 2',\r\n                type: 'formula',\r\n                formula: 'MAX(R1,R2)',\r\n            }\r\n        ],\r\n        columns: [\r\n            {\r\n                name: 'col 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2003 GT'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'col 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015 GT'\r\n                    },\r\n                    {\r\n                        dimension: 'quality',\r\n                        value: 'Reported'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'blank col',\r\n                type: 'blank',\r\n            },\r\n            {\r\n                name: 'YoY example',\r\n                type: 'yoy',\r\n                year1: '2015 GT',\r\n                year2: '2016 GT',\r\n            },\r\n            {\r\n                name: 'CAGR example',\r\n                type: 'cagr',\r\n                year1: '2015 GT',\r\n                year2: '2016 GT',\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'Delta example',\r\n                type: 'delta',\r\n                year1: '2015 GT',\r\n                year2: '2016 GT'\r\n            },\r\n            {\r\n                name: 'Custom formula example',\r\n                type: 'formula',\r\n                formula: 'SUM(C2,C5)',\r\n                in_chart: true\r\n            }\r\n        ],\r\n        globals_headline: [\r\n            {\r\n                name: 'g1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Actual'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2016 GT'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        globals_a1: [\r\n            {\r\n                name: 'g3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015 GT'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Budget'\r\n                    }\r\n                ]\r\n\r\n            }\r\n        ],\r\n        globals_hidden: [\r\n            {\r\n                name: 'g5',\r\n                filters: [\r\n                    {\r\n                        dimension: 'unit',\r\n                        value: 'EUR'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        chart_options: [\r\n            {\r\n                _chartStackingMode: 'percent',\r\n                _chartMode: 'line'\r\n            }\r\n        ]\r\n    }\r\n;","export const filterTemplate2 =\r\n    {\r\n        title: 'Awesome Template 2',\r\n        rows: [\r\n            {\r\n                name: 'row 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'ebitda GT'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n\r\n            {\r\n                name: 'row 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Cost of sales'\r\n                    },\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2016 GT'\r\n                    }\r\n                ]\r\n            },\r\n\r\n            {\r\n                name: 'row 3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015'\r\n                    },\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Cost of sales'\r\n                    }\r\n                ]\r\n            },\r\n\r\n            {\r\n                name: 'row 4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Gross Profit'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        columns: [\r\n            {\r\n                name: 'col 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2003 GT'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'col 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015 GT'\r\n                    },\r\n                    {\r\n                        dimension: 'quality',\r\n                        value: 'Reported'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        globals_headline: [\r\n            {\r\n                name: 'g1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Actual'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2016 GT'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        globals_a1: [\r\n            {\r\n                name: 'g3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Budget'\r\n                    }\r\n                ]\r\n\r\n            }\r\n        ],\r\n        globals_hidden: [\r\n            {\r\n                name: 'g5',\r\n                filters: [\r\n                    {\r\n                        dimension: 'unit',\r\n                        value: 'EUR'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        chart_options: [\r\n            {\r\n                _chartStackingMode: 'stacked',\r\n                _chartMode: 'area'\r\n            }\r\n        ]\r\n    };","export const filterTemplate3 =\r\n    {\r\n        title: 'Awesome Template 3',\r\n        rows: [\r\n            {\r\n                name: 'row 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Revenue'\r\n                    }\r\n                ]\r\n            },\r\n\r\n            {\r\n                name: 'row 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Cost of sales'\r\n                    },\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015 GT'\r\n                    }\r\n                ]\r\n            },\r\n\r\n            {\r\n                name: 'row 3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015'\r\n                    },\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Cost of sales'\r\n                    }\r\n                ]\r\n            },\r\n\r\n            {\r\n                name: 'row 4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Gross Profit'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        columns: [\r\n            {\r\n                name: 'col 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2003 GT'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'col 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015 GT'\r\n                    },\r\n                    {\r\n                        dimension: 'quality',\r\n                        value: 'Reported'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        globals_headline: [\r\n            {\r\n                name: 'g1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Actual'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2016'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        globals_a1: [\r\n            {\r\n                name: 'g3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2015'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Budget'\r\n                    }\r\n                ]\r\n\r\n            }\r\n        ],\r\n        globals_hidden: [\r\n            {\r\n                name: 'g5',\r\n                filters: [\r\n                    {\r\n                        dimension: 'unit',\r\n                        value: 'EUR'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        chart_options: [\r\n            {\r\n                _chartStackingMode: 'normal',\r\n                _chartMode: 'pie'\r\n            }\r\n        ]\r\n    };","export const filterTemplate4 =\r\n    {\r\n        title: 'Awesome Template 2',\r\n        rows: [\r\n            {\r\n                name: 'row 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Revenue'\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                name: 'row 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Cost of Sales'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'row 3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Gross Profit'\r\n                    },\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'row 4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Other Income'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'row 5',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Selling and Distribution Expenses'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'row 6',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Administrative Expenses'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'row 7',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'R&D Expenses'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'row 8',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Other Expenses'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'row 9',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'EBITDA'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'row 10',\r\n                filters: [\r\n                    {\r\n                        dimension: 'attribute',\r\n                        value: 'Margin'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'YoY example',\r\n                type: 'yoy',\r\n                year1: '2016 GT',\r\n                year2: '2017 GT',\r\n            },\r\n            {\r\n                name: 'YoY example',\r\n                type: 'yoy',\r\n                year1: '2017 GT',\r\n                year2: '2018 GT',\r\n            }\r\n        ],\r\n        columns: [\r\n            {\r\n                name: 'col 1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Actual'\r\n                    },\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2016 GT'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'col 2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Actual'\r\n                    },\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2017 GT'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'col 3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Actual'\r\n                    },\r\n                    {\r\n                        dimension: 'time',\r\n                        value: '2017 GT'\r\n                    }\r\n                ],\r\n                in_chart: true\r\n            },\r\n            {\r\n                name: 'YoY example',\r\n                type: 'yoy',\r\n                year1: '2016 GT',\r\n                year2: '2017 GT',\r\n            },\r\n            {\r\n                name: 'YoY example',\r\n                type: 'yoy',\r\n                year1: '2017 GT',\r\n                year2: '2018 GT',\r\n            }\r\n        ],\r\n        globals_headline: [\r\n            {\r\n                name: 'g1',\r\n                filters: [\r\n                    {\r\n                        dimension: 'layer',\r\n                        value: 'Historical Profit'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g2',\r\n                filters: [\r\n                    {\r\n                        dimension: 'time',\r\n                        value: 'Loss'\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        globals_a1: [\r\n            {\r\n                name: 'g3',\r\n                filters: [\r\n                    {\r\n                        dimension: 'unit',\r\n                        value: 'EUR'\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'g4',\r\n                filters: [\r\n                    {\r\n                        dimension: 'scale',\r\n                        value: 'Million'\r\n                    }\r\n                ]\r\n\r\n            }\r\n        ],\r\n        globals_hidden: [\r\n        ],\r\n        chart_options: [\r\n            {\r\n                _chartStackingMode: 'stacked',\r\n                _chartMode: 'area'\r\n            }\r\n        ]\r\n    };","export const filterTemplate5 =\r\n    {\r\n        title: 'Reset (empty) Template',\r\n        rows: [],\r\n        columns: [],\r\n        globals_headline: [],\r\n        globals_a1: [],\r\n        globals_hidden: [],\r\n        chart_options: [\r\n            {\r\n                _chartStackingMode: 'stacked',\r\n                _chartMode: 'area'\r\n            }\r\n        ]\r\n    };","export const globalTerms = [\r\n    {\r\n        name: 'Revenue',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Cost of sales',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Gross profit',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Other income',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Selling and distribution expenses',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Administrative expenses',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Research and development expenses',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Results from operating activities',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Finance income',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Finance costs',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Net finance costs',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Share of profit of equity-accounted investees, ner of tax',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Profit before tax',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Tax expense',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Profit from continuing operations',\r\n        dictionaries: ['V1']\r\n    },\r\n    {\r\n        name: 'Net sales',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Material expenses',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Gross profit',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Personnel expenses',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Other operating income',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Other operating expenses',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'EBITDA',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Depreciation/amort.',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'EBIT',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Interest income',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Interest expenses',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'EBT',\r\n        dictionaries: ['PL']\r\n    },\r\n\r\n    {\r\n        name: 'Taxes',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Net profit',\r\n        dictionaries: ['PL']\r\n    },\r\n    {\r\n        name: 'Intangible assets',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'PPE',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Inventories',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Trade receiveables',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Trade payables',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Others assets',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Other liabilities',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Provisions',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Cash',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Shareholder loan',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Net Debt 1',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Net Debt 2',\r\n        dictionaries: ['BS']\r\n    },\r\n    {\r\n        name: 'Net Debt 3',\r\n        dictionaries: ['BS']\r\n    }\r\n];","import { get, set } from 'lodash';\r\nimport { DataExplorerCard } from './DataExplorerCard';\r\nimport { DataExplorerCellData } from './DataExplorerCellData';\r\n\r\nexport class DataExplorerAnalysis {\r\n    constructor(dataExplorerAnalysis) {\r\n        this.id = '';\r\n        this.name = '';\r\n        this.dropboxFiles = [];\r\n\r\n        // Global filter cards\r\n        this.globalFilters = [];\r\n\r\n        /**\r\n         * Column cards\r\n         * @type {DataExplorerCard[]}\r\n         */\r\n        this.columns = [];\r\n\r\n        /**\r\n         * Row cards\r\n         * @type {DataExplorerCard[]}\r\n         */\r\n        this.rows = [];\r\n\r\n        // Scale used in analysis\r\n        this.scale = 1000;\r\n\r\n        /**\r\n         * Data for each individual cell.\r\n         * @type {DataExplorerCellData[][]}\r\n         */\r\n        this.cellData = {};\r\n\r\n        this.tableRowToCardNo = {};\r\n\r\n        this.tableRowToPath = {};\r\n\r\n        this.tableColumnToCardNo = {};\r\n\r\n        this.tableRowLevel = {};\r\n\r\n        this.tableColumnLevel = {};\r\n\r\n        // Initialize from simple object.\r\n        if (dataExplorerAnalysis) {\r\n            Object.assign(this, dataExplorerAnalysis);\r\n\r\n            this.columns = this.columns.map(column => {\r\n                return new DataExplorerCard(column);\r\n            });\r\n\r\n            this.rows = this.rows.map(row => {\r\n                return new DataExplorerCard(row);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param row {number}\r\n     * @param column {number}\r\n     * @return {DataExplorerCellData}\r\n     * */\r\n    getCellData(row, column) {\r\n        let cellData = get(this.cellData, `[${row}][${column}`);\r\n\r\n        if (!cellData) {\r\n            cellData = new DataExplorerCellData();\r\n        }\r\n\r\n        return cellData;\r\n    }\r\n\r\n    /**\r\n     * @param row {number}\r\n     * @param column {number}\r\n     * @param cellData {DataExplorerCellData}\r\n     */\r\n    setCellData(row, column, cellData) {\r\n        const oldCellData = this.getCellData(row, column);\r\n\r\n        // Be sure to make these objects, not arrays.\r\n        if (!this.cellData[row]) {\r\n            this.cellData[row] = {};\r\n        }\r\n\r\n        if (!this.cellData[column]) {\r\n            this.cellData[column] = {};\r\n        }\r\n\r\n        if (cellData.customFormula === null && oldCellData.customFormula) {\r\n            cellData.customFormula = oldCellData.customFormula;\r\n        }\r\n\r\n        set(this.cellData, `[${row}][${column}]`, cellData);\r\n    }\r\n}\r\n","import { DataExplorerDrillDownStatus } from './DataExplorerDrillDownStatus';\r\n\r\nexport class DataExplorerCard {\r\n    constructor(card) {\r\n        this.sectionType = null;\r\n\r\n        this.title = '';\r\n\r\n        /**\r\n         * Filters indexed by dimension. E.g. {attribute: ['Net Revenue'], time: ['2015', '2016']}.\r\n         * @type {{}}\r\n         */\r\n        this.filters = {};\r\n\r\n        this.dataValue = '';\r\n\r\n        this.year1 = '';\r\n\r\n        this.year2 = '';\r\n\r\n        /** @type {DataExplorerDrillDownStatus} */\r\n        this.drillDownStatus = new DataExplorerDrillDownStatus();\r\n\r\n        if (card) {\r\n            Object.assign(this, card);\r\n\r\n            if (this.drillDownStatus) {\r\n                this.drillDownStatus = new DataExplorerDrillDownStatus(this.drillDownStatus);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the DrillDownStatus object corresponding to the given path. An empty path (i.e. []) will return this.drillDownStatus.\r\n     * @param {array} path\r\n     * @returns {DataExplorerDrillDownStatus}\r\n     */\r\n    getDrillDownStatusByPath(path) {\r\n        let status = this.drillDownStatus;\r\n\r\n        path.forEach(part => {\r\n            status = status.childStatuses[part];\r\n        });\r\n\r\n        return status;\r\n    }\r\n}\r\n","export class DataExplorerCellData {\r\n    constructor() {\r\n        // The row-level or column-level formula that was used, if any.\r\n        this.formula = null;\r\n    }\r\n}\r\n","export class DataExplorerDrillDownStatus {\r\n    constructor(drillDownStatus) {\r\n        /**\r\n         * Filters indexed by dimension. E.g. {attribute: ['Net Revenue'], time: ['2015', '2016']}.\r\n         * @type {{}}\r\n         */\r\n        this.filters = {};\r\n\r\n        // Is this drillable? I.e. Should we display a plus sign next to it?\r\n        this.expandable = false;\r\n\r\n        // Is this expanded/open or collapsed/closed?\r\n        this.expanded = false;\r\n\r\n        // Which dimension are we drilling down to? E.g. If we double-click \"Net Revenue\" to split it into countries, this.dimension would be equal to \"country\".\r\n        this.dimension = '';\r\n\r\n        /**\r\n         * A list of child statuses, indexed by value. E.g. The \"Net Revenue\" child status will be indexed by \"Net Revenue\".\r\n         *\r\n         * @type {DataExplorerDrillDownStatus[]}\r\n         **/\r\n        this.childStatuses = {};\r\n\r\n        if (drillDownStatus) {\r\n            Object.assign(this, drillDownStatus);\r\n\r\n            for (const dimension in this.childStatuses) {\r\n                this.childStatuses[dimension] = new DataExplorerDrillDownStatus(this.childStatuses[dimension]);\r\n            }\r\n        }\r\n    }\r\n}\r\n","export class DataStructure {\r\n    constructor(object) {\r\n        this.attribute = '';\r\n        this.parentAttribute = '';\r\n        this.group = '';\r\n        this.globalTerm = '';\r\n        this.timeIntervalBegin = '';\r\n        this.timeIntervalEnd = '';\r\n        this.changed = false;\r\n\r\n        if (object) {\r\n            Object.assign(this, object);\r\n        }\r\n    }\r\n}","import { constants } from '../Constants';\r\nimport { dimensionTypesService } from '../services/DimensionTypesService';\r\n\r\nexport class Dimension {\r\n    constructor(object) {\r\n        this.slug = '';\r\n        this.label = '';\r\n        this.hasDataStructures = false;\r\n        this.hasGlobalTerms = false;\r\n        this.usedAsIdentifier = true;\r\n        this.hasTimeIntervals = false;\r\n        this.special = false;\r\n        this.dataType = dimensionTypesService.STRING;\r\n        this.isVisible = true;\r\n        this.dictionaries = [];\r\n\r\n        if (object) {\r\n            Object.assign(this, object);\r\n        }\r\n    }\r\n\r\n    getParentSlug() {\r\n        return this.slug + constants.DIMENSION_SUFFIX_PARENT;\r\n    }\r\n\r\n    getGroupSlug() {\r\n        return this.slug + constants.DIMENSION_SUFFIX_GROUP;\r\n    }\r\n\r\n    getGlobalTermSlug() {\r\n        return this.slug + '__global_term';\r\n    }\r\n\r\n    getTimeIntervalBeginSlug() {\r\n        return this.slug + '__time_interval_begin';\r\n    }\r\n\r\n    getTimeIntervalEndSlug() {\r\n        return this.slug + '__time_interval_end';\r\n    }\r\n\r\n    getDictionaries() {\r\n        return this.dictionaries;\r\n    }\r\n}\r\n","import { common } from '../Common';\r\nimport { constants } from '../Constants';\r\nimport { dimensionTypesService } from '../services/DimensionTypesService';\r\nimport { storageService } from '../services/StorageService';\r\nimport { DataExplorerAnalysis } from './DataExplorerAnalysis';\r\nimport { DataStructure } from './DataStructure';\r\nimport { Dimension } from './Dimension';\r\nimport { SourceFile } from './SourceFile';\r\n\r\nexport class Project {\r\n    constructor(project) {\r\n        this.name = '';\r\n\r\n        this.dataPoints = [];\r\n\r\n        /** @type {SourceFile[]} */\r\n        this.sourceFiles = {};\r\n\r\n        /** @type {DataStructure[][]} */\r\n        this.dataStructuresPerDimension = {};\r\n\r\n        /** @type {Dimension[]} */\r\n        this.dimensions = [];\r\n\r\n        /** @type {DataExplorerAnalysis[]} */\r\n        this.analyses = [\r\n            new DataExplorerAnalysis({\r\n                id: 0,\r\n                name: 'Example Analysis'\r\n            })\r\n        ];\r\n\r\n        this.calculateDeltaByAddingChildren = false;\r\n\r\n        // Initialize from simple object.\r\n        if (project) {\r\n            Object.assign(this, project);\r\n\r\n            for (const uuid in this.sourceFiles) {\r\n                this.sourceFiles[uuid] = new SourceFile(this.sourceFiles[uuid]);\r\n            }\r\n\r\n            this.dimensions = this.dimensions.map(dimension => {\r\n                return new Dimension(dimension);\r\n            });\r\n\r\n            for (const dimension in this.dataStructuresPerDimension) {\r\n                const dataStructures = this.dataStructuresPerDimension[dimension];\r\n                for (const value in dataStructures) {\r\n                    dataStructures[value] = new DataStructure(dataStructures[value]);\r\n                }\r\n            }\r\n\r\n            this.analyses = this.analyses.map(analysis => {\r\n                return new DataExplorerAnalysis(analysis);\r\n            });\r\n        }\r\n\r\n        // Default dimensions\r\n        if (this.dimensions.length === 0) {\r\n            this.dimensions = [\r\n                new Dimension({\r\n                    slug: 'value',\r\n                    label: 'Value',\r\n                    dataType: dimensionTypesService.NUMBER,\r\n                    special: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'attribute',\r\n                    label: 'Attribute',\r\n                    hasDataStructures: true,\r\n                    hasGlobalTerms: true,\r\n                    usedAsIdentifier: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'legal_entity',\r\n                    label: 'Legal Entity',\r\n                    usedAsIdentifier: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'time',\r\n                    label: 'Time',\r\n                    usedAsIdentifier: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'layer',\r\n                    label: 'Layer',\r\n                    usedAsIdentifier: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'quality',\r\n                    label: 'Quality',\r\n                    usedAsIdentifier: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'unit',\r\n                    label: 'Unit',\r\n                    usedAsIdentifier: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'scale',\r\n                    label: 'Scale',\r\n                    dataType: dimensionTypesService.NUMBER,\r\n                    special: true\r\n                }),\r\n                new Dimension({\r\n                    slug: 'inverse',\r\n                    label: 'Inverse',\r\n                    special: true\r\n                })\r\n            ];\r\n        }\r\n    }\r\n\r\n    addDataPointsWithFile(dataPoints, fileName) {\r\n        // Create source file or set as manual.\r\n        let uuid = '';\r\n        if (fileName) {\r\n            const sourceFile = new SourceFile();\r\n            sourceFile.name = fileName;\r\n            sourceFile.hidden = true;\r\n            uuid = common.getNextUuid();\r\n            sourceFile.uuid = uuid;\r\n            this.sourceFiles[uuid] = sourceFile;\r\n        } else {\r\n            uuid = 'manual';\r\n        }\r\n\r\n        // Add data points.\r\n        dataPoints = dataPoints.map(item => {\r\n            item.id = common.getNextUuid();\r\n            item.source = uuid;\r\n\r\n            // Fix time.\r\n            if (typeof item.time !== 'undefined') {\r\n                item.time = String(item.time);\r\n            }\r\n\r\n            return item;\r\n        });\r\n        this.dataPoints = this.dataPoints.concat(dataPoints);\r\n    }\r\n\r\n    /**\r\n     * Validate a data point before adding/saving it.\r\n     */\r\n    validateDataPoint(dataPoint, modifiedFromAnalysis = false) {\r\n        // Validate fields.\r\n        if ((!dataPoint.value && dataPoint.value !== 0) || !dataPoint.attribute || !dataPoint.scale) {\r\n            return {\r\n                success: false,\r\n                error: 'Value, Attribute, and Scale are required.'\r\n            };\r\n        }\r\n\r\n        const dimensions = this.getDimensions();\r\n\r\n        for (let propertyName in dataPoint) {\r\n            if (dataPoint.hasOwnProperty(propertyName)) {\r\n                if (dataPoint[propertyName] !== '') {\r\n                    for (let i = 0; i < dimensions.length; i++) {\r\n                        let currentDimension = dimensions[i];\r\n                        let currentDimensionSlug = dimensions[i].slug;\r\n\r\n                        if (propertyName === currentDimensionSlug) {\r\n                            switch (currentDimension.dataType) {\r\n                                case dimensionTypesService.NUMBER:\r\n                                    if (isNaN(dataPoint[propertyName])) {\r\n                                        return {\r\n                                            success: false,\r\n                                            error: `\"${dimensions[i].label}\" field must be a number`\r\n                                        };\r\n                                    }\r\n                                    continue;\r\n                                case dimensionTypesService.CURRENCY:\r\n                                    if (/\\d/.test(dataPoint[propertyName])) {\r\n                                        return {\r\n                                            success: false,\r\n                                            error: `\"${dimensions[i].label}\" field must contain only letters`\r\n                                        };\r\n                                    }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check for duplicates.\r\n        let matchingDataPoint = this.getMatchingDataPoint(dataPoint);\r\n        if (matchingDataPoint && dataPoint.id !== matchingDataPoint.id) {\r\n            return {\r\n                success: false,\r\n                error:\r\n                    'This data point already exists (same dimensions and with a value of ' +\r\n                    matchingDataPoint.value +\r\n                    ').'\r\n            };\r\n        }\r\n\r\n        // Check for source files.\r\n        if (matchingDataPoint && !modifiedFromAnalysis) {\r\n            dataPoint.source = matchingDataPoint.source;\r\n        }\r\n        if (\r\n            !modifiedFromAnalysis &&\r\n            matchingDataPoint &&\r\n            dataPoint.source !== 'manual' &&\r\n            !common.isDeltaZero(dataPoint.value - matchingDataPoint.value)\r\n        ) {\r\n            return {\r\n                success: false,\r\n                error: constants.CANNOT_EDIT_VALUE\r\n            };\r\n        }\r\n\r\n        return {\r\n            success: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * If no ID is given, a new data-point will be created. Otherwise, the existing data-point will be updated.\r\n     *\r\n     * @param dataPoint\r\n     * @param modifiedFromAnalysis\r\n     * @returns {*} Returns an object with the following properties: success (bool), error (string), id (of data-point).\r\n     */\r\n    addDataPoint(dataPoint, modifiedFromAnalysis = false) {\r\n        const validation = this.validateDataPoint(dataPoint, modifiedFromAnalysis);\r\n        if (validation.success === false) {\r\n            return validation;\r\n        }\r\n\r\n        // Parse scale.\r\n        dataPoint.scale = common.parseScale(dataPoint.scale);\r\n\r\n        // Save global stuff.\r\n        const dimensions = this.getDimensions();\r\n        dimensions.forEach(dimension => {\r\n            const parentSlug = dimension.getParentSlug();\r\n            const groupSlug = dimension.getGroupSlug();\r\n            const globalTermSlug = dimension.getGlobalTermSlug();\r\n            const timeIntervalBegin = dimension.getTimeIntervalBeginSlug();\r\n            const timeIntervalEnd = dimension.getTimeIntervalEndSlug();\r\n\r\n            // Auto-detect time intervals, if any.\r\n            // TODO: Check project to ensure time intervals aren't already set.\r\n            if (\r\n                dimension.hasTimeIntervals &&\r\n                dataPoint[dimension.slug] &&\r\n                !dataPoint[timeIntervalBegin] &&\r\n                !dataPoint[timeIntervalEnd]\r\n            ) {\r\n                // [4-digit-year]\r\n                const justYear = /^[0-9]{4}$/i;\r\n                // [3-character-month dash 2-digit-year]\r\n                const monthYear = /^([a-zA-Z]{3})-([0-9]{2})$/i;\r\n                // [3-character-month dash 4-digit-year]\r\n                const monthFullYear = /^([a-zA-Z]{3})-([0-9]{4})$/i;\r\n\r\n                const months = {\r\n                    jan: '01',\r\n                    feb: '02',\r\n                    mar: '03',\r\n                    apr: '04',\r\n                    may: '05',\r\n                    jun: '06',\r\n                    jul: '07',\r\n                    aug: '08',\r\n                    sep: '09',\r\n                    oct: '10',\r\n                    nov: '11',\r\n                    dec: '12'\r\n                };\r\n\r\n                if (justYear.test(dataPoint[dimension.slug])) {\r\n                    dataPoint[timeIntervalBegin] = dataPoint[dimension.slug] + '-01-01';\r\n                    dataPoint[timeIntervalEnd] = dataPoint[dimension.slug] + '-12-31';\r\n                } else if (monthYear.test(dataPoint[dimension.slug])) {\r\n                    const inputData = monthYear.exec(dataPoint[dimension.slug]);\r\n                    inputData[1] = inputData[1].toLowerCase();\r\n                    if (months.hasOwnProperty(inputData[1])) {\r\n                        const month = months[inputData[1]];\r\n                        const year = moment.parseTwoDigitYear(inputData[2]);\r\n\r\n                        dataPoint[timeIntervalBegin] = year + '-' + month + '-01';\r\n                        dataPoint[timeIntervalEnd] = moment(\r\n                            new Date(year, parseInt(month.replace(/^0/, '')), 0)\r\n                        ).format('YYYY-MM-DD');\r\n                    }\r\n                } else if (monthFullYear.test(dataPoint[dimension.slug])) {\r\n                    const inputData = monthFullYear.exec(dataPoint[dimension.slug]);\r\n                    inputData[1] = inputData[1].toLowerCase();\r\n\r\n                    if (months.hasOwnProperty(inputData[1])) {\r\n                        const month = months[inputData[1]];\r\n                        const year = parseInt(inputData[2]);\r\n\r\n                        dataPoint[timeIntervalBegin] = year + '-' + month + '-01';\r\n                        dataPoint[timeIntervalEnd] = moment(\r\n                            new Date(year, parseInt(month.replace(/^0/, '')), 0)\r\n                        ).format('YYYY-MM-DD');\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.addDataStructure(\r\n                dimension.slug,\r\n                dataPoint[dimension.slug],\r\n                dataPoint[parentSlug],\r\n                dataPoint[groupSlug],\r\n                dataPoint[globalTermSlug],\r\n                dataPoint[timeIntervalBegin],\r\n                dataPoint[timeIntervalEnd]\r\n            );\r\n\r\n            delete dataPoint[parentSlug];\r\n            delete dataPoint[groupSlug];\r\n            delete dataPoint[globalTermSlug];\r\n            delete dataPoint[timeIntervalBegin];\r\n            delete dataPoint[timeIntervalEnd];\r\n        });\r\n\r\n        // Add data point.\r\n        const dataPoints = this.dataPoints;\r\n        if (dataPoint.id) {\r\n            const key = this.getKeyForDataPointId(dataPoint.id);\r\n            dataPoints[key] = dataPoint;\r\n        } else {\r\n            dataPoint.id = common.getNextUuid();\r\n            dataPoints.unshift(dataPoint);\r\n        }\r\n\r\n        // Modify source file.\r\n        {\r\n            const uuid = dataPoint.source;\r\n            const project = storageService.getCurrentProject();\r\n            const file = project.sourceFiles[uuid];\r\n            if (file) {\r\n                file.dataPointsCopy.map(dp => {\r\n                    if (dp.id === dataPoint.id) {\r\n                        const cell = file.cellProperties[dp.col][dp.row];\r\n                        Object.keys(dataPoint).forEach(function(key) {\r\n                            cell[key] = dataPoint[key];\r\n                        });\r\n\r\n                        storageService.saveCurrentProject();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            id: dataPoint.id\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get dimension by slug.\r\n     *\r\n     * @param slug\r\n     *\r\n     * @returns Dimension\r\n     */\r\n    getDimensionBySlug(slug) {\r\n        for (let i = 0; i < this.dimensions.length; i++) {\r\n            const dimension = this.dimensions[i];\r\n\r\n            if (dimension.slug === slug) {\r\n                return dimension;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @returns {Dimension[]}\r\n     */\r\n    getDimensions(showAll) {\r\n        if (!showAll) {\r\n            return this.dimensions.filter(dimension => dimension.isVisible === true).slice();\r\n        }\r\n        return this.dimensions.slice();\r\n    }\r\n\r\n    /**\r\n     * @returns {Dimension}\r\n     */\r\n    addDimension(slug, label) {\r\n        // Check if slug is already used.\r\n        const sameSlug = this.dimensions.filter(dimension => {\r\n            return dimension.slug === slug;\r\n        });\r\n        if (sameSlug.length > 0) {\r\n            return null;\r\n        }\r\n\r\n        // Add new dimension.\r\n        const dimension = new Dimension({\r\n            slug: slug,\r\n            label: label\r\n        });\r\n        this.dimensions.push(dimension);\r\n\r\n        return dimension;\r\n    }\r\n\r\n    /**\r\n     * @returns {Dimension|null}\r\n     */\r\n    addDimensionWithPrompt() {\r\n        let label = prompt('Enter the name of your custom dimension:');\r\n        if (!label) {\r\n            return null;\r\n        }\r\n\r\n        let slug = common.getSlugFromName(label);\r\n\r\n        return this.addDimension(slug, label);\r\n    }\r\n\r\n    /**\r\n     * @returns {Dimension[]}\r\n     */\r\n    getFieldsForDimensions() {\r\n        let dimensions = this.getDimensions();\r\n\r\n        dimensions = dimensions.reduce((a, dimension) => {\r\n            a.push(dimension);\r\n            if (dimension.hasDataStructures) {\r\n                a.push({\r\n                    slug: dimension.getParentSlug(),\r\n                    label: dimension.label + ' (Parent)',\r\n                    shortLabel: 'Parent',\r\n                    child: true,\r\n                    isParent: true,\r\n                    attribute: dimension.slug\r\n                });\r\n                a.push({\r\n                    slug: dimension.getGroupSlug(),\r\n                    label: dimension.label + ' (Group)',\r\n                    shortLabel: 'Group',\r\n                    child: true,\r\n                    isGroup: true,\r\n                    attribute: dimension.slug\r\n                });\r\n            }\r\n\r\n            if (dimension.hasGlobalTerms) {\r\n                a.push({\r\n                    slug: dimension.getGlobalTermSlug(),\r\n                    label: dimension.label + ' (Global Term)',\r\n                    shortLabel: 'Global Term',\r\n                    child: true,\r\n                    isGlobalTerm: true\r\n                });\r\n            }\r\n\r\n            if (dimension.hasTimeIntervals) {\r\n                a.push({\r\n                    slug: dimension.getTimeIntervalBeginSlug(),\r\n                    label: dimension.label + ' (Begin)',\r\n                    shortLabel: 'Begin',\r\n                    child: true,\r\n                    isTime: true\r\n                });\r\n\r\n                a.push({\r\n                    slug: dimension.getTimeIntervalEndSlug(),\r\n                    label: dimension.label + ' (End)',\r\n                    shortLabel: 'End',\r\n                    child: true,\r\n                    isTime: true\r\n                });\r\n            }\r\n\r\n            return a;\r\n        }, []);\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    /**\r\n     * @returns {Dimension[]}\r\n     */\r\n    getIdentityDimensions() {\r\n        let dimensions = this.getDimensions();\r\n\r\n        dimensions = dimensions.filter(dimension => {\r\n            return dimension.usedAsIdentifier;\r\n        });\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    getDimensionForAutoReconciliations() {\r\n        return {\r\n            dimension: 'quality',\r\n            value: 'Adjusted'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @returns {Dimension[]}\r\n     */\r\n    getDimensionsForDataStructureValidation(dimensionSlugToValidate) {\r\n        let dimensions = this.getIdentityDimensions();\r\n        const dfar = this.getDimensionForAutoReconciliations();\r\n\r\n        // Remove dimension-to-validate and dimension used for auto-reconciliation.\r\n        dimensions = dimensions.filter(dimension => {\r\n            return dimension.slug !== dimensionSlugToValidate && dimension.slug !== dfar.dimension;\r\n        });\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    getMatchingDataPoint(point1) {\r\n        const dimensions = this.getIdentityDimensions();\r\n\r\n        for (let i = 0; i < this.dataPoints.length; i++) {\r\n            const point2 = this.dataPoints[i];\r\n            let matching = true;\r\n\r\n            for (let j = 0; j < dimensions.length; j++) {\r\n                const d = dimensions[j];\r\n                const a = typeof point1[d.slug] !== 'undefined' ? point1[d.slug] : '';\r\n                const b = typeof point2[d.slug] !== 'undefined' ? point2[d.slug] : '';\r\n\r\n                if (a != b) {\r\n                    matching = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (matching) {\r\n                return point2;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getKeyForDataPointId(id) {\r\n        for (let i = 0; i < this.dataPoints.length; i++) {\r\n            const dataPoint = this.dataPoints[i];\r\n\r\n            if (dataPoint.id === id) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get data structure objects for a certain dimension.\r\n     *\r\n     * @param dimensionSlug\r\n     *\r\n     * @returns {DataStructure[]}\r\n     */\r\n    getDataStructuresForDimension(dimensionSlug) {\r\n        if (!(dimensionSlug in this.dataStructuresPerDimension)) {\r\n            this.dataStructuresPerDimension[dimensionSlug] = {};\r\n        }\r\n\r\n        return this.dataStructuresPerDimension[dimensionSlug];\r\n    }\r\n\r\n    /**\r\n     * This will add data-structure fields to a data point. For example, if the data-point has attribute='Net Revenue',\r\n     * it could add 'attribute__parent'='Gross Profit'.\r\n     */\r\n    addDataStructuresToDataPoint(dataPoint) {\r\n        dataPoint = Object.assign({}, dataPoint);\r\n        const dimensions = this.getDimensions();\r\n\r\n        dimensions.forEach(dimension => {\r\n            const ds = this.getDataStructuresForDimension(dimension.slug)[dataPoint[dimension.slug]];\r\n\r\n            if (ds) {\r\n                if (dimension.hasDataStructures) {\r\n                    dataPoint[dimension.getParentSlug()] = ds.parentAttribute;\r\n                    dataPoint[dimension.getGroupSlug()] = ds.group;\r\n                }\r\n\r\n                if (dimension.hasGlobalTerms) {\r\n                    dataPoint[dimension.getGlobalTermSlug()] = ds.globalTerm;\r\n                }\r\n\r\n                if (dimension.hasTimeIntervals) {\r\n                    dataPoint[dimension.getTimeIntervalBeginSlug()] = ds.timeIntervalBegin;\r\n                    dataPoint[dimension.getTimeIntervalEndSlug()] = ds.timeIntervalEnd;\r\n                }\r\n            }\r\n        });\r\n\r\n        return dataPoint;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param dimension             Required\r\n     * @param value                 Required\r\n     * @param parent                Optional, can be null\r\n     * @param group                 Optional, can be null\r\n     * @param globalTerm            Optional, can be null\r\n     * @param timeIntervalBegin     Optional, can be null\r\n     * @param timeIntervalEnd       Optional, can be null\r\n     * @returns {DataStructure}\r\n     */\r\n    addDataStructure(dimension, value, parent, group, globalTerm, timeIntervalBegin, timeIntervalEnd) {\r\n        // Check if structure already exists.\r\n        const dataStructures = this.getDataStructuresForDimension(dimension);\r\n        let ds;\r\n        if (value in dataStructures) {\r\n            ds = dataStructures[value];\r\n        } else {\r\n            ds = new DataStructure();\r\n            ds.attribute = value;\r\n            dataStructures[value] = ds;\r\n        }\r\n\r\n        // Apply parent attribute.\r\n        if (typeof parent !== 'undefined' && !this.isDataStructureLoop(dataStructures, ds, parent)) {\r\n            ds.parentAttribute = parent;\r\n        }\r\n\r\n        // Apply group.\r\n        if (typeof group !== 'undefined') {\r\n            ds.group = group;\r\n        }\r\n\r\n        // Apply global term.\r\n        if (typeof globalTerm !== 'undefined') {\r\n            ds.globalTerm = globalTerm;\r\n        }\r\n\r\n        // Apply time interval.\r\n        if (typeof timeIntervalBegin !== 'undefined') {\r\n            ds.timeIntervalBegin = common.dateToString(timeIntervalBegin);\r\n        }\r\n        if (typeof timeIntervalEnd !== 'undefined') {\r\n            ds.timeIntervalEnd = common.dateToString(timeIntervalEnd);\r\n        }\r\n\r\n        // Remove group if parent empty.\r\n        if (!ds.parentAttribute) {\r\n            delete ds.group;\r\n        }\r\n\r\n        return ds;\r\n    }\r\n\r\n    getDataPointsForSource(uuid) {\r\n        return this.dataPoints.filter(dataPoint => {\r\n            return dataPoint.source === uuid;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if this new data structure would result in an endless loop.\r\n     *\r\n     * @param dataStructures {DataStructure[]}\r\n     * @param dataStructure {DataStructure}\r\n     * @param parent\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    isDataStructureLoop(dataStructures, dataStructure, parent) {\r\n        // Fetch parent data-structure.\r\n        let parentStructure = dataStructures[parent];\r\n        if (!parentStructure) {\r\n            return false;\r\n        }\r\n\r\n        do {\r\n            // Did we reach a loop?\r\n            if (parentStructure.attribute === dataStructure.attribute) {\r\n                return true;\r\n            }\r\n\r\n            // Fetch parent.\r\n            parentStructure = dataStructures[parentStructure.parentAttribute];\r\n        } while (parentStructure);\r\n\r\n        // No loop.\r\n        return false;\r\n    }\r\n\r\n    getChildren(dimensionSlug, value) {\r\n        const children = [];\r\n        const dimension = this.getDimensionBySlug(dimensionSlug);\r\n\r\n        // Abort if dimension does not have data structures.\r\n        if (!dimension || !dimension.hasDataStructures) {\r\n            return children;\r\n        }\r\n\r\n        // Search for children.\r\n        const dataStructures = this.getDataStructuresForDimension(dimensionSlug);\r\n        for (const attribute in dataStructures) {\r\n            const dataStructure = dataStructures[attribute];\r\n\r\n            if (dataStructure.parentAttribute === value) {\r\n                children.push(dataStructure.attribute);\r\n            }\r\n        }\r\n\r\n        return children;\r\n    }\r\n}\r\n","import get from 'lodash/get';\r\nimport { Project } from './Project';\r\n\r\nexport class SourceFile {\r\n    constructor(object) {\r\n        this.uuid = '';\r\n        this.name = '';\r\n        this.itemsSource = [];\r\n        this.cellProperties = {};\r\n        this.ingestionStep = 1;\r\n        this.dataPoints = [];\r\n        this.dataPointsCopy = [];\r\n        this.formDimensions = [];\r\n        this.hidden = false;\r\n        this.globalMappingStructures = [];\r\n\r\n        if (object) {\r\n            Object.assign(this, object);\r\n\r\n            if (object.project) {\r\n                this.project = new Project(object.project);\r\n            }\r\n        }\r\n    }\r\n\r\n    getNumberOfRows() {\r\n        return this.itemsSource.length;\r\n    }\r\n\r\n    getNumberOfCols() {\r\n        return this.itemsSource[0] ? this.itemsSource[0].length : 0;\r\n    }\r\n\r\n    getCellValue(row, col) {\r\n        return this.itemsSource[row][col];\r\n    }\r\n\r\n    getSingleCellProperties(row, col) {\r\n        if (!this.cellProperties.hasOwnProperty(col)) {\r\n            this.cellProperties[col] = {};\r\n        }\r\n\r\n        if (!this.cellProperties[col].hasOwnProperty(row)) {\r\n            this.cellProperties[col][row] = {};\r\n        }\r\n\r\n        // Assign defaults.\r\n        // TODO: Performance issue: this is always creating new objects.\r\n        const defaults = {\r\n            cellType: 'none'\r\n        };\r\n        this.cellProperties[col][row] = Object.assign({}, defaults, this.cellProperties[col][row]);\r\n        this.cellProperties[col][row]['value'] = this.getCellValue(row, col);\r\n\r\n        return this.cellProperties[col][row];\r\n    }\r\n\r\n    getCellCompletionPercentage(row, col) {\r\n        const cellFields = get(this, `cellProperties[${col}][${row}]`);\r\n        const totalFields = this.formDimensions.length;\r\n        const filledFields = this.formDimensions.reduce((count, field) => {\r\n            if (field in cellFields && cellFields[field] !== '') {\r\n                count++;\r\n            }\r\n\r\n            return count;\r\n        }, 0);\r\n\r\n        return totalFields > 0 ? filledFields / totalFields : 1;\r\n    }\r\n\r\n    getTotalCompletionPercentage() {\r\n        let dataCells = 0;\r\n        let progress = 0;\r\n\r\n        for (let col in this.cellProperties) {\r\n            for (let row in this.cellProperties[col]) {\r\n                const dataType = get(this, `cellProperties[${col}][${row}].cellType`);\r\n\r\n                if (dataType === 'data') {\r\n                    dataCells++;\r\n                    progress += this.getCellCompletionPercentage(row, col);\r\n                }\r\n            }\r\n        }\r\n\r\n        return dataCells === 0 ? 0 : progress / dataCells;\r\n    }\r\n}\r\n","export class VirtualTableCell {\r\n    constructor() {\r\n        // The cell value.\r\n        this.value = null;\r\n\r\n        // The total number of data-points.\r\n        this.numberOfDataPoints = 0;\r\n\r\n        // The IDs of the matching data-points.\r\n        this.dataPointIds = [];\r\n\r\n        // The IDs of the matching data-points, grouped per queries.\r\n        this.dataPointIdsPerQuery = [];\r\n\r\n        // A per-cell custom formula, optional.\r\n        this.customFormula = null;\r\n    }\r\n}\r\n","class DimensionTypesService {\r\n    constructor() {\r\n        this.STRING = 0;\r\n        this.NUMBER = 1;\r\n        this.CURRENCY = 2;\r\n    }\r\n}\r\n\r\nexport const dimensionTypesService = new DimensionTypesService();","import { get } from 'lodash';\r\nimport { common } from '../Common';\r\nimport { Project } from '../entities/Project';\r\nimport { SourceFile } from '../entities/SourceFile';\r\nimport { backendFileWorkflowService } from './backend/BackendFileWorkflowService';\r\nimport { storageService } from './StorageService';\r\nclass ImportXlsxService {\r\n    /**\r\n     * Reads an XLSX file, ingests it via the backend, and saves it in the Project.\r\n     *\r\n     * @param file File uploaded by user.\r\n     * @returns {Promise<String>} Return the UUID of the new file.\r\n     */\r\n    async importXlsx(file) {\r\n        const sheet = await this.getSheet(file);\r\n\r\n        const itemsSource = this.getItemsSource(sheet);\r\n\r\n        const sourceFile = this.addSourceFile(file, itemsSource);\r\n\r\n        await this.ingestViaBackend(file, sourceFile);\r\n\r\n        storageService.saveCurrentProject();\r\n\r\n        return sourceFile.uuid;\r\n    }\r\n\r\n    async getSheet(f) {\r\n        return new Promise((resolve, reject) => {\r\n            let reader = new FileReader();\r\n\r\n            reader.onload = e => {\r\n                let data = e.target.result;\r\n                let workbook = XLSX.read(data, {\r\n                    type: 'binary',\r\n                    cellStyles: true\r\n                });\r\n                let number = 0;\r\n                const numberOfSheets = workbook.SheetNames.length;\r\n                if (numberOfSheets > 1) {\r\n                    number = prompt(\r\n                        'Please choose the number of the sheet that you want to upload (1 - ' + numberOfSheets + ')'\r\n                    );\r\n                    if (number === null) {\r\n                        $('#source_data_files_sidebar ._cancel').click();\r\n                    }\r\n\r\n                    number--;\r\n                }\r\n\r\n                let sheet;\r\n                sheet = workbook.Sheets[workbook.SheetNames[number]];\r\n\r\n                resolve(sheet);\r\n            };\r\n\r\n            reader.readAsBinaryString(f);\r\n        });\r\n    }\r\n\r\n    getItemsSource(sheet) {\r\n        let itemsSource = [];\r\n        let range = XLSX.utils.decode_range(sheet['!ref']);\r\n        let startColumn = 0;\r\n        let endColumn = range.e.c;\r\n        let startRow = 0;\r\n        let endRow = range.e.r;\r\n        const dateFormats = [moment.ISO_8601, 'MMM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'];\r\n\r\n        // Load cells one by one.\r\n        for (let column = startColumn; column <= endColumn; column++) {\r\n            let index = 0;\r\n\r\n            for (let row = startRow; row <= endRow; row++) {\r\n                if (itemsSource[index] == null) {\r\n                    itemsSource[index] = [];\r\n                }\r\n\r\n                let key = XLSX.utils.encode_cell({\r\n                    c: column,\r\n                    r: row\r\n                });\r\n\r\n                if (sheet[key]) {\r\n                    let cellValue = sheet[key].v;\r\n\r\n                    // Check if valid date.\r\n                    if (moment(sheet[key].w, dateFormats, true).isValid()) {\r\n                        cellValue = sheet[key].w;\r\n                    }\r\n\r\n                    // Check if percentage.\r\n                    if (sheet[key].w) {\r\n                        let cellString = sheet[key].w.slice(0, sheet[key].w.length);\r\n                        cellString = cellString.replace(/ /g, '');\r\n                        if (cellString[cellString.length - 1] === '%') {\r\n                            cellValue = cellString;\r\n                        }\r\n                    }\r\n\r\n                    if (cellValue !== null && cellValue !== undefined) {\r\n                        itemsSource[index].push(cellValue);\r\n                    } else {\r\n                        itemsSource[index].push('');\r\n                    }\r\n                } else {\r\n                    itemsSource[index].push('');\r\n                }\r\n\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return itemsSource;\r\n    }\r\n\r\n    addSourceFile(file, itemsSource) {\r\n        let thisProject = storageService.getCurrentProject();\r\n\r\n        const project = thisProject == null ? new Project() : thisProject;\r\n\r\n        const sourceFile = new SourceFile();\r\n        sourceFile.name = file.name;\r\n        sourceFile.itemsSource = itemsSource;\r\n        sourceFile.formDimensions = project.getDimensions().reduce((a, dimension) => {\r\n            if (dimension.slug !== 'value') {\r\n                a.push(dimension.slug);\r\n            }\r\n\r\n            return a;\r\n        }, []);\r\n        const uuid = common.getNextUuid();\r\n        sourceFile.uuid = uuid;\r\n        project.sourceFiles[uuid] = sourceFile;\r\n        let projectKey = localStorage.getItem('current_project_key');\r\n        localStorage.setItem('currentFileID', uuid);\r\n        if (thisProject == null) localStorage.setItem(projectKey, JSON.stringify(project));\r\n        else storageService.saveCurrentProject();\r\n\r\n        return sourceFile;\r\n    }\r\n\r\n    async ingestViaBackend(file, sourceFile) {\r\n        const data = await backendFileWorkflowService.uploadExcelFile(file);\r\n        if (!data) {\r\n            return;\r\n        }\r\n\r\n        const project = storageService.getCurrentProject() == null ? new Project() : storageService.getCurrentProject();\r\n        //const project = storageService.getCurrentProject();\r\n\r\n        data['labels'].forEach(data => {\r\n            const coord = XLSX.utils.decode_cell(data.coord);\r\n            const cell = sourceFile.getSingleCellProperties(coord.r, coord.c);\r\n            cell.cellType = 'label';\r\n            cell.range = data.range;\r\n\r\n            const dimensionSlug = get(data, 'dimensions[0].SLUG');\r\n            if (dimensionSlug) {\r\n                const dimensionLabel = project.getDimensionBySlug(dimensionSlug).label;\r\n                cell.labelDimension = [dimensionLabel];\r\n            }\r\n        });\r\n\r\n        data['Data'].forEach(data => {\r\n            const coord = XLSX.utils.decode_cell(data.coord);\r\n            const cell = sourceFile.getSingleCellProperties(coord.r, coord.c);\r\n            cell.cellType = 'data';\r\n            data.dimensions.forEach(dimension => {\r\n                cell[dimension.SLUG] = dimension.VALUE;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const importXlsxService = new ImportXlsxService();\r\n","class KeyboardService {\r\n    constructor() {\r\n        this.ctrlDown = false;\r\n        this.shiftDown = false;\r\n        this.ctrlKey = 17;\r\n        this.shiftKey = 16;\r\n        this.cmdKey = 91;\r\n        this.vKey = 86;\r\n        this.cKey = 67;\r\n\r\n        $(document).keydown((e) => {\r\n            if (e.keyCode === this.ctrlKey || e.keyCode === this.cmdKey) {\r\n                this.ctrlDown = true;\r\n            }\r\n\r\n            if (e.keyCode === this.shiftKey) {\r\n                this.shiftDown = true;\r\n            }\r\n        });\r\n\r\n        $(document).keyup((e) => {\r\n            if (e.keyCode === this.ctrlKey || e.keyCode === this.cmdKey) {\r\n                this.ctrlDown = false;\r\n            }\r\n\r\n            if (e.keyCode === this.shiftKey) {\r\n                this.shiftDown = false;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const keyboardService = new KeyboardService();","import get from 'lodash/get';\r\nimport { storageService } from './StorageService';\r\n\r\nclass SourceFilesService {\r\n    constructor() {\r\n        this.currentUuid = null;\r\n    }\r\n\r\n    /**\r\n     * @returns {SourceFile}\r\n     */\r\n    getCurrentSourceFile() {\r\n        return get(storageService, `currentProject.sourceFiles[${this.currentUuid}]`);\r\n    }\r\n\r\n    applyDimensionToRange(range, dimension, value, columnDefs) {\r\n        if (!range || !dimension) {\r\n            return;\r\n        }\r\n        const dimensionObject = columnDefs.filter(obj => {\r\n            return obj.label === dimension;\r\n        });\r\n\r\n        const sourceFile = this.getCurrentSourceFile();\r\n        const rangeObject = XLSX.utils.decode_range(range);\r\n\r\n        // Apply new value to each cell in range.\r\n        for (let row = rangeObject.s.r; row <= rangeObject.e.r; row++) {\r\n            for (let col = rangeObject.s.c; col <= rangeObject.e.c; col++) {\r\n                const properties = sourceFile.getSingleCellProperties(row, col);\r\n                properties[dimensionObject[0].slug] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    applyDimensions(properties, columnDefs) {\r\n        if (!(properties && properties.labelDimension)) {\r\n            return;\r\n        }\r\n\r\n        properties.labelDimension.map((dimension, index) => {\r\n            const overwrittenValue = get(properties, `overwriteValue[${index}]`, '');\r\n            const value = overwrittenValue !== '' ? overwrittenValue : properties.value;\r\n\r\n            sourceFilesService.applyDimensionToRange(properties.range, dimension, value, columnDefs);\r\n        });\r\n    }\r\n}\r\n\r\nexport const sourceFilesService = new SourceFilesService();\r\n","import { common } from '../Common';\r\nimport { Project } from '../entities/Project';\r\nimport { dataExplorerAnalyses } from '../tabs/data-explorer/DataExplorerAnalyses';\r\nimport { dataExplorerStorage } from '../tabs/data-explorer/DataExplorerStorage';\r\nimport { databaseView } from '../tabs/DatabaseView';\r\nimport { dropbox } from '../tabs/dropbox/Dropbox';\r\nimport { projectSetup } from '../tabs/project-setup/ProjectSetup';\r\nimport { sourceData } from '../tabs/source-data/SourceData';\r\n\r\nclass StorageService {\r\n    constructor() {\r\n        this.CURRENT_PROJECT_KEY = 'current_project_key';\r\n        this.CURRENT_TAB_KEY = 'current_tab';\r\n        this.DATA_COCKPIT_COLUMNS_KEY = 'data_cockpit_columns';\r\n\r\n        this.keyPrefix = 'project_';\r\n\r\n        /** @type {Project} */\r\n        this.currentProject = null;\r\n\r\n        this.currentProjectKey = null;\r\n    }\r\n\r\n    getDefaultProjectKey() {\r\n        return localStorage.getItem(this.CURRENT_PROJECT_KEY);\r\n    }\r\n\r\n    setDefaultProjectKey(key) {\r\n        localStorage.setItem(this.CURRENT_PROJECT_KEY, key);\r\n    }\r\n\r\n    /** @type {Project} */\r\n    getCurrentProject() {\r\n        return this.currentProject;\r\n    }\r\n\r\n    getCurrentDataPoints() {\r\n        return this.currentProject.dataPoints;\r\n    }\r\n\r\n    /**\r\n     * Get projects as key-name pairs.\r\n     * @returns {Object}\r\n     */\r\n    getAllProjects() {\r\n        let keys = Object.keys(localStorage);\r\n        let dbs = {};\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let key = keys[i];\r\n\r\n            // Check if prefix matches.\r\n            if (typeof key !== 'string' || key.indexOf(this.keyPrefix) !== 0) {\r\n                continue;\r\n            }\r\n\r\n            let db = this.getProject(key);\r\n\r\n            dbs[key] = db.name;\r\n        }\r\n\r\n        return dbs;\r\n    }\r\n\r\n    getAllProjectsSorted() {\r\n        let dbs = this.getAllProjects();\r\n        let sorted = [];\r\n\r\n        for (let i in dbs) {\r\n            sorted.push({\r\n                key: i,\r\n                name: dbs[i]\r\n            });\r\n        }\r\n\r\n        sorted.sort((a, b) => {\r\n            if (a.name < b.name) {\r\n                return -1;\r\n            }\r\n            if (a.name > b.name) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sorted;\r\n    }\r\n\r\n    /**\r\n     * Create a new project and return its key.\r\n     */\r\n    addProject(project) {\r\n        let key = this.keyPrefix + common.getNextUuid();\r\n        localStorage.setItem(key, JSON.stringify(project));\r\n\r\n        return key;\r\n    }\r\n\r\n    getProject(key) {\r\n        let data = localStorage.getItem(key);\r\n\r\n        if (data) {\r\n            data = JSON.parse(data);\r\n        }\r\n\r\n        return new Project(data);\r\n    }\r\n\r\n    setProject(key, project) {\r\n        localStorage.setItem(key, JSON.stringify(project));\r\n    }\r\n\r\n    setCurrentProject(key) {\r\n        let project = this.getProject(key);\r\n\r\n        if (project) {\r\n            localStorage.setItem('currentProject', JSON.stringify(project));\r\n            this.currentProject = project;\r\n            this.currentProjectKey = key;\r\n            this.setDefaultProjectKey(key);\r\n            this.syncViews();\r\n        }\r\n    }\r\n\r\n    syncViews(onlyIfDirty) {\r\n        console.log('syncViews');\r\n        sourceData.syncIfVisible(onlyIfDirty);\r\n        dataExplorerAnalyses.syncIfVisible(onlyIfDirty);\r\n        projectSetup.syncIfVisible(onlyIfDirty);\r\n        dropbox.syncIfVisible(onlyIfDirty);\r\n        databaseView.syncWithDatabase();\r\n        dataExplorerStorage.load();\r\n    }\r\n\r\n    loadDefaultProjects() {\r\n        let key = this.getDefaultProjectKey();\r\n\r\n        if (!key) {\r\n            // this.addProject(sampleProject.getNewProject());\r\n\r\n            //key = this.addProject(maxGroupProject.getNewProject());\r\n            this.setDefaultProjectKey(key);\r\n        }\r\n\r\n        this.setCurrentProject(key);\r\n    }\r\n\r\n    saveCurrentProject(projectKey, project) {\r\n        this.setProject(projectKey, project);\r\n    }\r\n    saveCurrentProject() {\r\n        this.setProject(this.currentProjectKey, this.currentProject);\r\n    }\r\n\r\n    removeCurrentProject() {\r\n        localStorage.removeItem(this.currentProjectKey);\r\n\r\n        // Set another project as default.\r\n        let dbs = this.getAllProjects();\r\n        for (let key in dbs) {\r\n            this.setCurrentProject(key);\r\n            return;\r\n        }\r\n\r\n        // No other project? Load the default one.\r\n        localStorage.removeItem(this.CURRENT_PROJECT_KEY);\r\n        this.loadDefaultProjects();\r\n    }\r\n\r\n    setCurrentTab(tab) {\r\n        localStorage.setItem(this.CURRENT_TAB_KEY, tab);\r\n    }\r\n\r\n    getCurrentTab() {\r\n        return localStorage.getItem(this.CURRENT_TAB_KEY);\r\n    }\r\n\r\n    get(key) {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(key));\r\n        } catch (e) {}\r\n\r\n        return null;\r\n    }\r\n\r\n    set(key, value) {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n}\r\n\r\nexport const storageService = new StorageService();\r\n","import { Project } from '../entities/Project';\r\nimport { storageService } from '../services/StorageService';\r\n\r\nclass DatabaseView {\r\n    constructor() {\r\n        this.table = null;\r\n        this.columns = null;\r\n    }\r\n\r\n    init() {\r\n        $('#current_database').on('change', function() {\r\n            storageService.setCurrentProject($(this).val());\r\n        });\r\n\r\n        $('#add_new_database').on('click', function() {\r\n            let title = prompt('Enter a name for the new database');\r\n            if (!title) {\r\n                return;\r\n            }\r\n\r\n            let project = new Project();\r\n            project.name = title;\r\n\r\n            const key = storageService.addProject(project);\r\n            storageService.setCurrentProject(key);\r\n        });\r\n\r\n        $('#remove_current_database').on('click', function() {\r\n            if (!confirm('Are you sure you want to remove the current database?')) {\r\n                return;\r\n            }\r\n\r\n            storageService.removeCurrentProject();\r\n        });\r\n\r\n        $('#reset_everything').on('click', function() {\r\n            if (\r\n                !confirm(\r\n                    'Are you sure you want to reset everything to its initial state? This includes all datasets and data structures.'\r\n                )\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            Object.keys(storageService.getAllProjects()).forEach(() => {\r\n                storageService.removeCurrentProject();\r\n            });\r\n        });\r\n    }\r\n\r\n    syncWithDatabase() {\r\n        if (storageService.getCurrentTab() !== '#database_view') {\r\n            return;\r\n        }\r\n\r\n        // Database control\r\n        {\r\n            let currentProject = $('#current_database');\r\n            let dbs = storageService.getAllProjects();\r\n\r\n            // Remove existing options.\r\n            currentProject.find('option').remove();\r\n\r\n            // Add new options.\r\n            for (let i in dbs) {\r\n                let option = $('<option value=\"' + i + '\">' + dbs[i] + '</option>');\r\n\r\n                if (i === storageService.getDefaultProjectKey()) {\r\n                    option.attr('selected', '');\r\n                }\r\n\r\n                currentProject.append(option);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const databaseView = new DatabaseView();\r\n","import { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { DataExplorerCellFormulas } from './DataExplorerCellFormulas';\r\nimport { dataExplorerFormulas } from './DataExplorerFormulas';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\nimport { dataExplorerImport } from './DataExplorerImport';\r\nimport { dataExplorerRenderChart } from './DataExplorerRenderChart';\r\nimport { dataExplorerSecondarySidebar } from './DataExplorerSecondarySidebar';\r\nimport { dataExplorerSections } from './DataExplorerSections';\r\nimport { dataExplorerSidebar } from './DataExplorerSidebar';\r\nimport { dataExplorerStorage } from './DataExplorerStorage';\r\nimport { dataExplorerTemplate } from './DataExplorerTemplate';\r\nimport { dataExplorerVirtualTable } from './DataExplorerVirtualTable';\r\n\r\nclass DataExplorer {\r\n    constructor() {\r\n        this.table = null;\r\n        this.columnSequence = 1;\r\n        this.rowSequence = 1;\r\n        this.dataExplorerCellFormulas = new DataExplorerCellFormulas();\r\n        this.SET_ROW = 'row';\r\n        this.SET_COLUMN = 'column';\r\n    }\r\n\r\n    getNextInSequence(set) {\r\n        switch (set) {\r\n            case this.SET_ROW:\r\n                return 'R' + this.rowSequence++;\r\n\r\n            case this.SET_COLUMN:\r\n                return 'C' + this.columnSequence++;\r\n        }\r\n    }\r\n\r\n    addFilter(item, set) {\r\n        let section = dataExplorerSections.addFilterSection(\r\n            $('.item-group[data-set=\"' + set + '\"]'),\r\n            item,\r\n            this.getNextInSequence(set)\r\n        );\r\n\r\n        if (item instanceof jQuery) {\r\n            // Add item inside the filter section.\r\n            item = item.clone();\r\n            item.find('._id').remove();\r\n            section.find('._filters').append(item);\r\n        }\r\n\r\n        return section;\r\n    }\r\n\r\n    addFormula(formula, set) {\r\n        return dataExplorerFormulas.addFormulaSection(\r\n            $('.item-group[data-set=\"' + set + '\"]'),\r\n            this.getNextInSequence(set),\r\n            formula\r\n        );\r\n    }\r\n\r\n    init() {\r\n        // Create this in order to drag-n-drop items back to the Available box.\r\n        Sortable.create(\r\n            available_box,\r\n            $.extend({}, dataExplorerHelper.sortableArgs, {\r\n                sort: false,\r\n                onAdd: function(evt) {\r\n                    $(evt.item).remove();\r\n                },\r\n                handle: '.non-existent-class',\r\n                filter: '.remove-filter'\r\n            })\r\n        );\r\n\r\n        // Global filters.\r\n        Sortable.create(\r\n            filter_box_a1,\r\n            $.extend({}, dataExplorerHelper.sortableArgs, {\r\n                sort: false,\r\n                filter: '.remove-filter'\r\n            })\r\n        );\r\n        Sortable.create(\r\n            filter_box_headline,\r\n            $.extend({}, dataExplorerHelper.sortableArgs, {\r\n                sort: false,\r\n                filter: '.remove-filter'\r\n            })\r\n        );\r\n        Sortable.create(\r\n            filter_box_hidden,\r\n            $.extend({}, dataExplorerHelper.sortableArgs, {\r\n                sort: false,\r\n                filter: '.remove-filter'\r\n            })\r\n        );\r\n\r\n        Sortable.create(\r\n            row_box,\r\n            $.extend({}, dataExplorerHelper.sortableArgs, {\r\n                onAdd: evt => {\r\n                    let item = $(evt.item);\r\n                    let section3;\r\n\r\n                    switch (evt.item.attributes[2].value) {\r\n                        case 'Margin':\r\n                            section3 = dataExplorerSections.addMarginRow();\r\n                            break;\r\n\r\n                        case 'Custom Formula':\r\n                            section3 = dataExplorer.addFormula('', this.SET_ROW);\r\n                            break;\r\n\r\n                        case 'Blank':\r\n                            section3 = dataExplorer.addFilter(item, this.SET_ROW);\r\n                            section3.attr('data-value', 'Blank');\r\n                            break;\r\n\r\n                        default:\r\n                            section3 = dataExplorer.addFilter(item, this.SET_ROW);\r\n                            break;\r\n                    }\r\n\r\n                    section3.insertAfter(item);\r\n                    item.remove();\r\n                },\r\n                filter: '.remove-filter, ._prevent-sort'\r\n            })\r\n        );\r\n        Sortable.create(\r\n            column_box,\r\n            $.extend({}, dataExplorerHelper.sortableArgs, {\r\n                onAdd: evt => {\r\n                    let item = $(evt.item);\r\n                    let section2;\r\n\r\n                    switch (evt.item.attributes[2].value) {\r\n                        case 'Delta':\r\n                            section2 = dataExplorerSections.addYoyColumn();\r\n                            break;\r\n                        case 'YoY':\r\n                            section2 = dataExplorerSections.addYoyColumn(null, null, true);\r\n                            break;\r\n                        case 'CAGR':\r\n                            section2 = dataExplorerSections.addCagrColumn();\r\n                            break;\r\n                        case 'Custom Formula':\r\n                            section2 = dataExplorer.addFormula('', this.SET_COLUMN);\r\n                            break;\r\n                        case 'Blank':\r\n                            section2 = dataExplorer.addFilter(item, this.SET_COLUMN);\r\n                            section2.attr('data-value', 'Blank');\r\n                            break;\r\n                        default:\r\n                            section2 = dataExplorer.addFilter(item, this.SET_COLUMN);\r\n                            break;\r\n                    }\r\n                    section2.insertAfter(item);\r\n                    item.remove();\r\n                },\r\n                filter: '.remove-filter, ._prevent-sort'\r\n            })\r\n        );\r\n\r\n        dataExplorerSecondarySidebar.init();\r\n\r\n        // Events\r\n        $('#scale').on('change', function() {\r\n            dataExplorerStorage.save(dataExplorerAnalyses.currentAnalysisId);\r\n            dataExplorerVirtualTable.updateTable();\r\n        });\r\n\r\n        $('._outputMode input').on('change', function() {\r\n            if (!$(this).prop('checked')) {\r\n                return;\r\n            }\r\n\r\n            dataExplorerRenderChart.outputMode = $(this).val();\r\n\r\n            switch (dataExplorerRenderChart.outputMode) {\r\n                case 'table':\r\n                    $('#pivot_wrapper').show();\r\n                    $('#outputChart').hide();\r\n                    $('.chart-related-data').hide();\r\n                    break;\r\n\r\n                case 'chart':\r\n                    $('#pivot_wrapper').hide();\r\n                    $('#outputChart').show();\r\n                    $('.chart-related-data').show();\r\n                    break;\r\n            }\r\n\r\n            dataExplorerVirtualTable.renderOutputTableOrChart();\r\n        });\r\n\r\n        $('._chartMode input').on('change', function() {\r\n            if (!$(this).prop('checked')) {\r\n                return;\r\n            }\r\n\r\n            dataExplorerRenderChart.chartMode = $(this).val();\r\n\r\n            dataExplorerVirtualTable.renderOutputTableOrChart();\r\n        });\r\n\r\n        $('._chartStackingMode input').on('change', function() {\r\n            if (!$(this).prop('checked')) {\r\n                return;\r\n            }\r\n\r\n            dataExplorerRenderChart.chartStackingMode = $(this).val();\r\n\r\n            dataExplorerVirtualTable.renderOutputTableOrChart();\r\n        });\r\n\r\n        // Trigger template loading.\r\n        $('#exampleFormControlSelect1').on('change', e => {\r\n            dataExplorerTemplate.loadTemplate(\r\n                parseInt(\r\n                    $(e.target)\r\n                        .find(':selected')\r\n                        .attr('data-source-template')\r\n                ) - 1\r\n            );\r\n        });\r\n\r\n        $('.main_sidebar').on('click', e => {\r\n            let target = $(e.target);\r\n            let className = target.attr('class');\r\n\r\n            if (className === undefined) {\r\n                return;\r\n            }\r\n\r\n            let result = target.hasClass('remove-filter');\r\n\r\n            if (result) {\r\n                if (target.parent().hasClass('global-filter')) {\r\n                    target.parent().remove();\r\n                } else {\r\n                    let card = target.closest('.item-with-filters');\r\n                    target.closest('li.item').remove();\r\n                    dataExplorerSections.syncTitle(card);\r\n                }\r\n\r\n                dataExplorerHelper.saveAndUpdate();\r\n            }\r\n        });\r\n\r\n        dataExplorerSections.init();\r\n        dataExplorerSidebar.init();\r\n        dataExplorerImport.init();\r\n    }\r\n}\r\n\r\nexport const dataExplorer = new DataExplorer();\r\n","import { get } from 'lodash';\r\nimport { common } from '../../Common';\r\nimport { DataExplorerAnalysis } from '../../entities/DataExplorerAnalysis';\r\nimport { resizableDivider } from '../../ResizableDivider';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { Tab } from '../../Tab';\r\nimport { dataExplorer } from './DataExplorer';\r\nimport { dataExplorerImport } from './DataExplorerImport';\r\nimport { dataExplorerStorage } from './DataExplorerStorage';\r\nimport { dataExplorerRenderTable } from './table/DataExplorerRenderTable';\r\n\r\nclass DataExplorerAnalyses extends Tab {\r\n    constructor() {\r\n        super();\r\n        this.tabHref = '#output_table';\r\n        this.currentAnalysisId = 0;\r\n    }\r\n\r\n    init() {\r\n        dataExplorer.init();\r\n\r\n        // Hide single analysis div.\r\n        $('#single_analysis').css('display', 'none');\r\n\r\n        // Display all analyses.\r\n        this.displayAnalyses();\r\n        $(document).on('click', '#analyses_list ._analyses-list ._analysis', e => this.loadAnalysis(e));\r\n\r\n        $('#single_analysis ._back-to-list').on('click', () => this.backToList());\r\n\r\n        $('#analyses_list ._add-analysis').on('click', () => this.addNewAnalysis());\r\n\r\n        $('#single_analysis ._edit-mode-switch input').on('change', () => this.toggleEditMode());\r\n        $('#single_analysis ._split-screen-mode-switch input').on('change', () => this.toggleSplitScreenMode());\r\n\r\n        $(document).on('click', '#data_explorer_imported_table ._file-tab ', e => this.switchTab(e));\r\n    }\r\n\r\n    sync() {\r\n        this.displayAnalyses();\r\n    }\r\n\r\n    switchTab(e) {\r\n        const uuid = $(e.target).data('uuid');\r\n        if (uuid === dataExplorerImport.uuid) {\r\n            return;\r\n        }\r\n\r\n        dataExplorerImport.uuid = uuid;\r\n        $('.main-content #data_explorer_imported_table').remove();\r\n        dataExplorerImport.splitScreen();\r\n        dataExplorerImport.createRightTable(uuid);\r\n        dataExplorerImport.refreshFilesTabs();\r\n    }\r\n\r\n    toggleSplitScreenMode() {\r\n        const checked = $('#single_analysis ._split-screen-mode-switch input').is(':checked');\r\n        if (checked) {\r\n            dataExplorerImport.splitScreen();\r\n\r\n            resizableDivider.enableResizable(\r\n                '.main-content > .tab-content',\r\n                '#data_explorer_imported_table',\r\n                'width',\r\n                { handles: 'e' },\r\n                { minWidth: 700, maxWidth: 1200 },\r\n                () => {\r\n                    dataExplorerRenderTable.updateTable();\r\n                }\r\n            );\r\n\r\n            const dataExplorerAnalysis = storageService.getCurrentProject().analyses[\r\n                dataExplorerAnalyses.currentAnalysisId\r\n            ];\r\n            if (dataExplorerAnalysis.dropboxFiles.length) {\r\n                const uuid = dataExplorerAnalysis.dropboxFiles[0];\r\n                dataExplorerImport.uuid = uuid;\r\n                dataExplorerImport.createRightTable(uuid);\r\n            }\r\n\r\n            dataExplorerImport.refreshFilesTabs();\r\n        } else {\r\n            resizableDivider.resetResizable('.main-content > .tab-content', () => {\r\n                dataExplorerRenderTable.updateTable();\r\n            });\r\n\r\n            dataExplorerImport.cancelImport();\r\n        }\r\n    }\r\n\r\n    toggleEditMode() {\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            dataExplorerRenderTable.flexgrid.isReadOnly = !$('#single_analysis ._edit-mode-switch input').is(\r\n                ':checked'\r\n            );\r\n    }\r\n\r\n    loadAnalysis(e) {\r\n        $('#analyses_list').css('display', 'none');\r\n        $('#single_analysis').css('display', '');\r\n        this.currentAnalysisId = $(e.currentTarget).data('id');\r\n        $('#single_analysis ._analysis-title h3').text(\r\n            storageService.getCurrentProject().analyses[this.currentAnalysisId].name\r\n        );\r\n\r\n        $('._outputMode input[value=table]')\r\n            .prop('checked', true)\r\n            .trigger('change');\r\n        dataExplorerStorage.load();\r\n    }\r\n\r\n    addNewAnalysis() {\r\n        const analysisName = prompt('Please enter the name of the analysis: ');\r\n        if (analysisName === null) {\r\n            return;\r\n        }\r\n\r\n        const analysisId = storageService.getCurrentProject().analyses.length;\r\n        const newAnalysis = new DataExplorerAnalysis({\r\n            id: analysisId,\r\n            name: analysisName\r\n        });\r\n        storageService.getCurrentProject().analyses.push(newAnalysis);\r\n\r\n        // Save project.\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    backToList() {\r\n        $('#analyses_list').css('display', '');\r\n        $('#single_analysis').css('display', 'none');\r\n\r\n        $('#single_analysis ._edit-mode-switch input').prop('checked', false);\r\n        $('#single_analysis ._split-screen-mode-switch input').prop('checked', false);\r\n        if (!localStorage.getItem('blobExcelData')) dataExplorerRenderTable.flexgrid.isReadOnly = true;\r\n\r\n        dataExplorerImport.cancelImport();\r\n    }\r\n\r\n    displayAnalyses() {\r\n        common.showFakeLoading(() => {\r\n            const project = storageService.getCurrentProject();\r\n            const analyses = get(project, 'analyses', false);\r\n            if (!analyses) {\r\n                return;\r\n            }\r\n\r\n            $('#analyses_list ._analyses-list').empty();\r\n            analyses.map(analysis => {\r\n                $('#analyses_list ._analyses-list').append(\r\n                    '<div class=\"_analysis\" data-id=\"' + analysis.id + '\">' + analysis.name + '</div>'\r\n                );\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const dataExplorerAnalyses = new DataExplorerAnalyses();\r\n","import { common } from '../../Common';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\n\r\nexport class DataExplorerAttributesTree {\r\n    constructor(dimensionSlug) {\r\n        this.dimensionSlug = dimensionSlug;\r\n    }\r\n\r\n    init() {\r\n        this.slugToAttrs = {};\r\n    }\r\n\r\n    load(tree) {\r\n        this.container = tree;\r\n\r\n        const project = storageService.getCurrentProject();\r\n        let dataset = storageService.getCurrentDataPoints();\r\n        let attributes = common.getUniqueValues(dataset, this.dimensionSlug);\r\n\r\n        // Get attributes.\r\n        this.slugToAttrs = {};\r\n        attributes.forEach(attr => {\r\n            let slug = attr;\r\n\r\n            this.slugToAttrs[slug] = {\r\n                label: attr,\r\n                slug: slug,\r\n                parentSlug: null,\r\n                open: false,\r\n                hasChildren: false\r\n            };\r\n        });\r\n\r\n        // Get parents.\r\n        // TODO\r\n        const dataStructures = project.getDataStructuresForDimension(this.dimensionSlug);\r\n        for (const attribute in dataStructures) {\r\n            const ds = dataStructures[attribute];\r\n            const rightSlug = ds.attribute;\r\n            const leftSlug = ds.parentAttribute;\r\n\r\n            if (!(leftSlug in this.slugToAttrs) || !(rightSlug in this.slugToAttrs)) {\r\n                continue;\r\n            }\r\n\r\n            // Was the other parent a better match?\r\n            if (\r\n                this.slugToAttrs[rightSlug].parentSlug !== null &&\r\n                rightSlug.indexOf(this.slugToAttrs[rightSlug].parentSlug) !== -1\r\n            ) {\r\n                continue;\r\n            }\r\n\r\n            this.slugToAttrs[leftSlug].hasChildren = true;\r\n            this.slugToAttrs[rightSlug].parentSlug = leftSlug;\r\n        }\r\n\r\n        this.render();\r\n    }\r\n\r\n    render(parentSlug, parentElement) {\r\n        let attrs = [];\r\n\r\n        if (typeof parentSlug === 'undefined') {\r\n            parentSlug = null;\r\n        }\r\n\r\n        // Get attrs.\r\n        for (let slug in this.slugToAttrs) {\r\n            let attr = this.slugToAttrs[slug];\r\n\r\n            if (attr.parentSlug !== parentSlug) {\r\n                continue;\r\n            }\r\n\r\n            attrs.push(attr);\r\n        }\r\n\r\n        // Get container.\r\n        let container;\r\n        if (parentSlug) {\r\n            container = parentElement;\r\n        } else {\r\n            container = this.container;\r\n            container.html('');\r\n        }\r\n\r\n        // Compose HTML.\r\n        attrs.forEach(attr => {\r\n            let button = $('<div class=\"_button\"></div>');\r\n            let item = dataExplorerHelper.createItem(null, 'filter', attr.label, this.dimensionSlug);\r\n            let ul = $('<ul></ul>').append(item);\r\n            let row = $('<div class=\"_row\"></div>').append(button, ul);\r\n            container.append(row);\r\n\r\n            // Button\r\n            button.addClass(attr.open ? '_open' : '_closed');\r\n            if (attr.hasChildren) {\r\n                button.addClass('_has-children');\r\n                button.html(\r\n                    attr.open\r\n                        ? '<i class=\"fa fa-minus-square-o\" aria-hidden=\"true\"></i>'\r\n                        : '<i class=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i>'\r\n                );\r\n                button.on('click', () => {\r\n                    attr.open = !attr.open;\r\n                    this.render();\r\n\r\n                    return false;\r\n                });\r\n            } else {\r\n                button.html('<i class=\"fa fa-square-o\" aria-hidden=\"true\"></i>');\r\n            }\r\n\r\n            // Sortable item\r\n            Sortable.create(ul[0], dataExplorerHelper.sortableArgsForAttrs, {\r\n                filter: '.remove-filter'\r\n            });\r\n\r\n            // Render children.\r\n            if (attr.open) {\r\n                let children = $('<div class=\"_children\"></div>');\r\n                this.render(attr.slug, children);\r\n                row.append(children);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { storageService } from '../../services/StorageService';\r\nimport { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { dataExplorerFormulas } from './DataExplorerFormulas';\r\nimport { dataExplorerStorage } from './DataExplorerStorage';\r\nimport { dataExplorerVirtualTable } from './DataExplorerVirtualTable';\r\n\r\nexport class DataExplorerCellFormulas {\r\n    constructor() {\r\n        this.selectedCellRow = null;\r\n        this.selectedCellColumn = null;\r\n        this.table = $('#pivot');\r\n        this.editor = $('#output_table ._formula-cell-editor');\r\n\r\n        this.editor.on('blur', e => {\r\n            const input = $(e.target);\r\n\r\n            // Skip?\r\n            if (input.prop('data-skip-blur')) {\r\n                input.prop('data-skip-blur', false);\r\n                return;\r\n            }\r\n\r\n            this.saveFormula();\r\n        });\r\n        this.editor.on('keydown', e => {\r\n            // Enter\r\n            if (e.keyCode === 13) {\r\n                this.saveFormula();\r\n\r\n                // Prevent adding a newline.\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        this.editor.on('click', 'i', e => {\r\n            dataExplorerFormulas.onInputBuilderClick(e);\r\n        });\r\n        $('#output_table ._formula-cell-editor-query').on('click', e => {\r\n            if (!this.editor.hasClass('_active')) {\r\n                return;\r\n            }\r\n\r\n            dataExplorerFormulas.onBuilderClick(this.editor, e);\r\n        });\r\n    }\r\n\r\n    saveFormula() {\r\n        // Parse input once more.\r\n        dataExplorerFormulas.parseFormulaInput(this.editor);\r\n\r\n        // Get formula.\r\n        let formula = this.editor.html();\r\n        if (formula.slice(0, 1) === '=') {\r\n            formula = '=' + this.editor.attr('data-formula');\r\n        }\r\n\r\n        // Check if this differs from old formula.\r\n        const dataExplorerAnalysis = storageService.getCurrentProject().analyses[\r\n            dataExplorerAnalyses.currentAnalysisId\r\n        ];\r\n        const cellData = dataExplorerAnalysis.getCellData(this.selectedCellRow, this.selectedCellColumn);\r\n        if (cellData.customFormula === formula) {\r\n            return;\r\n        }\r\n\r\n        // Set custom formula.\r\n        cellData.customFormula = formula;\r\n        dataExplorerAnalysis.setCellData(this.selectedCellRow, this.selectedCellColumn, cellData);\r\n\r\n        // Save table.\r\n        dataExplorerStorage.save(dataExplorerAnalyses.currentAnalysisId);\r\n\r\n        // Refresh table.\r\n        dataExplorerVirtualTable.updateTable();\r\n    }\r\n\r\n    // Event when clicking a cell.\r\n    onSelectionChanged(s, e) {\r\n        // Disable editor for ranges (multiple cells) or headers (first row/col).\r\n        if (e.range.isSingleCell === false || e.row === 0 || e.col === 0) {\r\n            this.editor.removeClass('_active');\r\n            this.editor.html('');\r\n            return;\r\n        }\r\n        const row = e.row - 1;\r\n        const col = e.col - 1;\r\n\r\n        // Show formula editor.\r\n        this.editor.addClass('_active');\r\n        const customFormula = storageService.currentProject.analyses[\r\n            dataExplorerAnalyses.currentAnalysisId\r\n        ].getCellData(row, col).customFormula;\r\n        this.editor.html(customFormula);\r\n        dataExplorerFormulas.parseFormulaInput(this.editor);\r\n\r\n        // Select cell.\r\n        this.selectedCellRow = row;\r\n        this.selectedCellColumn = col;\r\n    }\r\n}\r\n","import { VirtualTableCell } from '../../entities/VirtualTableCell';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorer } from './DataExplorer';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\n\r\nclass DataExplorerEval {\r\n    constructor() {\r\n        this.filters = {};\r\n\r\n        // The number of data-points that were matched in the last evaluated formula.\r\n        this.numberOfDataPoints = 0;\r\n\r\n        // The IDs of the data-points that were matched, per query, for the last evaluated formula.\r\n        this.dataPointIdsPerQuery = [];\r\n    }\r\n\r\n    evalColumnFormula(render, formula, filters, row) {\r\n        return this.evalFormula(render, formula, filters, row, null);\r\n    }\r\n\r\n    evalRowFormula(render, formula, filters, column) {\r\n        return this.evalFormula(render, formula, filters, null, column);\r\n    }\r\n\r\n    evalFormula(render, formula, filters, row, column) {\r\n        this.filters = filters;\r\n\r\n        if ((row !== null || column !== null) && !render.previousTableData) {\r\n            return null;\r\n        }\r\n\r\n        let start = null,\r\n            prefix,\r\n            tableIds;\r\n        if (row !== null) {\r\n            start = dataExplorer.columnSequence - 1;\r\n            prefix = 'C';\r\n            tableIds = render.tableIdsToColumns;\r\n        } else if (column !== null) {\r\n            start = dataExplorer.rowSequence - 1;\r\n            prefix = 'R';\r\n            tableIds = render.tableIdsToRows;\r\n        }\r\n\r\n        // Replace variables, if applicable.\r\n        let processedFormula = formula;\r\n        if (start !== null) {\r\n            // Replace variables in reverse order, so we don't replace C11 with C1's value for example.\r\n            for (let i = start; i >= 1; i--) {\r\n                let variable = prefix + i;\r\n\r\n                if (!(variable in tableIds)) {\r\n                    continue;\r\n                }\r\n\r\n                let index = tableIds[variable];\r\n                let value =\r\n                    row !== null ? render.previousTableData[row][index] : render.previousTableData[index][column];\r\n                let r = new RegExp(variable, 'g');\r\n\r\n                processedFormula = processedFormula.replace(r, ' ' + value + ' ');\r\n            }\r\n        }\r\n\r\n        // Evaluate formula.\r\n        this.numberOfDataPoints = 0;\r\n        this.dataPointIdsPerQuery = [];\r\n        let value;\r\n        try {\r\n            value = eval(processedFormula);\r\n        } catch (e) {\r\n            value = null;\r\n        }\r\n\r\n        // Don't show arrays or objects, that means formula is most probably invalid.\r\n        if (Array.isArray(value) || typeof value === 'object') {\r\n            value = '';\r\n        }\r\n\r\n        // Compose result.\r\n        const cellData = new VirtualTableCell();\r\n        cellData.value = value;\r\n        cellData.formula = formula;\r\n        cellData.numberOfDataPoints = this.numberOfDataPoints;\r\n        cellData.dataPointIdsPerQuery = this.dataPointIdsPerQuery;\r\n        if (this.dataPointIdsPerQuery.length === 1) {\r\n            cellData.dataPointIds = this.dataPointIdsPerQuery[0].ids;\r\n        }\r\n\r\n        return cellData;\r\n    }\r\n\r\n    parseArguments(args) {\r\n        if (args.length > 0 && Array.isArray(args[0])) {\r\n            if (args[0].length > 0) {\r\n                return args[0].map(dataPoint => dataPoint.value);\r\n            } else {\r\n                return [0];\r\n            }\r\n        }\r\n\r\n        return args;\r\n    }\r\n}\r\n\r\nexport const dataExplorerEval = new DataExplorerEval();\r\n\r\nfunction MIN() {\r\n    return Math.min.apply(null, dataExplorerEval.parseArguments(arguments));\r\n}\r\n\r\nfunction MAX() {\r\n    return Math.max.apply(null, dataExplorerEval.parseArguments(arguments));\r\n}\r\n\r\nfunction SUM() {\r\n    const args = dataExplorerEval.parseArguments(arguments);\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < args.length; i++) {\r\n        sum += args[i];\r\n    }\r\n\r\n    return sum;\r\n}\r\n\r\nfunction AVERAGE() {\r\n    const args = dataExplorerEval.parseArguments(arguments);\r\n    let sum = SUM.apply(null, args);\r\n\r\n    return sum / args.length;\r\n}\r\n\r\nfunction QUERY(filters) {\r\n    const allFilters = Object.assign({}, dataExplorerEval.filters, filters);\r\n    const dataPoints = storageService.getCurrentDataPoints();\r\n    const results = dataExplorerHelper.getMatchingDataPoints(dataPoints, allFilters);\r\n\r\n    // Save stats about matched data-points.\r\n    dataExplorerEval.numberOfDataPoints += results.length;\r\n    dataExplorerEval.dataPointIdsPerQuery.push({\r\n        filters: filters,\r\n        ids: results.map(dataPoint => dataPoint.id)\r\n    });\r\n\r\n    return results;\r\n}\r\n","import { dataExplorerHelper } from './DataExplorerHelper';\r\nimport { dataExplorerQueryBuilder } from './DataExplorerQueryBuilder';\r\nimport { dataExplorerSections } from './DataExplorerSections';\r\n\r\nclass DataExplorerFormulas {\r\n    addFormulaSection(container, id, formula) {\r\n        // Create generic section.\r\n        let section = dataExplorerSections.addSection('formula', container, 'Formula', id);\r\n        section.addClass('item-with-formula');\r\n\r\n        // Create formula input.\r\n        let input = $(\r\n            '<div contenteditable=\"true\" class=\"_formula _prevent-sort\" name=\"formula\" id=\"formula_input_' +\r\n                id +\r\n                '\" value=\"\">'\r\n        );\r\n        input.html(formula);\r\n        this.initInput(input);\r\n        section.append(input);\r\n\r\n        // Create query button.\r\n        let queryElement = $('<span class=\"_button _query\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span>');\r\n        queryElement.on('click', e => {\r\n            this.onBuilderClick(input, e);\r\n        });\r\n        section.append(queryElement);\r\n\r\n        return section;\r\n    }\r\n\r\n    initInput(input) {\r\n        this.parseFormulaInput(input);\r\n\r\n        input.on('blur', e => {\r\n            this.onInputBlur(e);\r\n        });\r\n        input.on('click', 'i', e => {\r\n            this.onInputBuilderClick(e);\r\n        });\r\n        input.on('keydown', e => {\r\n            this.onInputKeyDown(e);\r\n        });\r\n    }\r\n\r\n    onInputBlur(e) {\r\n        const input = $(e.target);\r\n\r\n        // Skip?\r\n        if (input.prop('data-skip-blur')) {\r\n            input.prop('data-skip-blur', false);\r\n            return;\r\n        }\r\n\r\n        this.parseFormulaInput(input);\r\n        dataExplorerHelper.saveAndUpdate();\r\n    }\r\n\r\n    onInputBuilderClick(e) {\r\n        const icon = $(e.target);\r\n        const input = $(e.delegateTarget);\r\n        let filters;\r\n        try {\r\n            filters = JSON.parse(icon.attr('data-args'));\r\n        } catch (e) {\r\n            filters = {};\r\n        }\r\n\r\n        // Skip next blur event.\r\n        input.prop('data-skip-blur', true);\r\n        dataExplorerQueryBuilder.open(filters, query => {\r\n            // Update formula.\r\n            query = query.slice(6, -1);\r\n            icon.attr('data-args', query);\r\n            this.parseFormulaInput(input);\r\n\r\n            if (!input.attr('data-equality-prefix')) {\r\n                dataExplorerHelper.saveAndUpdate();\r\n            } else {\r\n                input.trigger('blur');\r\n            }\r\n        });\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    onInputKeyDown(e) {\r\n        if (e.keyCode === 13) {\r\n            $(e.target).blur();\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    onBuilderClick(input, e) {\r\n        dataExplorerQueryBuilder.open({}, query => {\r\n            if (input.attr('data-equality-prefix')) {\r\n                input.html('=' + query);\r\n                this.parseFormulaInput(input);\r\n                input.trigger('blur');\r\n            } else {\r\n                input.html(query);\r\n                this.parseFormulaInput(input);\r\n                dataExplorerHelper.saveAndUpdate();\r\n            }\r\n        });\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    parseFormulaInput(input) {\r\n        if (input.attr('data-equality-prefix')) {\r\n            // Check if we need and have an equality prefix.\r\n            if (input.html().slice(0, 1) !== '=') {\r\n                return;\r\n            }\r\n\r\n            // Remove equality prefix.\r\n            input.html(input.html().slice(1));\r\n\r\n            this.parseFormulaInputWithoutPrefix(input);\r\n\r\n            // Add back equality prefix.\r\n            input.html('=' + input.html());\r\n        } else {\r\n            this.parseFormulaInputWithoutPrefix(input);\r\n        }\r\n    }\r\n\r\n    parseFormulaInputWithoutPrefix(input) {\r\n        // Do all of this twice. E.g. if user entered formula in lower-case,\r\n        // we need to do this twice to that the data-formula is properly converted to uppercase.\r\n        for (let i = 0; i < 2; i++) {\r\n            // Transform images back to formulas.\r\n            const inputClone = input.clone();\r\n            inputClone.find('[data-args]').each((index, element) => {\r\n                // Get original value.\r\n                const value = $(element).attr('data-args');\r\n\r\n                // Replace image.\r\n                $(element).replaceWith(value);\r\n            });\r\n\r\n            // Get formula.\r\n            let value = inputClone.text();\r\n            value = value.trim();\r\n            inputClone.remove();\r\n\r\n            // Parse formula.\r\n            input.attr('data-formula', value);\r\n            const result = this.convertFormulaToHtml(value);\r\n            input.html(result);\r\n        }\r\n    }\r\n\r\n    convertFormulaToHtml(formula) {\r\n        let rootNode;\r\n\r\n        // Parse using math.js.\r\n        try {\r\n            rootNode = math.parse(formula);\r\n        } catch (e) {\r\n            // Cannot parse, simply return the formula as-is.\r\n            return formula;\r\n        }\r\n\r\n        // Turn functions to uppercase.\r\n        rootNode = rootNode.transform(node => {\r\n            if (node.isFunctionNode && node.fn.isSymbolNode) {\r\n                return new math.expression.node.FunctionNode(node.fn.name.toUpperCase(), node.args);\r\n            } else {\r\n                return node;\r\n            }\r\n        });\r\n\r\n        // Transform to string.\r\n        const customString = {\r\n            QUERY: function(node, options) {\r\n                // Remove surrounding \"QUERY()\".\r\n                const args = node.toString().slice(6, -1);\r\n\r\n                // Create image.\r\n                const img = $('<i class=\"fa fa-flask\" aria-hidden=\"true\"></i>');\r\n                img.attr('data-args', args);\r\n\r\n                // Return string.\r\n                return 'QUERY(' + img[0].outerHTML + ')';\r\n            }\r\n        };\r\n        let newValue = rootNode.toString({\r\n            handler: customString,\r\n            lowerExp: -100,\r\n            upperExp: 100\r\n        });\r\n        if (typeof newValue !== 'string' || newValue === 'undefined') {\r\n            newValue = '';\r\n        }\r\n\r\n        return newValue;\r\n    }\r\n}\r\n\r\nexport const dataExplorerFormulas = new DataExplorerFormulas();\r\n","import { common } from '../../Common';\r\nimport { VirtualTableCell } from '../../entities/VirtualTableCell';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorer } from './DataExplorer';\r\nimport { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { dataExplorerSections } from './DataExplorerSections';\r\nimport { dataExplorerStorage } from './DataExplorerStorage';\r\nimport { dataExplorerVirtualTable } from './DataExplorerVirtualTable';\r\n\r\nclass DataExplorerHelper {\r\n    constructor() {\r\n        const dataExplorerHelper = this;\r\n\r\n        String.prototype.replaceBetween = function(start, end, what) {\r\n            return this.substring(0, start) + what + this.substring(end);\r\n        };\r\n\r\n        this.onStart = function(evt) {\r\n            let s = '.item-group:not(._filters)';\r\n\r\n            $(s).each(function() {\r\n                if (!dataExplorerHelper.doTypesMatch(evt.item, this)) {\r\n                    $(this).addClass('_disabled');\r\n                } else {\r\n                    $(this).removeClass('_disabled');\r\n                }\r\n            });\r\n        };\r\n\r\n        this.onEnd = function(evt) {\r\n            $('.item-group').removeClass('_disabled');\r\n            dataExplorerHelper.saveAndUpdate();\r\n        };\r\n\r\n        this.onMove = function(evt, originalEvent) {\r\n            // Check for matching box types.\r\n            if (!dataExplorerHelper.doTypesMatch(evt.dragged, evt.to)) {\r\n                return false;\r\n            }\r\n\r\n            // Check for duplicates in other filter sections.\r\n            if (\r\n                evt.to !== evt.from &&\r\n                $(evt.to).hasClass('_filters') &&\r\n                dataExplorerHelper.getMatchingFilters(evt.dragged, evt.to) > 0\r\n            ) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        this.onSort = function(evt) {\r\n            let container = $(evt.to);\r\n\r\n            if (container.attr('data-rows') === '') {\r\n                dataExplorerHelper.resetRowIds();\r\n            } else if (container.attr('data-columns') === '') {\r\n                dataExplorerHelper.resetColumnIds();\r\n            }\r\n\r\n            dataExplorerSections.syncTitle($(evt.to).closest('.row-or-column-card'));\r\n        };\r\n\r\n        this.onAdd = function(evt) {\r\n            dataExplorerSections.syncTitle($(evt.from).closest('.row-or-column-card'));\r\n            dataExplorerSections.syncTitle($(evt.to).closest('.row-or-column-card'));\r\n        };\r\n\r\n        this.sortableArgs = {\r\n            animation: 200,\r\n            group: 'attributes',\r\n            filter: '._filters, input, .modal, .remove-filter',\r\n            preventOnFilter: false,\r\n            onStart: this.onStart,\r\n            onEnd: this.onEnd,\r\n            onMove: this.onMove,\r\n            onSort: this.onSort,\r\n            onAdd: this.onAdd\r\n        };\r\n\r\n        this.sortableArgsForAttrs = $.extend({}, this.sortableArgs, {\r\n            group: {\r\n                name: 'attributes',\r\n                pull: 'clone',\r\n                put: true,\r\n                revertClone: true\r\n            },\r\n            animation: 0,\r\n            sort: false,\r\n            onAdd: function(evt) {\r\n                // Remove everything dropped here.\r\n                $(evt.item).remove();\r\n            },\r\n            filter: '.remove-filter'\r\n        });\r\n    }\r\n\r\n    isChartEnabledForItem(item) {\r\n        return (\r\n            $(item)\r\n                .find('._chart')\r\n                .attr('data-checked') === 'true'\r\n        );\r\n    }\r\n\r\n    isChartEnabledForColumn(index) {\r\n        return this.isChartEnabledForItem($('#column_box > .item:nth-child(' + index + ') '));\r\n    }\r\n\r\n    isChartEnabledForRow(index) {\r\n        return this.isChartEnabledForItem($('#row_box > .item:nth-child(' + index + ') '));\r\n    }\r\n\r\n    getFiltersFromDom(domFilters) {\r\n        let filtersByType = {};\r\n\r\n        // Group filters by type.\r\n        for (let i = 0; i < domFilters.length; i++) {\r\n            let element = $(domFilters[i]);\r\n            let value = element.attr('data-value');\r\n            let type = element.attr('data-filter-type');\r\n\r\n            if (!(type in filtersByType)) {\r\n                filtersByType[type] = [];\r\n            }\r\n\r\n            filtersByType[type].push(value);\r\n        }\r\n\r\n        return filtersByType;\r\n    }\r\n\r\n    checkFilters(dataPoint, filters) {\r\n        // Match filters.\r\n        for (let dimension in filters) {\r\n            let dimensionFilters = filters[dimension];\r\n            let matches = false;\r\n\r\n            if (typeof dimensionFilters === 'undefined') {\r\n                continue;\r\n            } else if (!Array.isArray(dimensionFilters)) {\r\n                dimensionFilters = [dimensionFilters];\r\n            }\r\n\r\n            // Match at least one filter per type.\r\n            for (let j = 0; j < dimensionFilters.length; j++) {\r\n                let value = dimensionFilters[j];\r\n\r\n                if (dataPoint[dimension] == value) {\r\n                    matches = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matches) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    getMatchingDataPoints(dataset, filters) {\r\n        let dataPoints = [];\r\n\r\n        dataset.forEach(dataPoint => {\r\n            // Check if filters match.\r\n            if (!this.checkFilters(dataPoint, filters)) {\r\n                return;\r\n            }\r\n\r\n            dataPoints.push(dataPoint);\r\n        });\r\n\r\n        return dataPoints;\r\n    }\r\n\r\n    /**\r\n     * Sum up values of all data points.\r\n     *\r\n     * @param {Array} dataPoints\r\n     * @param {boolean} sumOfMultiple If true, return a VirtualTableCell object;\r\n     * @returns {number|VirtualTableCell}\r\n     */\r\n    getSumOfDataPoints(dataPoints, sumOfMultiple = false) {\r\n        if (dataPoints.length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        let total = 0;\r\n        let dataPointIds = [];\r\n\r\n        // Group all data-points by non-empty dimensions.\r\n        const dimensions = storageService.getCurrentProject().getIdentityDimensions();\r\n        let sets = {};\r\n        dataPoints.forEach(dataPoint => {\r\n            // Get the set \"ID\". We use \"T\" (true) for each non-empty dimension, and \"F\" (false) for each empty dimesnsion.\r\n            let setId = '';\r\n            dimensions.forEach(dimension => {\r\n                if (dimension.slug in dataPoint && dataPoint[dimension.slug]) {\r\n                    setId += 'T';\r\n                } else {\r\n                    setId += 'F';\r\n                }\r\n            });\r\n\r\n            // Create set if it doesn't already exist.\r\n            if (!(setId in sets)) {\r\n                sets[setId] = [];\r\n            }\r\n\r\n            // Add data point to set.\r\n            sets[setId].push(dataPoint);\r\n        });\r\n\r\n        // Use the set with the smallest number of non-empty dimensions.\r\n        let setIds = Object.keys(sets);\r\n        setIds = setIds.sort((a, b) => {\r\n            return a.split('T').length - b.split('T').length;\r\n        });\r\n        dataPoints = sets[setIds[0]];\r\n\r\n        // Sum up data-points.\r\n        dataPoints.forEach(dataPoint => {\r\n            // Get scale.\r\n            let value = dataPoint['value'];\r\n            if ('scale' in dataPoint) {\r\n                value *= common.parseScale(dataPoint['scale']);\r\n            }\r\n\r\n            // Add value.\r\n            total += value;\r\n            dataPointIds.push(dataPoint.id);\r\n        });\r\n\r\n        // Save data about each particular data-point.\r\n        if (sumOfMultiple === true) {\r\n            const cellData = new VirtualTableCell();\r\n            cellData.value = total;\r\n            cellData.dataPointIds = dataPointIds;\r\n            cellData.numberOfDataPoints = dataPointIds.length;\r\n\r\n            return cellData;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    getMatchingFilters(item, container) {\r\n        let value = $(item).attr('data-value');\r\n        let matches = $(container).find('[data-value=\"' + value + '\"]');\r\n\r\n        return matches.length;\r\n    }\r\n\r\n    resetColumnIds() {\r\n        dataExplorer.columnSequence = dataExplorerHelper.resetBoxIds($('#column_box'), 'C');\r\n    }\r\n\r\n    resetRowIds() {\r\n        dataExplorer.rowSequence = dataExplorerHelper.resetBoxIds($('#row_box'), 'R');\r\n    }\r\n\r\n    resetBoxIds(container, prefix) {\r\n        let swapPrefix = '_tempswap';\r\n        let idElements = container.find('._id');\r\n        let originalIds = [];\r\n        let swapIds = [];\r\n        let newIds = [];\r\n        let counter = 1;\r\n\r\n        // Get IDs.\r\n        idElements.each(function() {\r\n            originalIds.push($(this).text());\r\n            swapIds.push(swapPrefix + counter);\r\n            newIds.push(prefix + counter);\r\n            counter++;\r\n        });\r\n\r\n        // Replace formulas.\r\n        this.replaceBoxFormulas(container, originalIds, swapIds);\r\n        this.replaceBoxFormulas(container, swapIds, newIds);\r\n\r\n        // Replace IDs.\r\n        for (let i = 0; i < newIds.length; i++) {\r\n            $(idElements[i]).text(newIds[i]);\r\n        }\r\n\r\n        return counter;\r\n    }\r\n\r\n    replaceBoxFormulas(container, needle, replacement) {\r\n        container.find('._formula').each(function() {\r\n            let $this = $(this);\r\n            let formula = $this.val();\r\n\r\n            for (let i = 0; i < needle.length; i++) {\r\n                formula = dataExplorerHelper.replaceFullWord(formula, needle[i], replacement[i]);\r\n            }\r\n\r\n            $this.val(formula);\r\n        });\r\n    }\r\n\r\n    // https://stackoverflow.com/a/27472191\r\n    replaceFullWord(haystack, needle, replacement) {\r\n        let regex = new RegExp('\\\\b' + needle + '\\\\b', 'g');\r\n\r\n        return haystack.replace(regex, replacement);\r\n    }\r\n\r\n    createId(id) {\r\n        let span = $('<span class=\"_button _id\" name=\"id\">' + id + '</span>');\r\n        //\r\n        // span.on('mousedown', function (e) {\r\n        //     // Is there a formula in focus?\r\n        //     let focused = $('._formula:focus');\r\n        //\r\n        //     if (focused.length > 0) {\r\n        //         focused.val(focused.val() + $(this).text());\r\n        //         dataExplorerHelper.saveAndUpdateDelayed();\r\n        //     }\r\n        //\r\n        //     e.preventDefault();\r\n        // });\r\n\r\n        return span;\r\n    }\r\n\r\n    createItem(id, dataType, value, filterName) {\r\n        let li = $('<li class=\"item\" data-type=\"' + dataType + '\" data-value=\"' + value + '\">' + value + '</li>');\r\n\r\n        if (id) {\r\n            li.append(dataExplorerHelper.createId(id));\r\n        }\r\n\r\n        if (typeof filterName !== 'undefined') {\r\n            li.attr('data-filter-type', filterName);\r\n        }\r\n\r\n        return li;\r\n    }\r\n\r\n    doTypesMatch(element, box) {\r\n        let elementType = $(element).attr('data-type');\r\n        let boxType = $(box).attr('data-type');\r\n\r\n        if (!elementType && ($(box).attr('data-columns') === '' || $(box).attr('data-rows') === '')) {\r\n            return true;\r\n        }\r\n\r\n        if (elementType === 'kpi' && boxType === 'filter') {\r\n            return true;\r\n        }\r\n\r\n        if (!(boxType === 'all' || elementType === boxType)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    saveAndUpdate() {\r\n        dataExplorerHelper.addFilterRemoveButton();\r\n        dataExplorerStorage.save(dataExplorerAnalyses.currentAnalysisId);\r\n        dataExplorerVirtualTable.updateTable();\r\n    }\r\n\r\n    saveAndUpdateDelayed() {\r\n        dataExplorerVirtualTable.updateTableDelayed();\r\n        dataExplorerStorage.saveDelayed();\r\n    }\r\n\r\n    addFilterRemoveButton() {\r\n        $('.main_sidebar')\r\n            .find('.item-with-filters .item-group .item, .global-filter-container .item[data-type=\"filter\"]')\r\n            .each(function() {\r\n                if ($(this).children('.remove-filter').length === 0) {\r\n                    $(this).append('<i class=\"fa fa-icon kpmg-icon-close remove-filter\"></i>');\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const dataExplorerHelper = new DataExplorerHelper();\r\n","import get from 'lodash/get';\r\nimport { resizableDivider } from '../../ResizableDivider';\r\nimport { importXlsxService } from '../../services/ImportXlsxService';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { dataExplorerCellEditing } from './table/DataExplorerCellEditing';\r\nimport { dataExplorerRenderTable } from './table/DataExplorerRenderTable';\r\n\r\nclass DataExplorerImport {\r\n    constructor() {\r\n        this.rightTableFocus = false;\r\n        this.rigthTableSelection = {};\r\n        this.copiedFromTable = false;\r\n\r\n        $(document).on('paste', '#data-explorer-table .wj-cell', event => {\r\n            let clipboardData, pastedData;\r\n\r\n            // Stop data actually being pasted into div\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n\r\n            if (!dataExplorerRenderTable.flexgrid.selection.isSingleCell) {\r\n                return;\r\n            }\r\n\r\n            // Get pasted data via clipboard API\r\n            clipboardData = event.clipboardData || window.clipboardData || event.originalEvent.clipboardData;\r\n            pastedData = clipboardData.getData('Text');\r\n\r\n            const rows = pastedData.split('\\n');\r\n            let cells = [];\r\n            rows.map(row => {\r\n                if (row) {\r\n                    cells.push(row.split('\\t'));\r\n                }\r\n            });\r\n            const col = dataExplorerRenderTable.flexgrid.selection._col;\r\n            const row = dataExplorerRenderTable.flexgrid.selection._row;\r\n\r\n            if (row + cells.length > dataExplorerRenderTable.flexgrid.rows.length) {\r\n                alert(\"Attempted to paste selection that does not fit this table's content.\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (col + cells[0].length > dataExplorerRenderTable.flexgrid.columns.length) {\r\n                alert(\"Attempted to paste selection that does not fit this table's content.\");\r\n\r\n                return;\r\n            }\r\n\r\n            let rowCounter = -1;\r\n            cells.map((rowCells, rowIndex) => {\r\n                rowCounter++;\r\n\r\n                let colCounter = -1;\r\n                rowCells.map((cell, colIndex) => {\r\n                    dataExplorerRenderTable.flexgrid.finishEditing(true);\r\n                    const oldVal = dataExplorerRenderTable.flexgrid.getCellData(row + rowIndex, col + colIndex, false);\r\n                    dataExplorerRenderTable.flexgrid.setCellData(row + rowIndex, col + colIndex, cell);\r\n                    const dataType = dataExplorerRenderTable.flexgrid.columns[col + colIndex].dataType;\r\n                    const cancel = dataExplorerCellEditing.cellEditValidation({\r\n                        oldVal: oldVal,\r\n                        newVal: cell,\r\n                        dataType: dataType,\r\n                        row: row + rowIndex,\r\n                        col: col + colIndex\r\n                    });\r\n                    colCounter++;\r\n\r\n                    if (!cancel) {\r\n                        dataExplorerCellEditing.cellEditAddDataPoint({\r\n                            row: row + rowIndex,\r\n                            col: col + colIndex,\r\n                            val: cell,\r\n                            colCounter: colCounter,\r\n                            rowCounter: rowCounter,\r\n                            copiedFromRightTable: this.copiedFromTable\r\n                        });\r\n                    } else {\r\n                        dataExplorerRenderTable.flexgrid.setCellData(row + rowIndex, col + colIndex, oldVal);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        $(document).on('copy', event => {\r\n            this.copiedFromTable = this.rightTableFocus;\r\n        });\r\n    }\r\n\r\n    init() {\r\n        $('#data_explorer_import_table').hide();\r\n\r\n        $('#data_explorer_import_table_button').on('click', e => {\r\n            $('#data_explorer_import_table').val('');\r\n            $('#data_explorer_import_table').trigger('click');\r\n        });\r\n\r\n        $('#data_explorer_import_table').on('change', e => {\r\n            $('.main-content #data_explorer_imported_table').remove();\r\n            $('#single_analysis ._split-screen-mode-switch input').prop('checked', true);\r\n\r\n            this.loadFile(e);\r\n        });\r\n    }\r\n\r\n    cancelImport() {\r\n        $('.main-content .tab-content').css('max-width', '100%');\r\n        $('.main-content #data_explorer_imported_table').remove();\r\n        $('#data_explorer_import_table').val('');\r\n    }\r\n\r\n    createRightTable(uuid) {\r\n        const rightFlexgrid = new wijmo.grid.FlexGrid($('#data_explorer_imported_table')[0], {\r\n            isReadOnly: true,\r\n            itemsSource: [],\r\n            onGotFocus: () => {\r\n                this.rightTableFocus = true;\r\n            },\r\n            onLostFocus: () => {\r\n                this.rightTableFocus = false;\r\n            },\r\n            onSelectionChanged: () => {\r\n                const selection = rightFlexgrid.selection;\r\n                this.rigthTableSelection = {\r\n                    row1: Math.min(selection._row, selection._row2),\r\n                    row2: Math.max(selection._row, selection._row2),\r\n                    col1: Math.min(selection._col, selection._col2),\r\n                    col2: Math.max(selection._col, selection._col2)\r\n                };\r\n            }\r\n        });\r\n\r\n        rightFlexgrid.itemsSource = storageService.getCurrentProject().sourceFiles[uuid].itemsSource;\r\n        rightFlexgrid.collectionView.refresh();\r\n        $('#data_explorer_imported_table > div')\r\n            .not('._files-tabs')\r\n            .css('height', '95%');\r\n    }\r\n\r\n    async loadFile(e) {\r\n        this.splitScreen();\r\n\r\n        resizableDivider.enableResizable(\r\n            '.main-content > .tab-content',\r\n            '#data_explorer_imported_table',\r\n            'width',\r\n            { handles: 'e' },\r\n            { minWidth: 300, maxWidth: 1000 },\r\n            () => {\r\n                dataExplorerRenderTable.updateTable();\r\n            }\r\n        );\r\n\r\n        // Load wijmo grid data.\r\n        this.uuid = await importXlsxService.importXlsx(e.target.files[0]);\r\n        storageService\r\n            .getCurrentProject()\r\n            .analyses[dataExplorerAnalyses.currentAnalysisId].dropboxFiles.push(this.uuid);\r\n\r\n        $('.allow-divider').on('resize', () => {\r\n            dataExplorerRenderTable.updateTable();\r\n        });\r\n\r\n        this.createRightTable(this.uuid);\r\n\r\n        // Save project.\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n\r\n        this.refreshFilesTabs();\r\n    }\r\n\r\n    refreshFilesTabs() {\r\n        $('._files-tabs').empty();\r\n        const analysis = storageService.getCurrentProject().analyses[dataExplorerAnalyses.currentAnalysisId];\r\n        analysis.dropboxFiles.map(uuid => {\r\n            const file = get(storageService, `currentProject.sourceFiles[${uuid}]`);\r\n            const active = this.uuid === uuid ? '_active-tab' : '';\r\n            $('._files-tabs').prepend(\r\n                '<div class=\"_file-tab ' + active + '\" data-uuid=\"' + uuid + '\">' + file.name + '</div>'\r\n            );\r\n        });\r\n    }\r\n\r\n    splitScreen() {\r\n        $('.main-content').append('<div id=\"data_explorer_imported_table\"><div class=\"_files-tabs\"></div></div>');\r\n    }\r\n}\r\n\r\nexport const dataExplorerImport = new DataExplorerImport();\r\n","import { common } from '../../Common';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\n\r\nclass DataExplorerQueryBuilder {\r\n    constructor() {\r\n        this.filters = {};\r\n        this.formula = '';\r\n        this.dimensionInputs = {};\r\n\r\n        // DOM\r\n        this.rootElement = $('#dataExplorerQueryBuilder');\r\n        this.dimensionsElement = this.rootElement.find('._dimensions');\r\n        this.dimensionsTemplate = this.dimensionsElement.find('._template').detach();\r\n        this.formulaElement = this.rootElement.find('._formula ._text');\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            this.flexgrid = new wijmo.grid.FlexGrid(this.rootElement.find('._preview')[0], {\r\n                isReadOnly: true,\r\n                selectionMode: 'Row',\r\n                itemsSource: [],\r\n                autoGenerateColumns: false,\r\n                formatItem: (s, e) => {\r\n                    if (e.panel === s.cells) {\r\n                        const item = s.rows[e.row].dataItem;\r\n                        const binding = s.columns[e.col].binding;\r\n\r\n                        switch (binding) {\r\n                            case 'value':\r\n                            case '__normalized_value':\r\n                                if (e.cell.childNodes[0]) {\r\n                                    e.cell.childNodes[0].nodeValue = common.formatNumber(item[binding]);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        // Events\r\n        this.rootElement.on('hidden.bs.modal', () => {\r\n            this.onHidden();\r\n        });\r\n        this.rootElement.on('shown.bs.modal', () => {\r\n            this.onShown();\r\n        });\r\n        this.rootElement.find('._save-changes').on('click', () => {\r\n            this.saveChanges();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open the visual query builder.\r\n     * @param filters Selected values for each dimension.\r\n     * @param callback Function to call once the user hits \"Save\"\r\n     */\r\n    open(filters, callback) {\r\n        // Save callback.\r\n        this.callback = callback;\r\n\r\n        // Add dimensions.\r\n        const project = storageService.getCurrentProject();\r\n        const dimensions = project.getDimensions();\r\n        dimensions.forEach(dimension => {\r\n            if (dimension.slug === 'value' || dimension.slug === 'scale') {\r\n                return;\r\n            }\r\n\r\n            // Label\r\n            const d = this.dimensionsTemplate.clone();\r\n            d.find('._label').html(dimension.label);\r\n\r\n            // Input\r\n            const values = common.getUniqueValues(project.dataPoints, dimension.slug);\r\n            const input = new wijmo.input.MultiSelect(d.find('._dropdown')[0], {\r\n                placeholder: 'Inherit',\r\n                // isEditable: true,\r\n                itemsSource: values,\r\n                onCheckedItemsChanged: () => {\r\n                    this.updateFormula();\r\n                    this.updateFlexGrid();\r\n                }\r\n            });\r\n            input.checkedItems = filters.hasOwnProperty(dimension.slug) ? filters[dimension.slug] : [];\r\n            this.dimensionInputs[dimension.slug] = input;\r\n\r\n            // Append.\r\n            this.dimensionsElement.append(d);\r\n        });\r\n\r\n        // Show modal.\r\n        this.rootElement.modal('show');\r\n    }\r\n\r\n    saveChanges() {\r\n        // Use callback.\r\n        this.callback(this.formula);\r\n\r\n        // Hide modal.\r\n        this.rootElement.modal('hide');\r\n    }\r\n\r\n    updateFormula() {\r\n        const formula = {};\r\n\r\n        // Consider each dimension input.\r\n        for (const dimension in this.dimensionInputs) {\r\n            const input = this.dimensionInputs[dimension];\r\n\r\n            // Ignore inputs without any checked items.\r\n            if (input.checkedItems.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            // Save checked items.\r\n            formula[dimension] = input.checkedItems;\r\n        }\r\n\r\n        // Save as final formula.\r\n        this.filters = formula;\r\n        this.formula = 'QUERY(' + JSON.stringify(formula) + ')';\r\n        this.formulaElement.val(this.formula);\r\n    }\r\n\r\n    updateFlexGrid() {\r\n        const project = storageService.getCurrentProject();\r\n\r\n        // Set columns.\r\n        {\r\n            this.flexgrid.columns.length = 0;\r\n\r\n            const gridCol = new wijmo.grid.Column();\r\n            gridCol.binding = '__normalized_value';\r\n            gridCol.header = 'Normalized Value';\r\n            this.flexgrid.columns.push(gridCol);\r\n\r\n            project.dimensions.forEach(dimension => {\r\n                const gridCol = new wijmo.grid.Column();\r\n                gridCol.binding = dimension.slug;\r\n                gridCol.header = dimension.label;\r\n                this.flexgrid.columns.push(gridCol);\r\n            });\r\n        }\r\n\r\n        // Fetch items.\r\n        const dataPoints = dataExplorerHelper.getMatchingDataPoints(project.dataPoints, this.filters);\r\n        dataPoints.forEach(item => {\r\n            // Normalize values.\r\n            item['__normalized_value'] = item.value * common.parseScale(item.scale) * common.parseInverse(item.inverse);\r\n        });\r\n        this.flexgrid.itemsSource = dataPoints;\r\n    }\r\n\r\n    onHidden() {\r\n        // Remove dimensions.\r\n        for (const dimension in this.dimensionInputs) {\r\n            const input = this.dimensionInputs[dimension];\r\n            input.dispose();\r\n        }\r\n        this.dimensionInputs = {};\r\n        this.dimensionsElement.html('');\r\n    }\r\n\r\n    onShown() {\r\n        this.updateFormula();\r\n        this.updateFlexGrid();\r\n    }\r\n}\r\n\r\nexport const dataExplorerQueryBuilder = new DataExplorerQueryBuilder();\r\n","import { common } from '../../Common';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\nimport { dataExplorerVirtualTable } from './DataExplorerVirtualTable';\r\n\r\n/**\r\n * Class to render a SVG chart based on the HighCharts library.\r\n */\r\nclass DataExplorerRenderChart {\r\n    constructor() {\r\n        this._chart = null;\r\n        this.outputMode = 'both';\r\n        this.chartMode = 'bar';\r\n        this.chartStackingMode = '';\r\n    }\r\n\r\n    renderChart() {\r\n        // Convert table data into chart data.\r\n        let series = [];\r\n        let categories = [];\r\n\r\n        if (this.chartMode === 'pie') {\r\n            let data = [];\r\n\r\n            for (let i = 0; i < dataExplorerVirtualTable.tableData.length; i++) {\r\n                let row = dataExplorerVirtualTable.tableData[i];\r\n\r\n                if (!dataExplorerHelper.isChartEnabledForRow(i + 1)) {\r\n                    continue;\r\n                }\r\n\r\n                for (let j = 1; j < row.length; j++) {\r\n                    if (!dataExplorerHelper.isChartEnabledForColumn(j)) {\r\n                        continue;\r\n                    }\r\n\r\n                    let value = row[j].value;\r\n                    value = typeof value === 'undefined' ? 0 : value;\r\n                    if (value >= 0) {\r\n                        data.push({\r\n                            name: $('#row_box > .item')\r\n                                .eq(i)\r\n                                .find('input')\r\n                                .val(),\r\n                            y: value\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            series = [\r\n                {\r\n                    data: data\r\n                }\r\n            ];\r\n        } else {\r\n            for (let i = 0; i < dataExplorerVirtualTable.tableData.length; i++) {\r\n                let row = dataExplorerVirtualTable.tableData[i];\r\n                let data = [];\r\n\r\n                const analysis = storageService.getCurrentProject().analyses[dataExplorerAnalyses.currentAnalysisId];\r\n                if (!dataExplorerHelper.isChartEnabledForRow(analysis.tableRowToCardNo[i + 1] + 1)) {\r\n                    continue;\r\n                }\r\n\r\n                for (let j = 1; j < row.length; j++) {\r\n                    if (!dataExplorerHelper.isChartEnabledForColumn(j)) {\r\n                        continue;\r\n                    }\r\n\r\n                    let value = row[j].value;\r\n                    value = typeof value === 'undefined' ? 0 : value;\r\n                    data.push(value);\r\n                }\r\n\r\n                series.push({\r\n                    name: row[0].value,\r\n                    data: data\r\n                });\r\n            }\r\n\r\n            let cols = $('#column_box > .item');\r\n            for (let i = 0; i < cols.length; i++) {\r\n                if (!dataExplorerHelper.isChartEnabledForItem(cols[i])) {\r\n                    continue;\r\n                }\r\n\r\n                categories.push(\r\n                    $(cols[i])\r\n                        .find('input')\r\n                        .val()\r\n                );\r\n            }\r\n        }\r\n\r\n        if (this._chart) {\r\n            this._chart.destroy();\r\n        }\r\n\r\n        this._chart = Highcharts.chart('outputChart', {\r\n            chart: {\r\n                type: this.chartMode\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    stacking: this.chartStackingMode\r\n                },\r\n                pie: {\r\n                    allowPointSelect: true,\r\n                    cursor: 'pointer',\r\n                    showInLegend: true,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',\r\n                        style: {\r\n                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            title: {\r\n                text: ''\r\n            },\r\n            xAxis: {\r\n                categories: categories\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: ''\r\n                }\r\n            },\r\n            series: series,\r\n            tooltip: {\r\n                formatter: function() {\r\n                    let val = this.y;\r\n                    val /= parseFloat($('#scale').val());\r\n                    val = common.formatNumber(val);\r\n\r\n                    return val;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const dataExplorerRenderChart = new DataExplorerRenderChart();\r\n","import { storageService } from '../../services/StorageService';\r\nimport { DataExplorerAttributesTree } from './DataExplorerAttributesTree';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\n\r\nclass DataExplorerSecondarySidebar {\r\n    init() {\r\n        this.container = $('#output_table_sidebar');\r\n        this.attrContainer = $('#attr_dim_list');\r\n        this.secondarySidebar = this.container.find('.secondary_sidebar');\r\n        $('._contains-visible').removeClass('_contains-visible');\r\n        $('._search-result-hidden').removeClass('_search-result-hidden');\r\n\r\n        // Quick search for secondary sidebar\r\n        $('.secondary_sidebar-menu input').on('change keydown keyup', e => {\r\n            $('._contains-visible').removeClass('_contains-visible');\r\n            $('._search-result-hidden').removeClass('_search-result-hidden');\r\n            let val = $(e.target)\r\n                .val()\r\n                .toLowerCase();\r\n\r\n            // Reset non-matching entries within target group.\r\n            this.attrContainer.find('._row').removeClass('_search-result-hidden');\r\n\r\n            this.attrContainer.find('li').each((index, item) => {\r\n                let $item = $(item);\r\n\r\n                if (\r\n                    $item\r\n                        .html()\r\n                        .toLowerCase()\r\n                        .indexOf(val) !== -1 ||\r\n                    val === ''\r\n                ) {\r\n                    $item.removeClass('_hidden');\r\n                } else {\r\n                    $item.addClass('_hidden');\r\n                }\r\n            });\r\n\r\n            this.attrContainer.find('._group').each((index, item) => {\r\n                let visible = $(item).find('li:not(._hidden)');\r\n\r\n                if (visible.length !== 0) {\r\n                    $(item).show();\r\n\r\n                    // Special bug fix\r\n                    visible.each((index, visibleEntry) => {\r\n                        $(visibleEntry)\r\n                            .parentsUntil($('#available_box_names'), '._row')\r\n                            .addClass('_contains-visible');\r\n                    });\r\n\r\n                    // Hide non-matching entries within target group.\r\n                    $(item)\r\n                        .find('li._hidden')\r\n                        .each((index, newItem) => {\r\n                            $(newItem)\r\n                                .closest('._row:not(._contains-visible)')\r\n                                .addClass('_search-result-hidden');\r\n                        });\r\n                } else {\r\n                    $(item).hide();\r\n                }\r\n            });\r\n        });\r\n\r\n        // Open secondary sidebar when clicking on the main buttons \"Columns\", \"Rows\", or \"Global\".\r\n        this.container.find('#main_sidebar_nav_tabs a').on('click', e => {\r\n            const href = $(e.target).attr('href');\r\n\r\n            // Open sidebar.\r\n            this.secondarySidebar.addClass('_open');\r\n\r\n            // Hide or show KPIs group.\r\n            this.secondarySidebar\r\n                .find('#attr_dim_list ._group:last-child')\r\n                .css('display', href !== '#main_sidebar_global' ? '' : 'none');\r\n\r\n            // Hide or show specific KPIs.\r\n            this.secondarySidebar.find('#attr_dim_list ._group:last-child li.item[data-type=\"kpi\"]').each(function() {\r\n                const value = $(this).attr('data-value');\r\n\r\n                switch (value) {\r\n                    case 'CAGR':\r\n                    case 'YoY':\r\n                    case 'Delta':\r\n                        $(this).css('display', href === '#main_sidebar_columns' ? '' : 'none');\r\n                        break;\r\n\r\n                    case 'Margin':\r\n                        $(this).css('display', href === '#main_sidebar_rows' ? '' : 'none');\r\n                        break;\r\n                }\r\n            });\r\n        });\r\n\r\n        // Close secondary sidebar.\r\n        this.secondarySidebar.find('._close').on('click', () => {\r\n            this.secondarySidebar.removeClass('_open');\r\n        });\r\n    }\r\n\r\n    load() {\r\n        // Filtered dimensions.\r\n        let dimensions = storageService.currentProject.dimensions;\r\n        let filteredDimensions = dimensions.filter(dimension => {\r\n            return ['value', 'scale'].indexOf(dimension.slug) === -1;\r\n        });\r\n\r\n        // Attribute trees\r\n        this.dataExplorerAttributesTree = [];\r\n        for (let i = 0; i < filteredDimensions.length; i++) {\r\n            this.dataExplorerAttributesTree.push(new DataExplorerAttributesTree(filteredDimensions[i].slug));\r\n            this.dataExplorerAttributesTree[i].init();\r\n        }\r\n\r\n        // Attributes tree\r\n        this.attrContainer.html('');\r\n        for (let i = 0; i < this.dataExplorerAttributesTree.length; i++) {\r\n            let tree = $('<div id=\"available_box_names\" class=\"available_box-sub tree-view\" data-type=\"all\"></div>');\r\n\r\n            this.addGroup(tree, this.dataExplorerAttributesTree[i].dimensionSlug);\r\n            this.dataExplorerAttributesTree[i].load(tree);\r\n        }\r\n\r\n        // Other dimensions\r\n        {\r\n            let kpis = ['Custom Formula', 'CAGR', 'YoY', 'Delta', 'Margin', 'Blank'];\r\n            this.addToList(kpis, 'kpi', 'KPIs');\r\n        }\r\n    }\r\n\r\n    addToList(items, dataType, filterName) {\r\n        // Create list.\r\n        let ul = $('<ul class=\"_list\"></ul>');\r\n        for (let i in items) {\r\n            let item = dataExplorerHelper.createItem(\r\n                null,\r\n                dataType,\r\n                items[i],\r\n                dataType === 'filter' ? filterName : undefined\r\n            );\r\n            ul.append(item);\r\n        }\r\n\r\n        // Add to group.\r\n        this.addGroup(ul, filterName);\r\n\r\n        // Enable drag-and-drop.\r\n        Sortable.create(ul[0], dataExplorerHelper.sortableArgsForAttrs, {\r\n            filter: '.remove-filter'\r\n        });\r\n    }\r\n\r\n    addGroup(content, title) {\r\n        let div = $('<div class=\"_group\"><span class=\"_title\">' + title + '</span></div>');\r\n        content.appendTo(div);\r\n        this.attrContainer.append(div);\r\n    }\r\n}\r\n\r\nexport const dataExplorerSecondarySidebar = new DataExplorerSecondarySidebar();\r\n","import { common } from '../../Common';\r\nimport { keyboardService } from '../../services/KeyboardService';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorer } from './DataExplorer';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\nimport { dataExplorerVirtualTable } from './DataExplorerVirtualTable';\r\n\r\nclass DataExplorerSections {\r\n    init() {\r\n        this.container = $('#output_table_sidebar');\r\n\r\n        // Close button\r\n        this.container.on('click', '._button._close', e => {\r\n            $(e.currentTarget)\r\n                .closest('.item')\r\n                .remove();\r\n            dataExplorerHelper.resetColumnIds();\r\n            dataExplorerHelper.saveAndUpdate();\r\n        });\r\n\r\n        // Chart button\r\n        this.container.on('click', '._button._chart', e => {\r\n            // Switch state.\r\n            let checked = $(e.currentTarget).attr('data-checked') === 'false';\r\n            $(e.currentTarget).attr('data-checked', checked ? 'true' : 'false');\r\n\r\n            // Render.\r\n            dataExplorerVirtualTable.renderOutputTableOrChart();\r\n\r\n            e.preventDefault();\r\n        });\r\n\r\n        // Title\r\n        this.container.on('change', '._title', e => {\r\n            dataExplorerHelper.saveAndUpdate();\r\n        });\r\n        this.container.on('keydown', '._title', e => {\r\n            if (e.keyCode !== keyboardService.ctrlKey && e.keyCode !== keyboardService.shiftKey) {\r\n                e.stopPropagation();\r\n            }\r\n        });\r\n        this.container.on('keyup', '._title', e => {\r\n            dataExplorerHelper.saveAndUpdateDelayed();\r\n\r\n            if (e.keyCode !== keyboardService.ctrlKey && e.keyCode !== keyboardService.shiftKey) {\r\n                e.stopPropagation();\r\n            }\r\n        });\r\n    }\r\n\r\n    getSectionType(section) {\r\n        return section.attr('data-section-type');\r\n    }\r\n\r\n    addSection(sectionType, container, title, id) {\r\n        // Title\r\n        let titleInput = $('<input class=\"_title\" value=\"' + title + '\">');\r\n        let titleContainer = $('<span class=\"_title-container\"></span>').append(titleInput);\r\n        let idElement = dataExplorerHelper.createId(id);\r\n\r\n        // Close button\r\n        let closeButton = $(\r\n            '<span class=\"_button _close\"><i class=\"kpmg-icon kpmg-icon-close\" aria-hidden=\"true\"></i></span>'\r\n        );\r\n\r\n        // Chart button\r\n        let chartElement = $(\r\n            '<span class=\"_button _chart\" data-checked=\"true\"><i class=\"kpmg-icon kpmg-icon-graph\" aria-hidden=\"true\"></i></span>'\r\n        );\r\n\r\n        // Setion\r\n        let section = $('<li class=\"item row-or-column-card\"></li>')\r\n            .attr('data-section-type', sectionType)\r\n            .append(titleContainer, idElement, chartElement, closeButton)\r\n            .appendTo(container);\r\n\r\n        return section;\r\n    }\r\n\r\n    addFilterSection(container, item, id) {\r\n        let value = item && $(item).length ? $(item).attr('data-value') : '';\r\n        let section = this.addSection('filter', container, value, id);\r\n        let filters = $('<span class=\"item-group item-group-horizontal _filters\" data-type=\"filter\">');\r\n\r\n        section.addClass('item-with-filters').append(filters);\r\n\r\n        Sortable.create(\r\n            filters[0],\r\n            $.extend({}, dataExplorerHelper.sortableArgs, {\r\n                filter: 'input, .remove-filter',\r\n                preventOnFilter: false\r\n            })\r\n        );\r\n\r\n        return section;\r\n    }\r\n\r\n    addYearOrMarginOptions(select, option) {\r\n        select.find('option').remove();\r\n        let dataset = storageService.getCurrentDataPoints();\r\n        let years = common.getUniqueValues(dataset, option);\r\n\r\n        years.forEach(function(year) {\r\n            select.append('<option value=\"' + year + '\">' + year + '</option>');\r\n        });\r\n    }\r\n\r\n    addYearPair(section, y1, y2, option) {\r\n        let year1 = $('<select class=\"_year _year1\"></select>');\r\n        this.addYearOrMarginOptions(year1, option);\r\n        year1.val(y1);\r\n        year1.on('change', function() {\r\n            dataExplorerSections.syncTitle($(this).closest('.row-or-column-card'));\r\n            dataExplorerHelper.saveAndUpdate();\r\n        });\r\n\r\n        let year2 = $('<select class=\"_year _year2\"></select>');\r\n        this.addYearOrMarginOptions(year2, option);\r\n        year2.val(y2);\r\n        year2.on('change', function() {\r\n            dataExplorerSections.syncTitle($(this).closest('.row-or-column-card'));\r\n            dataExplorerHelper.saveAndUpdate();\r\n        });\r\n\r\n        section.append(year1, year2);\r\n    }\r\n\r\n    // Add YoY or Delta, depending on modeValue.\r\n    addYoyColumn(y1, y2, modeValue) {\r\n        let title = modeValue ? 'Yoy' : 'Delta';\r\n        let section = this.addSection(\r\n            title.toLowerCase(),\r\n            $('#column_box'),\r\n            title,\r\n            'C' + dataExplorer.columnSequence++\r\n        );\r\n\r\n        let container = $('<div class=\"extra-yoy-container\">');\r\n        section.append(container);\r\n\r\n        this.addYearPair(container, y1, y2, 'time');\r\n\r\n        return section;\r\n    }\r\n\r\n    addCagrColumn(y1, y2) {\r\n        let section = this.addSection('cagr', $('#column_box'), 'CAGR', 'C' + dataExplorer.columnSequence++);\r\n        let container = $('<div class=\"extra-yoy-container\">');\r\n\r\n        section.append(container);\r\n\r\n        this.addYearPair(container, y1, y2, 'time');\r\n        return section;\r\n    }\r\n\r\n    addMarginRow(y1 = null, y2 = null) {\r\n        let section = this.addSection('margin', $('#row_box'), 'Margin', 'R' + dataExplorer.rowSequence++);\r\n        let container = $('<div class=\"extra-yoy-container\">');\r\n        section.append(container);\r\n\r\n        this.addYearPair(container, y1, y2, 'attribute');\r\n        return section;\r\n    }\r\n\r\n    syncTitle(section) {\r\n        let type = this.getSectionType(section);\r\n        let titleElement = section.find('._title');\r\n\r\n        switch (type) {\r\n            case 'filter':\r\n            case 'blank':\r\n                let filters = section.find('.item');\r\n\r\n                if (filters.length === 1) {\r\n                    titleElement.val(filters.data('value'));\r\n                }\r\n                if (filters.length > 1) {\r\n                    let title = '';\r\n                    filters.each(function() {\r\n                        title += $(this).data('value') + ' - ';\r\n                    });\r\n                    titleElement.val(title.substring(0, title.length - 2));\r\n                }\r\n                break;\r\n\r\n            case 'yoy':\r\n                {\r\n                    let y1 = section.find('._year1').val();\r\n                    let y2 = section.find('._year2').val();\r\n                    titleElement.val('YoY ' + y1 + '-' + y2);\r\n                }\r\n                break;\r\n\r\n            case 'delta':\r\n                {\r\n                    let y1 = section.find('._year1').val();\r\n                    let y2 = section.find('._year2').val();\r\n                    titleElement.val('Delta ' + y1 + '-' + y2);\r\n                }\r\n                break;\r\n\r\n            case 'cagr': {\r\n                let y1 = section.find('._year1').val();\r\n                let y2 = section.find('._year2').val();\r\n                titleElement.val('CAGR ' + y1 + '-' + y2);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const dataExplorerSections = new DataExplorerSections();\r\n","import { keyboardService } from '../../services/KeyboardService';\r\nimport { dataExplorerFormulas } from './DataExplorerFormulas';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\n\r\nclass DataExplorerSidebar {\r\n    init() {\r\n        this.container = $('#output_table_sidebar');\r\n        this.itemGroups = this.container.find('.item-group');\r\n        this.lastSelectedItem = null;\r\n        this.clipboardItems = [];\r\n\r\n        $(document).on('keydown', e => {\r\n            // Copy\r\n            if (keyboardService.ctrlDown && e.keyCode === keyboardService.cKey) {\r\n                // Save a clone of each item.\r\n                this.clipboardItems = this.itemGroups.find('> .item._active').toArray();\r\n                this.clipboardItems = this.clipboardItems.map(item => {\r\n                    return $(item).clone();\r\n                });\r\n            }\r\n\r\n            // Paste\r\n            if (keyboardService.ctrlDown && e.keyCode === keyboardService.vKey && this.clipboardItems.length > 0) {\r\n                // Append a clone of each item.\r\n                this.clipboardItems.forEach(item => {\r\n                    const newItem = $(item).clone();\r\n                    newItem.hide();\r\n                    this.itemGroups.filter(':visible').append(newItem);\r\n                    dataExplorerFormulas.initInput(newItem.find('._formula'));\r\n                    newItem.fadeIn(333);\r\n                });\r\n\r\n                // Reset IDs.\r\n                dataExplorerHelper.resetRowIds();\r\n                dataExplorerHelper.resetColumnIds();\r\n\r\n                // Deselect everything.\r\n                this.deselectAll();\r\n\r\n                // Save and update table, after fade-in animation has ended.\r\n                setTimeout(() => {\r\n                    dataExplorerHelper.saveAndUpdate();\r\n                }, 333);\r\n            }\r\n        });\r\n\r\n        this.container.on('click', e => {\r\n            if (!keyboardService.ctrlDown && !keyboardService.shiftDown) {\r\n                this.deselectAll();\r\n            }\r\n        });\r\n\r\n        this.container.on('click', '.row-or-column-card', e => {\r\n            const item = $(e.currentTarget);\r\n\r\n            // Deselect other cards if shift/ctrl is not pressed.\r\n            if (!keyboardService.ctrlDown && !keyboardService.shiftDown) {\r\n                this.deselectAll();\r\n            }\r\n\r\n            // If shift if pressed, select all items between the previous and the current one.\r\n            if (keyboardService.shiftDown) {\r\n                const index1 = this.lastSelectedItem.index();\r\n                const index2 = item.index();\r\n                const indexMin = Math.min(index1, index2);\r\n                const indexMax = Math.max(index1, index2);\r\n                const parent = item.parent();\r\n\r\n                for (let i = indexMin; i <= indexMax; i++) {\r\n                    parent\r\n                        .children()\r\n                        .eq(i)\r\n                        .addClass('_active');\r\n                }\r\n            } else {\r\n                // Simply toggle the state.\r\n                item.toggleClass('_active');\r\n            }\r\n\r\n            // Remember the last selected item.\r\n            this.lastSelectedItem = item;\r\n\r\n            e.stopPropagation();\r\n        });\r\n    }\r\n\r\n    deselectAll() {\r\n        this.itemGroups.find('.item').removeClass('_active');\r\n    }\r\n}\r\n\r\nexport const dataExplorerSidebar = new DataExplorerSidebar();\r\n","import { DataExplorerCard } from '../../entities/DataExplorerCard';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorer } from './DataExplorer';\r\nimport { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\nimport { dataExplorerSecondarySidebar } from './DataExplorerSecondarySidebar';\r\nimport { dataExplorerSections } from './DataExplorerSections';\r\nimport { dataExplorerVirtualTable } from './DataExplorerVirtualTable';\r\n\r\nclass DataExplorerStorage {\r\n    constructor() {\r\n        this.saveDelayed = _.debounce(this.save, 500);\r\n    }\r\n\r\n    save(i) {\r\n        console.log('dataExplorerStorage.save');\r\n\r\n        let globalFilters = [];\r\n        let columns = dataExplorerStorage.saveRowsOrColumns($('#column_box'));\r\n        let rows = dataExplorerStorage.saveRowsOrColumns($('#row_box'));\r\n\r\n        let filterCategories = ['a1', 'headline', 'hidden'];\r\n        for (let i = 0; i < filterCategories.length; i++) {\r\n            let category = filterCategories[i];\r\n\r\n            $(`#filter_box_${category} > .item`).each(function() {\r\n                let $this = $(this);\r\n\r\n                globalFilters.push({\r\n                    dataFilterType: $this.attr('data-filter-type'),\r\n                    dataValue: $this.attr('data-value'),\r\n                    dataDestination: $this.parent().attr('id')\r\n                });\r\n            });\r\n        }\r\n\r\n        storageService.currentProject.analyses[i].globalFilters = globalFilters;\r\n        storageService.currentProject.analyses[i].columns = columns;\r\n        storageService.currentProject.analyses[i].rows = rows;\r\n        storageService.currentProject.analyses[i].scale = $('#scale').val();\r\n\r\n        storageService.saveCurrentProject();\r\n    }\r\n\r\n    saveRowsOrColumns(container) {\r\n        let data = [];\r\n\r\n        container.find('> .item').each(function() {\r\n            const $this = $(this);\r\n            const sectionType = $this.attr('data-section-type');\r\n\r\n            // Create card.\r\n            const card = new DataExplorerCard();\r\n            card.sectionType = sectionType;\r\n            card.title = $this.find('input._title').val();\r\n            card.dataValue = $this.attr('data-value');\r\n\r\n            switch (sectionType) {\r\n                case 'filter':\r\n                    card.filters = {};\r\n\r\n                    if (card.dataValue === 'Blank') {\r\n                        break;\r\n                    }\r\n\r\n                    $this.find('.item').each(function() {\r\n                        const dimension = $(this).attr('data-filter-type');\r\n                        const value = $(this).attr('data-value');\r\n\r\n                        if (!(dimension in card.filters)) {\r\n                            card.filters[dimension] = [];\r\n                        }\r\n                        card.filters[dimension].push(value);\r\n                    });\r\n                    break;\r\n\r\n                case 'formula':\r\n                    card.formula = $this.find('._formula').attr('data-formula');\r\n                    break;\r\n\r\n                case 'yoy':\r\n                case 'delta':\r\n                    card.year1 = $this.find('._year1').val();\r\n                    card.year2 = $this.find('._year2').val();\r\n                    break;\r\n\r\n                case 'cagr':\r\n                    card.year1 = $this.find('._year1').val();\r\n                    card.year2 = $this.find('._year2').val();\r\n                    break;\r\n\r\n                case 'margin':\r\n                    card.attribute1 = $this.find('._year1').val();\r\n                    card.attribute2 = $this.find('._year2').val();\r\n                    break;\r\n            }\r\n\r\n            data.push(card);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    load() {\r\n        if (storageService.getCurrentTab() !== '#output_table') {\r\n            return;\r\n        }\r\n\r\n        console.log('dataExplorerStorage.load');\r\n\r\n        dataExplorerSecondarySidebar.load();\r\n\r\n        // Available fields\r\n        {\r\n            $('#available_box ul.available_box-sub').html('');\r\n\r\n            // Filter\r\n            let filterTypes = ['time', 'entity', 'layer', 'quality', 'unit'];\r\n            for (let i = 0; i < filterTypes.length; i++) {\r\n                dataExplorerStorage.addItemsForFilterType(filterTypes[i]);\r\n            }\r\n        }\r\n\r\n        const data = storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId];\r\n\r\n        // Scale\r\n        $('#scale').val(data.scale);\r\n\r\n        // Global filters\r\n        $('#filter_box_headline, #filter_box_a1, #filter_box_hidden').html('');\r\n        for (let i = 0; i < data.globalFilters.length; i++) {\r\n            let filterData = data.globalFilters[i];\r\n            let filter = $(\r\n                '.secondary_sidebar .item[data-filter-type=\"' +\r\n                    filterData.dataFilterType +\r\n                    '\"][data-value=\"' +\r\n                    filterData.dataValue +\r\n                    '\"]'\r\n            );\r\n            $('#' + filterData.dataDestination).append(filter.clone());\r\n        }\r\n\r\n        // Columns\r\n        dataExplorerStorage.loadRowsOrColumns($('#column_box'), data.columns);\r\n\r\n        // Rows\r\n        dataExplorerStorage.loadRowsOrColumns($('#row_box'), data.rows);\r\n\r\n        dataExplorerVirtualTable.updateTable();\r\n\r\n        dataExplorerHelper.addFilterRemoveButton();\r\n    }\r\n\r\n    loadRowsOrColumns(container, data) {\r\n        const set = container.attr('data-set');\r\n        let isColumns = container.attr('id') === 'column_box';\r\n\r\n        if (isColumns) {\r\n            dataExplorer.columnSequence = 1;\r\n        } else {\r\n            dataExplorer.rowSequence = 1;\r\n        }\r\n\r\n        container.find('> .item').remove();\r\n        for (let i = 0; i < data.length; i++) {\r\n            let itemData = data[i];\r\n            let item = null;\r\n\r\n            switch (itemData.sectionType) {\r\n                case 'filter':\r\n                    if (itemData.dataValue === 'Blank') {\r\n                        let id = isColumns ? 'C' + dataExplorer.columnSequence : 'R' + dataExplorer.rowSequence;\r\n                        item = dataExplorerSections.addFilterSection(container, itemData, id);\r\n                        item.attr('data-value', 'Blank');\r\n                        break;\r\n                    }\r\n\r\n                    item = dataExplorer.addFilter('', set);\r\n\r\n                    const filters = item.find('._filters');\r\n\r\n                    // Add filters one by one, per dimension.\r\n                    for (const dimension in itemData.filters) {\r\n                        itemData.filters[dimension].forEach(value => {\r\n                            const filter = dataExplorerHelper.createItem(null, 'filter', value, dimension);\r\n                            filters.append(filter.clone());\r\n                        });\r\n                    }\r\n                    break;\r\n\r\n                case 'formula':\r\n                    if (isColumns) {\r\n                        item = dataExplorer.addFormula(itemData.formula, dataExplorer.SET_COLUMN);\r\n                    } else {\r\n                        item = dataExplorer.addFormula(itemData.formula, dataExplorer.SET_ROW);\r\n                    }\r\n                    break;\r\n\r\n                case 'yoy':\r\n                    item = dataExplorerSections.addYoyColumn(itemData.year1, itemData.year2, itemData.mode);\r\n                    break;\r\n\r\n                case 'delta':\r\n                    item = dataExplorerSections.addYoyColumn(itemData.year1, itemData.year2, itemData.mode);\r\n                    break;\r\n\r\n                case 'cagr':\r\n                    item = dataExplorerSections.addCagrColumn(itemData.year1, itemData.year2);\r\n                    break;\r\n\r\n                case 'margin':\r\n                    item = dataExplorerSections.addMarginRow();\r\n                    break;\r\n            }\r\n\r\n            if (item) {\r\n                item.find('._title').val(itemData.title);\r\n            }\r\n        }\r\n    }\r\n\r\n    addItemsForFilterType(filterName) {\r\n        let filter = {};\r\n        let dataset = storageService.getCurrentDataPoints();\r\n\r\n        for (let i = 0; i < dataset.length; i++) {\r\n            let key = dataset[i][filterName];\r\n\r\n            if (!key) {\r\n                return;\r\n            }\r\n\r\n            filter[key] = true;\r\n        }\r\n\r\n        let container = $('#available_box_' + filterName);\r\n        container.html('');\r\n        for (let i in filter) {\r\n            container.append(dataExplorerHelper.createItem(null, 'filter', i, filterName));\r\n        }\r\n\r\n        dataExplorerHelper.addFilterRemoveButton();\r\n    }\r\n}\r\n\r\nexport const dataExplorerStorage = new DataExplorerStorage();\r\n","import { filterTemplate1 } from '../../datasets/filter-template-1';\r\nimport { filterTemplate2 } from '../../datasets/filter-template-2';\r\nimport { filterTemplate3 } from '../../datasets/filter-template-3';\r\nimport { filterTemplate4 } from '../../datasets/filter-template-4';\r\nimport { filterTemplate5 } from '../../datasets/filter-template-5';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorer } from './DataExplorer';\r\nimport { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\nimport { dataExplorerSections } from './DataExplorerSections';\r\nimport { dataExplorerStorage } from './DataExplorerStorage';\r\nimport { dataExplorerVirtualTable } from './DataExplorerVirtualTable';\r\n\r\nclass DataExplorerTemplate {\r\n    checkFormulaYearsGlobalTerms(item, termsToReplace, filteredTemplate) {\r\n        const years = ['year1', 'year2'];\r\n        let foundMatch;\r\n\r\n        for (let i = 0; i < years.length; i++) {\r\n            foundMatch = false;\r\n            let year = years[i];\r\n            let parameter = 'time';\r\n\r\n            if (item.type === 'margin') {\r\n                parameter = 'attribute';\r\n            }\r\n\r\n            for (let yearItem in termsToReplace[parameter]) {\r\n                let intermediateTerm = termsToReplace[parameter];\r\n                if (item[year] !== intermediateTerm[yearItem].globalTerm) {\r\n                    continue;\r\n                }\r\n\r\n                foundMatch = true;\r\n                item.localTerm = item.localTerm || {};\r\n                item.localTerm[year] = intermediateTerm[yearItem].attribute;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (foundMatch) {\r\n            filteredTemplate.push(item);\r\n        }\r\n    }\r\n\r\n    addKpiFromTemplate(item) {\r\n        $(\r\n            `.main_sidebar .row-or-column-card[data-section-type=\"${item.type}\"] ._year1 option[value=\"${\r\n                item.localTerm.year1\r\n            }\"]`\r\n        ).prop('selected', 'selected');\r\n        $(\r\n            `.main_sidebar .row-or-column-card[data-section-type=\"${item.type}\"] ._year2 option[value=\"${\r\n                item.localTerm.year2\r\n            }\"]`\r\n        ).prop('selected', 'selected');\r\n\r\n        dataExplorerSections.syncTitle($(`.main_sidebar .row-or-column-card[data-section-type=${item.type}]`));\r\n    }\r\n\r\n    addCardsFromTemplate(template, termsToReplace, set) {\r\n        // Step 1: identify valid filters for rows/columns\r\n        let filteredTemplate = [];\r\n        const key = set + 's';\r\n\r\n        // Iterate through each row/column\r\n        for (let i = 0; i < template[key].length; i++) {\r\n            let item = template[key][i];\r\n            let temporaryRow = [];\r\n\r\n            if (item.hasOwnProperty('type')) {\r\n                switch (item.type) {\r\n                    case 'yoy':\r\n                    case 'delta':\r\n                    case 'cagr':\r\n                    case 'margin':\r\n                        this.checkFormulaYearsGlobalTerms(item, termsToReplace, filteredTemplate);\r\n                        break;\r\n\r\n                    case 'formula':\r\n                    case 'blank':\r\n                        filteredTemplate.push(item);\r\n                        break;\r\n                }\r\n            } else {\r\n                // Iterate through each row/column's filters\r\n                for (let j = 0; j < item.filters.length; j++) {\r\n                    let type = item.filters[j].dimension;\r\n                    let value = item.filters[j].value;\r\n\r\n                    let matchesGlobalTerm = undefined;\r\n\r\n                    // If dimension has Global Term\r\n                    if (termsToReplace.hasOwnProperty(type)) {\r\n                        for (let instance in termsToReplace[type]) {\r\n                            // If Global Term matches supplied value, display user selected synonim (local value)\r\n                            if (termsToReplace[type][instance].globalTerm === value) {\r\n                                value = termsToReplace[type][instance].attribute;\r\n                                matchesGlobalTerm = true;\r\n                                break;\r\n                            } else {\r\n                                matchesGlobalTerm = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    // If filter Local Term needs to match Global Term but does not, don't display it\r\n                    if (matchesGlobalTerm === false) {\r\n                        continue;\r\n                    }\r\n\r\n                    temporaryRow.push({ type: type, value: value });\r\n                }\r\n\r\n                if (item.hasOwnProperty('in_chart')) {\r\n                    temporaryRow.in_chart = true;\r\n                }\r\n\r\n                filteredTemplate.push(temporaryRow);\r\n            }\r\n        }\r\n\r\n        // Step 2: display valid filters in main sidebar\r\n        for (let i = 0; i < filteredTemplate.length; i++) {\r\n            let item = filteredTemplate[i];\r\n\r\n            if (item.hasOwnProperty('type')) {\r\n                switch (item.type) {\r\n                    case 'yoy':\r\n                    case 'delta':\r\n                        let percentMode = item.type === 'yoy';\r\n                        dataExplorerSections.addYoyColumn(item.year1, item.year2, percentMode);\r\n                        this.addKpiFromTemplate(item);\r\n                        break;\r\n\r\n                    case 'cagr':\r\n                        dataExplorerSections.addCagrColumn(item.year1, item.year2);\r\n                        this.addKpiFromTemplate(item);\r\n                        break;\r\n\r\n                    case 'margin':\r\n                        dataExplorerSections.addMarginRow(item.year1, item.year2);\r\n                        this.addKpiFromTemplate(item);\r\n                        break;\r\n\r\n                    case 'formula':\r\n                        dataExplorer.addFormula(item.formula, set);\r\n                        break;\r\n\r\n                    case 'blank':\r\n                        const currentItem = dataExplorer.addFilter(item, set);\r\n\r\n                        $(currentItem)\r\n                            .attr('data-value', 'Blank')\r\n                            .find('._title')\r\n                            .attr('value', 'Blank');\r\n                        break;\r\n                }\r\n            } else if (item.length > 0) {\r\n                const section = dataExplorer.addFilter(null, set);\r\n\r\n                for (let j = 0; j < item.length; j++) {\r\n                    let filterItem = dataExplorerHelper.createItem(null, 'filter', item[j].value, item[j].type);\r\n                    section.find('._filters').append(filterItem);\r\n                }\r\n\r\n                dataExplorerSections.syncTitle(section);\r\n            }\r\n\r\n            this.showInChart(item, set, i);\r\n        }\r\n    }\r\n\r\n    // Load chart display options if present in template.\r\n    loadChartOptions(template) {\r\n        if (!template.hasOwnProperty('chart_options')) {\r\n            return;\r\n        }\r\n\r\n        for (let key in template.chart_options[0]) {\r\n            if (template.chart_options[0].hasOwnProperty(key)) {\r\n                $(`.${key}`)\r\n                    .find(`input[value=\"${template.chart_options[0][key]}\"]`)\r\n                    .trigger('click');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Load template items\r\n    showInChart(item, set, i) {\r\n        i = i + 1;\r\n\r\n        let itemChartOption = $(`#main_sidebar_${set}s`).find(`.row-or-column-card:nth-child(${i}) ._button._chart`);\r\n        if (item.hasOwnProperty('in_chart')) {\r\n            if (itemChartOption.attr('data-checked', false)) {\r\n                itemChartOption.trigger('click');\r\n            }\r\n        } else {\r\n            if (itemChartOption.attr('data-checked', true)) {\r\n                itemChartOption.trigger('click');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Template specifics.\r\n    loadTemplate(templateSource) {\r\n        const templateArray = [filterTemplate1, filterTemplate2, filterTemplate3, filterTemplate4, filterTemplate5];\r\n        const template = templateArray[templateSource];\r\n\r\n        // Get all filter-type properties\r\n        const dimensions = storageService.getCurrentProject().getDimensions();\r\n\r\n        let termsToReplace = {};\r\n        for (let i = 0; i < dimensions.length; i++) {\r\n            // Filter-types that have a global term\r\n            if (dimensions[i].hasGlobalTerms) {\r\n                // Filter type\r\n                let dimensionType = dimensions[i].slug;\r\n\r\n                // All data structures of that filter-type\r\n                termsToReplace[dimensionType] = storageService\r\n                    .getCurrentProject()\r\n                    .getDataStructuresForDimension(dimensionType);\r\n            }\r\n        }\r\n\r\n        // Empty columns and rows\r\n        $('#row_box, #column_box').empty();\r\n\r\n        // Reset rows and columns counter to 1\r\n        dataExplorer.columnSequence = 1;\r\n        dataExplorer.rowSequence = 1;\r\n\r\n        // Add rows from template\r\n        this.addCardsFromTemplate(template, termsToReplace, dataExplorer.SET_ROW);\r\n\r\n        // Add columns from template\r\n        this.addCardsFromTemplate(template, termsToReplace, dataExplorer.SET_COLUMN);\r\n\r\n        // Add global filters from template\r\n        $('#filter_box_headline, #filter_box_a1, #filter_box_hidden').html('');\r\n\r\n        const globalsSections = ['globals_headline', 'globals_a1', 'globals_hidden'];\r\n\r\n        for (let g = 0; g < globalsSections.length; g++) {\r\n            if (template[globalsSections[g]].length > 0) {\r\n                for (let i = 0; i < template[globalsSections[g]].length; i++) {\r\n                    let filterData = template[globalsSections[g]][i].filters[0];\r\n\r\n                    let value = filterData.value;\r\n                    let type = filterData.dimension;\r\n\r\n                    if (\r\n                        termsToReplace.hasOwnProperty(type) &&\r\n                        termsToReplace[type].hasOwnProperty(value) &&\r\n                        termsToReplace[type][value].globalTerm\r\n                    ) {\r\n                        value = termsToReplace[type][value].globalTerm;\r\n                    }\r\n\r\n                    let filter = $(\r\n                        '.secondary_sidebar .item[data-filter-type=\"' + type + '\"][data-value=\"' + value + '\"]'\r\n                    );\r\n                    $(`.global-filter-container:nth-of-type(${g + 1}) ul`).append(filter.clone());\r\n                }\r\n            }\r\n        }\r\n\r\n        this.loadChartOptions(template);\r\n\r\n        dataExplorerHelper.addFilterRemoveButton();\r\n\r\n        dataExplorerStorage.save(dataExplorerAnalyses.currentAnalysisId);\r\n\r\n        dataExplorerVirtualTable.updateTable();\r\n    }\r\n}\r\n\r\nexport const dataExplorerTemplate = new DataExplorerTemplate();\r\n","import { cloneDeep, concat } from 'lodash';\r\nimport { common } from '../../Common';\r\nimport { DataExplorerDrillDownStatus } from '../../entities/DataExplorerDrillDownStatus';\r\nimport { VirtualTableCell } from '../../entities/VirtualTableCell';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { dataExplorerAnalyses } from './DataExplorerAnalyses';\r\nimport { dataExplorerEval } from './DataExplorerEval';\r\nimport { dataExplorerHelper } from './DataExplorerHelper';\r\nimport { dataExplorerRenderChart } from './DataExplorerRenderChart';\r\nimport { dataExplorerSections } from './DataExplorerSections';\r\nimport { dataExplorerDrillDown } from './table/DataExplorerDrillDown';\r\nimport { dataExplorerRenderTable } from './table/DataExplorerRenderTable';\r\n\r\n/**\r\n * Class responsible for generating the underlying virtual table of the analysis, based on the columns, rows, and all the other settings provided.\r\n */\r\nclass DataExplorerVirtualTable {\r\n    constructor() {\r\n        /** @type {VirtualTableCell[][]} */\r\n        this.tableData = null;\r\n        this.formattedTableData = null;\r\n        this.tableIdsToColumns = null;\r\n        this.tableIdsToRows = null;\r\n        this.previousTableData = null;\r\n        this.updateTableDelayed = _.debounce(this.updateTable, 500);\r\n\r\n        this._currentTableRow = null;\r\n    }\r\n\r\n    updateTable() {\r\n        this._updateMapping();\r\n\r\n        // Update table until nothing changes anymore. Slow but working approach for formulas.\r\n        // Limit to 100 updates so it doesn't freeze.\r\n        this.previousTableData = null;\r\n        for (let i = 0; i < 20; i++) {\r\n            this._updateData();\r\n\r\n            // Check if anything has changed.\r\n            let changed = false;\r\n            if (!this.previousTableData) {\r\n                changed = true;\r\n            } else {\r\n                for (let j = 0; j < this.tableData.length; j++) {\r\n                    const row = this.tableData[j];\r\n\r\n                    for (let k = 0; k < row.length; k++) {\r\n                        if (!_.isEqual(row[k].value, this.previousTableData[j][k].value)) {\r\n                            changed = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!changed) {\r\n                break;\r\n            }\r\n\r\n            this.previousTableData = this.tableData;\r\n        }\r\n\r\n        // Format values.\r\n        let scale = $('#scale').val();\r\n        this.formattedTableData = [];\r\n        for (let i = 0; i < this.tableData.length; i++) {\r\n            let row = [this.tableData[i][0].value];\r\n            let rowElement = $('#row_box > .item:nth-child(' + (i + 1) + ')');\r\n            let rowSectionType = dataExplorerSections.getSectionType(rowElement);\r\n\r\n            for (let j = 1; j < this.tableData[i].length; j++) {\r\n                let value = this.tableData[i][j].value;\r\n                let colElement = $('#column_box > .item:nth-child(' + j + ')');\r\n                let columnSectionType = dataExplorerSections.getSectionType(colElement);\r\n\r\n                if (value === null || typeof value === 'undefined' || Number.isNaN(value)) {\r\n                    value = '-';\r\n                } else {\r\n                    value = this.tableData[i][j].value;\r\n\r\n                    if (rowSectionType === 'margin' || columnSectionType === 'cagr' || columnSectionType === 'yoy') {\r\n                        value = common.formatPercent(value);\r\n                    } else if ($.isNumeric(value)) {\r\n                        value /= scale;\r\n                        value = common.formatNumber(value);\r\n                    }\r\n                }\r\n\r\n                row.push(value);\r\n            }\r\n\r\n            this.formattedTableData.push(row);\r\n        }\r\n\r\n        if (dataExplorerRenderChart.outputMode === 'table') {\r\n            dataExplorerRenderTable.updateTable();\r\n        }\r\n        if (dataExplorerRenderChart.outputMode === 'chart') {\r\n        }\r\n\r\n        dataExplorerVirtualTable.renderOutputTableOrChart();\r\n    }\r\n\r\n    // Render the output table or chart, depending on what the user chose.\r\n    renderOutputTableOrChart() {\r\n        if (dataExplorerRenderChart.outputMode === 'table') {\r\n            $('._data-explorer-template-content').css('display', '');\r\n            $('._data-explorer-chart').css('display', 'none');\r\n            dataExplorerRenderTable.updateTable();\r\n            dataExplorerRenderTable.flexgrid.collectionView.refresh();\r\n        }\r\n        if (dataExplorerRenderChart.outputMode === 'chart') {\r\n            dataExplorerRenderChart.renderChart();\r\n            $('._data-explorer-template-content').css('display', 'none');\r\n            $('._data-explorer-chart').css('display', '');\r\n        }\r\n    }\r\n\r\n    _updateMapping() {\r\n        let rows = $('#row_box > .item');\r\n        let cols = $('#column_box > .item');\r\n\r\n        // Take each row.\r\n        this.tableIdsToRows = {};\r\n        for (let i = 0; i < rows.length; i++) {\r\n            this.tableIdsToRows[\r\n                $(rows[i])\r\n                    .find('._id')\r\n                    .text()\r\n            ] = i;\r\n        }\r\n\r\n        // Take each column.\r\n        this.tableIdsToColumns = {};\r\n        for (let j = 0; j < cols.length; j++) {\r\n            this.tableIdsToColumns[\r\n                $(cols[j])\r\n                    .find('._id')\r\n                    .text()\r\n            ] = j + 1;\r\n        }\r\n    }\r\n\r\n    _updateData() {\r\n        let rows = $('#row_box > .item');\r\n        let cols = $('#column_box > .item');\r\n        let globalFilters = dataExplorerHelper.getFiltersFromDom(\r\n            $('#filter_box_a1 > .item, #filter_box_headline > .item, #filter_box_hidden > .item')\r\n        );\r\n        let dataset = storageService.getCurrentDataPoints();\r\n        const analysis = storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId];\r\n        analysis.tableRowLevel = {};\r\n        analysis.tableRowToCardNo = {};\r\n        this.tableData = [];\r\n        this._currentTableRow = 1;\r\n\r\n        // Take each row.\r\n        for (let i = 0; i < rows.length; i++) {\r\n            const rowCard = analysis.rows[i];\r\n            let row = $(rows[i]);\r\n            // TODO: Use analysis data instead of DOM.\r\n            let rowFilters = dataExplorerHelper.getFiltersFromDom(row.find('._filters [data-value]'));\r\n            let isRowFormula = row.hasClass('item-with-formula');\r\n\r\n            // Add row cells.\r\n            let rowData = this._getColumns(i, row, cols, rowFilters, isRowFormula, dataset, globalFilters);\r\n\r\n            // Add row title.\r\n            let rowTitle = row.find('._title').val();\r\n            let rowVirtualTableCell = new VirtualTableCell();\r\n            rowVirtualTableCell.value = rowTitle;\r\n            rowData.unshift(rowVirtualTableCell);\r\n\r\n            // Add row.\r\n            this.tableData.push(rowData);\r\n\r\n            // Save row data.\r\n            analysis.tableRowLevel[this._currentTableRow] = 0;\r\n            analysis.tableRowToCardNo[this._currentTableRow] = i;\r\n            analysis.tableRowToPath[this._currentTableRow] = [];\r\n            this._currentTableRow++;\r\n\r\n            // Update drill-down status.\r\n            rowCard.drillDownStatus.filters = rowCard.filters;\r\n            rowCard.drillDownStatus.expandable = dataExplorerDrillDown.canBeExpanded(rowFilters);\r\n\r\n            // Add child rows.\r\n            if (rowCard.drillDownStatus.expanded) {\r\n                this._addChildRows(\r\n                    rowCard.drillDownStatus,\r\n                    i,\r\n                    row,\r\n                    cols,\r\n                    rowFilters,\r\n                    analysis,\r\n                    dataset,\r\n                    globalFilters,\r\n                    []\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param drillDownStatus {DataExplorerDrillDownStatus}\r\n     * @param i\r\n     * @param row\r\n     * @param cols\r\n     * @param rowFilters\r\n     * @param analysis\r\n     * @param dataset\r\n     * @param globalFilters\r\n     * @param path {array}\r\n     * @private\r\n     */\r\n    _addChildRows(drillDownStatus, i, row, cols, rowFilters, analysis, dataset, globalFilters, path) {\r\n        const dimension = drillDownStatus.dimension;\r\n\r\n        let children;\r\n        if (dimension in rowFilters) {\r\n            // Drill-down by data-structures.\r\n            const value = rowFilters[dimension][0];\r\n            children = storageService.currentProject.getChildren(dimension, value);\r\n        } else {\r\n            // Drill-down by another dimension.\r\n            const matchingDataPoints = dataExplorerHelper.getMatchingDataPoints(\r\n                storageService.currentProject.dataPoints,\r\n                rowFilters\r\n            );\r\n\r\n            // Add children.\r\n            children = matchingDataPoints.reduce((result, dataPoint) => {\r\n                const value = dataPoint[dimension];\r\n\r\n                if (value) {\r\n                    result[dataPoint[dimension]] = true;\r\n                }\r\n\r\n                return result;\r\n            }, {});\r\n            children = Object.keys(children);\r\n        }\r\n\r\n        children.forEach(child => {\r\n            const childPath = concat([], path, child);\r\n\r\n            // Prepare row filters.\r\n            const childRowFilters = cloneDeep(rowFilters);\r\n            childRowFilters[dimension] = [child];\r\n\r\n            // Add child row cells.\r\n            const rowData = this._getColumns(i, row, cols, childRowFilters, false, dataset, globalFilters);\r\n\r\n            // Add title.\r\n            let rowVirtualTableCell = new VirtualTableCell();\r\n            rowVirtualTableCell.value = child;\r\n            rowData.unshift(rowVirtualTableCell);\r\n\r\n            // Add row.\r\n            this.tableData.push(rowData);\r\n\r\n            // Save row data.\r\n            analysis.tableRowLevel[this._currentTableRow] = childPath.length;\r\n            analysis.tableRowToCardNo[this._currentTableRow] = i;\r\n            analysis.tableRowToPath[this._currentTableRow] = childPath;\r\n            this._currentTableRow++;\r\n\r\n            // Update drill-down status.\r\n            if (!(child in drillDownStatus.childStatuses)) {\r\n                drillDownStatus.childStatuses[child] = new DataExplorerDrillDownStatus();\r\n            }\r\n            const childDrillDownStatus = drillDownStatus.childStatuses[child];\r\n            childDrillDownStatus.filters = childRowFilters;\r\n            childDrillDownStatus.expandable = dataExplorerDrillDown.canBeExpanded(childRowFilters);\r\n\r\n            // Add child rows.\r\n            if (childDrillDownStatus.expanded) {\r\n                this._addChildRows(\r\n                    childDrillDownStatus,\r\n                    i,\r\n                    row,\r\n                    cols,\r\n                    childRowFilters,\r\n                    analysis,\r\n                    dataset,\r\n                    globalFilters,\r\n                    childPath\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    _getColumns(i, row, cols, rowFilters, isRowFormula, dataset, globalFilters) {\r\n        const rowData = [];\r\n\r\n        // Take each column.\r\n        for (let j = 0; j < cols.length; j++) {\r\n            let col = $(cols[j]);\r\n            let cell = 0;\r\n            let colFilters = dataExplorerHelper.getFiltersFromDom(col.find('[data-value]'));\r\n            let isColFormula = col.hasClass('item-with-formula');\r\n            let rowSectionType = dataExplorerSections.getSectionType(row);\r\n            let columnSectionType = dataExplorerSections.getSectionType(col);\r\n            let filters = Object.assign({}, globalFilters, rowFilters, colFilters);\r\n            let cellData = storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId].getCellData(\r\n                i,\r\n                j\r\n            );\r\n\r\n            // Use custom formula, if any.\r\n            if (cellData.customFormula) {\r\n                if (cellData.customFormula.slice(0, 1) === '=') {\r\n                    const customFormula = cellData.customFormula.slice(1);\r\n                    cell = dataExplorerEval.evalFormula(this, customFormula, filters, null, null);\r\n                } else {\r\n                    cell = cellData.customFormula;\r\n                }\r\n            } else {\r\n                switch (rowSectionType) {\r\n                    case 'margin':\r\n                        if (columnSectionType === 'yoy' || columnSectionType === 'cagr' || isColFormula) {\r\n                            cell = null;\r\n                        } else {\r\n                            const filters1 = Object.assign({}, filters, {\r\n                                attribute: row.find('._year1 option:selected').text()\r\n                            });\r\n                            const filters2 = Object.assign({}, filters, {\r\n                                attribute: row.find('._year2 option:selected').text()\r\n                            });\r\n                            let gp = dataExplorerHelper.getSumOfDataPoints(\r\n                                dataExplorerHelper.getMatchingDataPoints(dataset, filters1)\r\n                            );\r\n                            let rev = dataExplorerHelper.getSumOfDataPoints(\r\n                                dataExplorerHelper.getMatchingDataPoints(dataset, filters2)\r\n                            );\r\n                            cell = gp / rev;\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (row.attr('data-value') === 'Blank') {\r\n                            cell = null;\r\n                            break;\r\n                        }\r\n\r\n                        switch (columnSectionType) {\r\n                            case 'yoy':\r\n                            case 'delta':\r\n                            case 'cagr':\r\n                                {\r\n                                    let y1 = col.find('._year1').val();\r\n                                    let y2 = col.find('._year2').val();\r\n                                    let y1item = $(\r\n                                        '#attr_dim_list .item[data-filter-type=time][data-value=\"' + y1 + '\"]'\r\n                                    );\r\n                                    let y2item = $(\r\n                                        '#attr_dim_list .item[data-filter-type=time][data-value=\"' + y2 + '\"]'\r\n                                    );\r\n                                    const filters1 = Object.assign({}, filters, { time: y1item.text() });\r\n                                    const filters2 = Object.assign({}, filters, { time: y2item.text() });\r\n                                    let y1value = dataExplorerHelper.getSumOfDataPoints(\r\n                                        dataExplorerHelper.getMatchingDataPoints(dataset, filters1)\r\n                                    );\r\n                                    let y2value = dataExplorerHelper.getSumOfDataPoints(\r\n                                        dataExplorerHelper.getMatchingDataPoints(dataset, filters2)\r\n                                    );\r\n\r\n                                    switch (columnSectionType) {\r\n                                        case 'yoy':\r\n                                            cell = y2value / y1value - 1;\r\n                                            break;\r\n\r\n                                        case 'delta':\r\n                                            cell = y2value - y1value;\r\n                                            break;\r\n\r\n                                        case 'cagr':\r\n                                            cell = Math.pow(y2value / y1value, 1 / (y2 - y1)) - 1;\r\n                                            break;\r\n                                    }\r\n                                }\r\n                                break;\r\n\r\n                            default: {\r\n                                if (col.attr('data-value') === 'Blank') {\r\n                                    cell = null;\r\n                                    break;\r\n                                }\r\n\r\n                                if (!isRowFormula && !isColFormula) {\r\n                                    // Process multiple datapoint values if appropriate.\r\n                                    cell = dataExplorerHelper.getSumOfDataPoints(\r\n                                        dataExplorerHelper.getMatchingDataPoints(dataset, filters),\r\n                                        true\r\n                                    );\r\n                                } else if (isRowFormula) {\r\n                                    cell = dataExplorerEval.evalRowFormula(\r\n                                        this,\r\n                                        row.find('._formula').attr('data-formula'),\r\n                                        filters,\r\n                                        j + 1\r\n                                    );\r\n                                } else if (isColFormula) {\r\n                                    cell = dataExplorerEval.evalColumnFormula(\r\n                                        this,\r\n                                        col.find('._formula').attr('data-formula'),\r\n                                        filters,\r\n                                        i\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (!(cell instanceof VirtualTableCell)) {\r\n                const value = cell;\r\n                cell = new VirtualTableCell();\r\n                cell.value = value;\r\n            }\r\n\r\n            rowData.push(cell);\r\n        }\r\n\r\n        return rowData;\r\n    }\r\n}\r\n\r\nexport const dataExplorerVirtualTable = new DataExplorerVirtualTable();\r\n","import { assign, setWith } from 'lodash';\r\nimport { common } from '../../../Common';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { dataExplorerAnalyses } from '../DataExplorerAnalyses';\r\nimport { dataExplorerImport } from '../DataExplorerImport';\r\nimport { dataExplorerRenderTable } from '../table/DataExplorerRenderTable';\r\n\r\nclass DataExplorerCellEditing {\r\n    createDataPoint(row, col, value) {\r\n        let success = true;\r\n        let alertMessage = '';\r\n\r\n        const attribute = $($('#row_box .item.row-or-column-card')[row - 1]).attr('data-value');\r\n        const scale = $('#scale').val();\r\n\r\n        // Create data points object.\r\n        let datapoint = {\r\n            value: value,\r\n            attribute: attribute,\r\n            scale: scale,\r\n            source: 'manual'\r\n        };\r\n\r\n        const rowCard = $($('#row_box .item.row-or-column-card')[row - 1]);\r\n        const rowDimensions = rowCard.find('.item-group .item');\r\n        rowDimensions.each((index, el) => {\r\n            const dimension = $(el).attr('data-filter-type');\r\n            const val = $(el).attr('data-value');\r\n\r\n            datapoint[dimension] = val;\r\n        });\r\n\r\n        const colCard = $($('#column_box .item.row-or-column-card')[col - 1]);\r\n        const cardDimensions = colCard.find('.item-group .item');\r\n        cardDimensions.each((index, el) => {\r\n            const dimension = $(el).attr('data-filter-type');\r\n            const val = $(el).attr('data-value');\r\n\r\n            if (datapoint.hasOwnProperty(dimension)) {\r\n                success = false;\r\n                alertMessage =\r\n                    'There are multiple values for the \"' +\r\n                    dimension +\r\n                    '\" dimension: ' +\r\n                    val +\r\n                    ' and ' +\r\n                    datapoint[dimension] +\r\n                    '.';\r\n\r\n                return false;\r\n            } else {\r\n                datapoint[dimension] = val;\r\n            }\r\n        });\r\n\r\n        $('.global-filter-container .global-filter .item').each((index, el) => {\r\n            const dimension = $(el).attr('data-filter-type');\r\n            const val = $(el).attr('data-value');\r\n\r\n            if (datapoint.hasOwnProperty(dimension)) {\r\n                success = false;\r\n                alertMessage =\r\n                    'There are multiple values for the \"' +\r\n                    dimension +\r\n                    '\" dimension: ' +\r\n                    val +\r\n                    ' and ' +\r\n                    datapoint[dimension] +\r\n                    '.';\r\n\r\n                return false;\r\n            } else {\r\n                datapoint[dimension] = val;\r\n            }\r\n        });\r\n\r\n        return {\r\n            success: success,\r\n            alert: alertMessage,\r\n            datapoint: datapoint\r\n        };\r\n    }\r\n\r\n    cellEditValidation(attr) {\r\n        if (common.checkIfCellHasChanged(attr.oldVal, attr.newVal, attr.dataType)) {\r\n            return common.checkIfCellHasChanged(attr.oldVal, attr.newVal, attr.dataType);\r\n        }\r\n\r\n        const cellVal = attr.newVal;\r\n        if (cellVal === '' || cellVal === 'null') {\r\n            alert('Please enter a valid value for this cell.');\r\n\r\n            return true;\r\n        }\r\n\r\n        // Validate.\r\n        const createDataPoint = this.createDataPoint(attr.row, attr.col, cellVal);\r\n        if (!createDataPoint.success) {\r\n            alert(createDataPoint.alert);\r\n\r\n            return true;\r\n        }\r\n\r\n        let dataPoint = createDataPoint.datapoint;\r\n        const validation = storageService.getCurrentProject().validateDataPoint(dataPoint);\r\n        const cellData = storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId].getCellData(\r\n            attr.row - 1,\r\n            attr.col - 1\r\n        );\r\n\r\n        if (cellData.numberOfDataPoints > 1) {\r\n            alert('Cannot paste into a cell formed from multiple data points.');\r\n            return;\r\n        }\r\n\r\n        if (validation.success === false && cellData.numberOfDataPoints !== 1) {\r\n            alert(validation.error);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    cellEditAddDataPoint(attr) {\r\n        const createDataPoint = this.createDataPoint(attr.row, attr.col, attr.val);\r\n        const dataPoint = createDataPoint.datapoint;\r\n        const cellData = storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId].getCellData(\r\n            attr.row - 1,\r\n            attr.col - 1\r\n        );\r\n        if (cellData.numberOfDataPoints === 1) {\r\n            dataPoint.id = cellData.dataPointIds[0];\r\n        }\r\n\r\n        let modifiedFromAnalysis = false;\r\n        if (attr.hasOwnProperty('copiedFromRightTable') && attr.copiedFromRightTable) {\r\n            modifiedFromAnalysis = true;\r\n        }\r\n        const result = storageService.getCurrentProject().addDataPoint(dataPoint, modifiedFromAnalysis);\r\n        if (result.success === false) {\r\n            alert(result.error);\r\n            dataExplorerRenderTable.flexgrid.setCellData(attr.row, attr.col, attr.oldVal);\r\n        }\r\n\r\n        const tableCol = dataExplorerImport.rigthTableSelection.col1 + attr.colCounter;\r\n        const tableRow = dataExplorerImport.rigthTableSelection.row1 + attr.rowCounter;\r\n        if (attr.hasOwnProperty('copiedFromRightTable') && attr.copiedFromRightTable) {\r\n            const matchingDataPoint = storageService.getCurrentProject().getMatchingDataPoint(dataPoint);\r\n\r\n            if (matchingDataPoint.source !== dataExplorerImport.uuid) {\r\n                matchingDataPoint.source = dataExplorerImport.uuid;\r\n\r\n                const prevTable = storageService.getCurrentProject().sourceFiles[matchingDataPoint.source];\r\n                if (prevTable.hasOwnProperty('cellProperties')) {\r\n                    Object.keys(prevTable.cellProperties).forEach(col => {\r\n                        Object.keys(prevTable.cellProperties[col]).forEach(row => {\r\n                            let cell = prevTable.cellProperties[col][row];\r\n\r\n                            if (cell.id === dataPoint.id) {\r\n                                setWith(prevTable.cellProperties, [col, row], {}, Object);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (attr.hasOwnProperty('copiedFromRightTable') && attr.copiedFromRightTable) {\r\n            let dataPointCopy = assign({}, dataPoint);\r\n            dataPointCopy.failedSaving = false;\r\n            dataPointCopy.cellType = 'data';\r\n\r\n            const importedTable = storageService.getCurrentProject().sourceFiles[dataExplorerImport.uuid];\r\n            let cellProperties = importedTable.cellProperties;\r\n            setWith(cellProperties, [tableCol, tableRow], dataPointCopy, Object);\r\n        }\r\n\r\n        // Save project.\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    cellEditEnding(s, e) {\r\n        const oldVal = s.getCellData(e.row, e.col);\r\n        const newVal = s.activeEditor.value;\r\n        const dataType = s.columns[e.col].dataType;\r\n        const col = e._rng._col;\r\n        const row = e._rng._row;\r\n\r\n        e.cancel = this.cellEditValidation({\r\n            oldVal: oldVal,\r\n            newVal: newVal,\r\n            dataType: dataType,\r\n            row: row,\r\n            col: col\r\n        });\r\n    }\r\n\r\n    cellEditEnded(s, e) {\r\n        // Edit was cancelled?\r\n        if (e.cancel) {\r\n            return;\r\n        }\r\n\r\n        // TODO: Show loading screen.\r\n        const val = $(s._activeCell).text();\r\n        const col = e._rng._col;\r\n        const row = e._rng._row;\r\n\r\n        this.cellEditAddDataPoint({\r\n            row: row,\r\n            col: col,\r\n            val: val,\r\n            oldVal: s.getCellData(row, col)\r\n        });\r\n    }\r\n}\r\n\r\nexport const dataExplorerCellEditing = new DataExplorerCellEditing();\r\n","import { isEqual } from 'lodash';\r\nimport { sourceDataPoints } from '../../../tabs/source-data/SourceDataPoints';\r\nimport { dataExplorerFormulas } from '../DataExplorerFormulas';\r\n\r\nclass DataExplorerCellViewer {\r\n    constructor() {\r\n        /** @type {VirtualTableCell} */\r\n        this.currentCellData = null;\r\n        this.formulaCellViewer = $('#dataExplorerFormulaCellViewer');\r\n        this.formulaElement = this.formulaCellViewer.find('._formula');\r\n        this.formulaElement.on('click', 'i', e => {\r\n            const icon = $(e.target);\r\n            let filters;\r\n            try {\r\n                filters = JSON.parse(icon.attr('data-args'));\r\n            } catch (e) {\r\n                filters = {};\r\n            }\r\n\r\n            let dataPointIds = [];\r\n            this.currentCellData.dataPointIdsPerQuery.forEach(data => {\r\n                if (isEqual(filters, data.filters)) {\r\n                    dataPointIds = data.ids;\r\n                }\r\n            });\r\n\r\n            this.formulaCellViewer.modal('hide');\r\n            this.showDataPointsViewer(dataPointIds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {VirtualTableCell} cellData\r\n     */\r\n    showCellViewer(cellData) {\r\n        if (cellData.dataPointIdsPerQuery.length < 2) {\r\n            this.showDataPointsViewer(cellData.dataPointIds);\r\n        } else {\r\n            this.showFormulaCellViewer(cellData);\r\n        }\r\n    }\r\n\r\n    showDataPointsViewer(dataPointIds) {\r\n        $('#main_nav_tabs a[href=\"#source_data\"]').trigger('click');\r\n        $('._mode > label:nth-of-type(2)').trigger('click');\r\n        $('body').addClass('showing-multiple-data-values');\r\n        $('body').append('<div class=\"multiple-data-close-button\"><i class=\"fa fa-chevron-left\"></i> Back</div>');\r\n        $('#source_data_data_points .input-group, ._mode').css('visibility', 'hidden');\r\n\r\n        $('.multiple-data-close-button').on('click', () => {\r\n            $('#main_nav_tabs a[href=\"#output_table\"]').trigger('click');\r\n\r\n            this.removeMultipleDataPointsFilter();\r\n        });\r\n\r\n        sourceDataPoints.setIdFilter(dataPointIds);\r\n\r\n        $('#main_nav_tabs a').on('click', () => {\r\n            this.removeMultipleDataPointsFilter();\r\n        });\r\n\r\n        sourceDataPoints.sync();\r\n    }\r\n\r\n    removeMultipleDataPointsFilter() {\r\n        sourceDataPoints.setIdFilter([]);\r\n        $('.multiple-data-close-button').remove();\r\n        $('#source_data_data_points .input-group, ._mode').css('visibility', 'visible');\r\n\r\n        sourceDataPoints.sync();\r\n    }\r\n\r\n    showFormulaCellViewer(cellData) {\r\n        this.currentCellData = cellData;\r\n        const result = dataExplorerFormulas.convertFormulaToHtml(cellData.formula);\r\n        this.formulaElement.html(result);\r\n        this.formulaCellViewer.modal('show');\r\n    }\r\n}\r\n\r\nexport const dataExplorerCellViewer = new DataExplorerCellViewer();\r\n","import { storageService } from '../../../services/StorageService';\r\nimport { dataExplorerAnalyses } from '../DataExplorerAnalyses';\r\nimport { dataExplorerVirtualTable } from '../DataExplorerVirtualTable';\r\n\r\nclass DataExplorerDrillDown {\r\n    constructor() {\r\n        $(document).on('click', '#data-explorer-table .wj-cell ._drilldown-button', event => {\r\n            this._onClick(event);\r\n        });\r\n\r\n        $.contextMenu({\r\n            selector:\r\n                '#data-explorer-table .wj-cells .wj-row:not(:first-child):not(:nth-child(2)) .wj-cell:first-child',\r\n            build: ($trigger, e) => {\r\n                const dimensions = storageService.getCurrentProject().getDimensions();\r\n                const items = {};\r\n\r\n                dimensions.forEach(dimension => {\r\n                    if (dimension.special) {\r\n                        return;\r\n                    }\r\n\r\n                    items[dimension.slug] = {\r\n                        name: 'Expand by ' + dimension.label,\r\n                        callback: (key, opt) => {\r\n                            const $this = $($trigger.target);\r\n                            const row = $this.attr('data-row');\r\n                            const analysis =\r\n                                storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId];\r\n                            const cardNumber = analysis.tableRowToCardNo[row];\r\n                            const card = analysis.rows[cardNumber];\r\n                            const path = analysis.tableRowToPath[row];\r\n                            const drillDownStatus = card.getDrillDownStatusByPath(path);\r\n                            this._toggleDrillDownStatus(drillDownStatus, opt, true);\r\n                        }\r\n                    };\r\n                });\r\n\r\n                return {\r\n                    items: items\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    canBeExpanded(filters) {\r\n        return this.getExpandableDimensions(filters).length > 0;\r\n    }\r\n\r\n    getExpandableDimensions(filters) {\r\n        const drillable = [];\r\n\r\n        // Check if at least one dimension\r\n        for (const dimensionSlug in filters) {\r\n            const values = filters[dimensionSlug];\r\n\r\n            // Cannot filter if there is more than one value. E.g. both \"2015\" and \"2016\".\r\n            if (values.length !== 1) {\r\n                continue;\r\n            }\r\n\r\n            // Check if there is at least one children.\r\n            const value = values[0];\r\n            const children = storageService.getCurrentProject().getChildren(dimensionSlug, value);\r\n            if (children.length > 0) {\r\n                drillable.push(dimensionSlug);\r\n            }\r\n        }\r\n\r\n        return drillable;\r\n    }\r\n\r\n    _formatItem(s, e) {\r\n        if (\r\n            !storageService.getCurrentProject() ||\r\n            e.panel !== s.cells || // Skip grey cells like A, B, C, 1, 2, 3, etc.\r\n            (e.row === 0 && e.col === 0) || // Skip A1 cell.\r\n            (e.row !== 0 && e.col !== 0) // Only consider header cells.\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const analysis = storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId];\r\n\r\n        // Add indent.\r\n        if (e.col === 0) {\r\n            $(e.cell).css('padding-left', 3 + analysis.tableRowLevel[e.row] * 20 + 'px');\r\n        }\r\n\r\n        // TODO: Also consider other columns.\r\n        if (e.col !== 0) {\r\n            return;\r\n        }\r\n\r\n        // Remember which row this cell represents.\r\n        $(e.cell).attr('data-row', e.row);\r\n\r\n        // Add drill-down button.\r\n        if (!this._addDrillDownButton(analysis, e)) {\r\n            $(e.cell).prepend('<i class=\"_empty-margin\"></i>');\r\n        }\r\n    }\r\n\r\n    _addDrillDownButton(analysis, e) {\r\n        const cardNumber = analysis.tableRowToCardNo[e.row];\r\n        const card = analysis.rows[cardNumber];\r\n\r\n        if (!card) {\r\n            return false;\r\n        }\r\n\r\n        const path = analysis.tableRowToPath[e.row];\r\n        const drillDownStatus = card.getDrillDownStatusByPath(path);\r\n\r\n        if (!drillDownStatus.expandable && !drillDownStatus.expanded) {\r\n            return false;\r\n        }\r\n\r\n        const buttonClass = drillDownStatus.expanded ? 'fa-minus' : 'fa-plus';\r\n        const button = $(`<i class=\"_drilldown-button fa ${buttonClass}\" data-row=\"${e.row}\"></i>`);\r\n        $(e.cell).prepend(button);\r\n\r\n        return true;\r\n    }\r\n\r\n    _onClick(event) {\r\n        const $this = $(event.target);\r\n        const row = $this.attr('data-row');\r\n        const analysis = storageService.currentProject.analyses[dataExplorerAnalyses.currentAnalysisId];\r\n        const cardNumber = analysis.tableRowToCardNo[row];\r\n        const card = analysis.rows[cardNumber];\r\n        const path = analysis.tableRowToPath[row];\r\n        const drillDownStatus = card.getDrillDownStatusByPath(path);\r\n\r\n        this._toggleDrillDownStatus(drillDownStatus);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param drillDownStatus {DataExplorerDrillDownStatus}\r\n     * @param dimension {string}\r\n     * @param expanded\r\n     * @private\r\n     */\r\n    _toggleDrillDownStatus(drillDownStatus, dimension = null, expanded = null) {\r\n        // Set expanded status.\r\n        drillDownStatus.expanded = expanded === null ? !drillDownStatus.expanded : expanded;\r\n\r\n        if (dimension) {\r\n            // Use provided dimension.\r\n            drillDownStatus.dimension = dimension;\r\n        } else if (!drillDownStatus.dimension) {\r\n            // Automatically get dimension.\r\n            const drillableDimensions = this.getExpandableDimensions(drillDownStatus.filters);\r\n            drillDownStatus.dimension = drillableDimensions[0];\r\n        }\r\n\r\n        dataExplorerVirtualTable.updateTable();\r\n    }\r\n}\r\n\r\nexport const dataExplorerDrillDown = new DataExplorerDrillDown();\r\n","import { concat, get } from 'lodash';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { dataExplorer } from '../DataExplorer';\r\nimport { dataExplorerVirtualTable } from '../DataExplorerVirtualTable';\r\nimport { dataExplorerCellEditing } from '../table/DataExplorerCellEditing';\r\nimport { dataExplorerCellViewer } from '../table/DataExplorerCellViewer';\r\nimport { dataExplorerDrillDown } from '../table/DataExplorerDrillDown';\r\n\r\n/**\r\n * Class to render a HTML table based on Wijmo's FlexGrid component.\r\n */\r\nclass DataExplorerRenderTable {\r\n    constructor() {\r\n        this._inUpdatedLayout = false;\r\n        this._firstTimeRefreshTable = false;\r\n        this._tableContainer = $('#data-explorer-table');\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            this.flexgrid = new wijmo.grid.FlexGrid(this._tableContainer[0], {\r\n                isReadOnly: true,\r\n                itemsSource: [],\r\n                allowSorting: false,\r\n                allowDragging: 'None',\r\n                updatedLayout: () => {\r\n                    if (this._inUpdatedLayout) {\r\n                        this._inUpdatedLayout = false;\r\n                    } else {\r\n                        this._inUpdatedLayout = true;\r\n                        this.flexgrid.autoSizeColumns(0, this.flexgrid.columns.length);\r\n                    }\r\n                },\r\n                formatItem: (s, e) => {\r\n                    this._formatItem(s, e);\r\n                    dataExplorerDrillDown._formatItem(s, e);\r\n                },\r\n                updatedView: () => {\r\n                    this.flexgrid.columns.map((column, index) => {\r\n                        this.flexgrid.columns[index].header = XLSX.utils.encode_col(index);\r\n                    });\r\n                    $(this.flexgrid.rowHeaders._e)\r\n                        .find('.wj-row .wj-cell.wj-header')\r\n                        .each(function(index) {\r\n                            $(this).text(index + 1);\r\n                        });\r\n                },\r\n                beginningEdit: (s, e) => {\r\n                    const col = e._rng._col;\r\n                    const row = e._rng._row;\r\n\r\n                    // Disable edits for cells matching multiple data-points.\r\n                    let cellData = get(dataExplorerVirtualTable, `tableData[${row - 1}][${col}]`);\r\n                    if (cellData.numberOfDataPoints > 1) {\r\n                        // Open cell-viewer instead.\r\n                        dataExplorerCellViewer.showCellViewer(cellData);\r\n\r\n                        e.cancel = true;\r\n                        return;\r\n                    }\r\n\r\n                    // Disable edits if cell has custom formula.\r\n                    if (cellData.customFormula) {\r\n                        e.cancel = true;\r\n                        return;\r\n                    }\r\n                },\r\n                cellEditEnding: (s, e) => {\r\n                    dataExplorerCellEditing.cellEditEnding(s, e);\r\n                },\r\n                cellEditEnded: (s, e) => {\r\n                    dataExplorerCellEditing.cellEditEnded(s, e);\r\n                },\r\n                selectionChanged: (s, e) => {\r\n                    dataExplorer.dataExplorerCellFormulas.onSelectionChanged(s, e);\r\n                },\r\n                onPastingCell: () => {\r\n                    console.log('Do not do anything here.');\r\n                }\r\n            });\r\n\r\n        console.log('this.flexgrid-->', this.flexgrid);\r\n    }\r\n\r\n    updateTable() {\r\n        let cols = $('#column_box > .item');\r\n\r\n        // Prepare new item source.\r\n        let headerRow = [''];\r\n        for (let i = 0; i < cols.length; i++) {\r\n            headerRow.push(\r\n                $(cols[i])\r\n                    .find('input')\r\n                    .val()\r\n            );\r\n        }\r\n        let itemsSource = concat([], dataExplorerVirtualTable.formattedTableData);\r\n        itemsSource.unshift(headerRow);\r\n\r\n        // Change itemSource of Wijmo table, while keeping the same selection.\r\n        const selection = this.flexgrid.selection;\r\n        this.flexgrid.itemsSource = itemsSource;\r\n        this.flexgrid.collectionView.refresh();\r\n        this.flexgrid.selection = selection;\r\n\r\n        if (!this._firstTimeRefreshTable) {\r\n            this._firstTimeRefreshTable = true;\r\n\r\n            setTimeout(() => {\r\n                this.flexgrid.collectionView.refresh();\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    _formatItem(s, e) {\r\n        if (!storageService.getCurrentProject()) {\r\n            return;\r\n        }\r\n\r\n        // Ignore header cells.\r\n        if (e.panel !== s.cells) {\r\n            return;\r\n        }\r\n\r\n        const col = e._rng._col;\r\n        const row = e._rng._row;\r\n        const cellElement = $(e.cell);\r\n\r\n        // Cells are reused, so we need to reset styling and attributes.\r\n        {\r\n            cellElement.removeClass('multiple-value-datapoint');\r\n            cellElement.attr('data-toggle', null);\r\n            cellElement.attr('data-placement', null);\r\n            cellElement.attr('data-title', null);\r\n            cellElement.css({\r\n                'padding-left': null\r\n            });\r\n\r\n            // Remove tooltip, if any,\r\n            const tooltip = cellElement.data('tooltipInstance');\r\n            if (tooltip) {\r\n                tooltip.dispose();\r\n            }\r\n        }\r\n\r\n        if (row === 0) {\r\n            cellElement.css('font-weight', 'bold');\r\n        }\r\n\r\n        if (col > 0) {\r\n            cellElement.css('text-align', 'right');\r\n        }\r\n\r\n        if (col === 0 && row === 0) {\r\n            const filtersToDisplay = $(`#filter_box_a1 .item`) ? $(`#filter_box_a1 .item`) : '';\r\n            this._displayFiltersWithSeparator(\r\n                filtersToDisplay,\r\n                dataExplorerRenderTable.flexgrid.cells.getCellElement(0, 0)\r\n            );\r\n\r\n            const headlineFilter = $(`#filter_box_headline .item`) ? $(`#filter_box_headline .item`) : '';\r\n            this._displayFiltersWithSeparator(\r\n                headlineFilter,\r\n                '._data-explorer-template-content .headline-filter-container'\r\n            );\r\n        }\r\n\r\n        // Add tooltip for cells matching multiple data-points.\r\n        // TODO: Keep a reference of these tooltips and properly dispose of them. Memory leak;\r\n        let cellData = get(dataExplorerVirtualTable, `tableData[${row - 1}][${col}]`);\r\n        if (cellData && cellData.numberOfDataPoints > 1) {\r\n            const title = `This value is calculated from ${\r\n                cellData.numberOfDataPoints\r\n            } data points. Click for more info.`;\r\n            cellElement.addClass('multiple-value-datapoint');\r\n\r\n            const tooltip = new Tooltip(cellElement, {\r\n                container: document.body,\r\n                boundariesElement: document.body,\r\n                placement: 'bottom',\r\n                title: title\r\n            });\r\n            cellElement.data('tooltipInstance', tooltip);\r\n        }\r\n    }\r\n\r\n    _displayFiltersWithSeparator(filters, target) {\r\n        if (!filters) {\r\n            return;\r\n        }\r\n\r\n        filters = filters.toArray();\r\n        filters = filters.map(filter => {\r\n            return $(filter).text();\r\n        });\r\n\r\n        const title = Object.values(filters).join(' - ');\r\n        $(target).text(title);\r\n        $(target).val(title);\r\n    }\r\n}\r\n\r\nexport const dataExplorerRenderTable = new DataExplorerRenderTable();\r\n","import get from 'lodash/get';\r\nimport { common } from '../../Common';\r\nimport { constants } from '../../Constants';\r\nimport { importXlsxService } from '../../services/ImportXlsxService';\r\nimport { sourceFilesService } from '../../services/SourceFilesService';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { Tab } from '../../Tab';\r\nimport { sourceDataFilesSidebar } from '../../tabs/source-data/add-file-workflow/SourceDataFilesSidebar';\r\nimport { sourceDataFiles } from '../../tabs/source-data/SourceDataFiles';\r\n\r\nclass Dropbox extends Tab {\r\n    constructor() {\r\n        super();\r\n        this.tabHref = '#dropbox';\r\n    }\r\n\r\n    init() {\r\n        this.filesContainer = $('#dropbox_data_files');\r\n        this.fileListContainer = this.filesContainer.find('.file-list');\r\n        this.filesTemplate = this.filesContainer.find('._template').detach();\r\n        this.fileListContainer.find('#source_data_import_table').hide();\r\n\r\n        $(document).ready(() => {\r\n            // Upload File\r\n\r\n            console.log('click on source_data_import_table_button ');\r\n            $('#source_data_import_table_button').on('click', function() {\r\n                $('#source_data_import_table').trigger('click');\r\n            });\r\n            $('#source_data_import_table').on('change', e => {\r\n                this.loadUploadedFile(e.target.files[0]);\r\n            });\r\n\r\n            // Show all data\r\n            $('._submenu [value=\"data_points\"]').on('click', function() {\r\n                $('.extending-sub-menu a[href=\"#source_data\"]').trigger('click');\r\n                $('#source_data input[name=\"source_data_mode\"][value=\"data_points\"]').trigger('click');\r\n            });\r\n\r\n            // P/C & Mapping\r\n            $('._submenu [value=\"data_structures\"]').on('click', function() {\r\n                $('.extending-sub-menu a[href=\"#source_data\"]').trigger('click');\r\n                $('#source_data input[name=\"source_data_mode\"][value=\"data_structures\"]').trigger('click');\r\n            });\r\n\r\n            dropbox.fileCounter();\r\n\r\n            $('#dropbox_file_list').on('change', function() {\r\n                dropbox.fileCounter();\r\n            });\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        this.displaySourceFiles();\r\n    }\r\n\r\n    fileCounter() {\r\n        let fileNumber = $('#dropbox_file_list ._file').length;\r\n        let pluralIndicator = '';\r\n        if (fileNumber !== 1) {\r\n            pluralIndicator = 's';\r\n        }\r\n        $('._file_counter').html('<strong>' + fileNumber + '</strong>' + ' document' + pluralIndicator);\r\n    }\r\n\r\n    displaySourceFiles() {\r\n        let projectKey = localStorage.getItem('current_project_key');\r\n        let thisproject = sourceFilesService.getCurrentSourceFile() || JSON.parse(localStorage.getItem(projectKey));\r\n\r\n        let sourceFiles =\r\n            thisproject == null ? storageService.currentProject.sourceFiles : get(thisproject, `sourceFiles`);\r\n\r\n        if (!localStorage.getItem('blobExcelData')) this.filesContainer.find('._file:not(._button)').remove();\r\n        for (const uuid in sourceFiles) {\r\n            /** @type {SourceFile} */\r\n            const file = sourceFiles[uuid];\r\n\r\n            // Skip hidden files.\r\n            if (file.hidden) {\r\n                continue;\r\n            }\r\n\r\n            if (!localStorage.getItem('blobExcelData')) {\r\n                // Create div.\r\n                const div = this.filesTemplate.clone();\r\n                div.removeClass('_template');\r\n                div.find('._name').text(file.name);\r\n                div.attr('data-uuid', uuid);\r\n\r\n                // Show progress.\r\n                {\r\n                    const ratio = file.getTotalCompletionPercentage();\r\n                    const color = chroma\r\n                        .mix(\r\n                            constants.FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN,\r\n                            constants.FILE_WORKFLOW_CELL_PROGRESS_COLOR_END,\r\n                            ratio,\r\n                            'lab'\r\n                        )\r\n                        .hex();\r\n                    div.find('._percentage')\r\n                        .html(Math.round(ratio * 100) + '%')\r\n                        .css('background-color', color);\r\n                }\r\n                //\r\n                this.fileListContainer.append(div);\r\n            }\r\n        }\r\n\r\n        // Load saved files.\r\n        $('#dropbox_file_list')\r\n            .find('._file:not(._button)')\r\n            .on('click', e => {\r\n                const uuid = $(e.currentTarget).data('uuid');\r\n                this.loadFileByUuid(uuid);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load a file already present in the project, by matching against its UUID. Jump to the File Workflow screen.\r\n     * @param uuid\r\n     */\r\n    async loadFileByUuid(uuid) {\r\n        await common.showLoading();\r\n\r\n        sourceFilesService.currentUuid = uuid;\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n        sourceDataFiles.flexGrid.itemsSource = sourceFile.itemsSource;\r\n        sourceDataFiles.flexGrid.collectionView.refresh();\r\n\r\n        $('ul.nav a[href=\"#source_data\"]').trigger('click');\r\n        $('input[name=source_data_mode][value=files]').trigger('click');\r\n\r\n        $('#source_data_files_pre_ingestion').data('active', true);\r\n\r\n        // Show table title.\r\n        $('#source_data_files_sidebar ._table-name').text(sourceFile.name);\r\n\r\n        // Hide previous screen.\r\n        $('#source_data_files_file_list').hide();\r\n        $('#source_data_files_pre_ingestion').show();\r\n\r\n        sourceDataFilesSidebar.startWorkflow();\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n\r\n        const columns = sourceDataFiles.flexGrid.itemsSource[0];\r\n        columns.map((col, colNr) => {\r\n            if (col === '') {\r\n                sourceDataFiles.flexGrid.autoSizeColumn(colNr);\r\n            }\r\n        });\r\n\r\n        common.hideLoading();\r\n    }\r\n\r\n    /**\r\n     * Save and load an uploaded file.\r\n     * @param file\r\n     * @returns {Promise<void>}\r\n     */\r\n    async loadUploadedFile(file) {\r\n        await common.showLoading();\r\n\r\n        const uuid = await importXlsxService.importXlsx(file);\r\n        await this.loadFileByUuid(uuid);\r\n    }\r\n}\r\n\r\nexport const dropbox = new Dropbox();\r\n","import { common } from '../../Common';\r\nimport { dimensionTypesService } from '../../services/DimensionTypesService';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { Tab } from '../../Tab';\r\nimport { sourceDataPointsSidebar } from '../../tabs/source-data/SourceDataPointsSidebar';\r\n\r\nclass ProjectSetup extends Tab {\r\n    constructor() {\r\n        super();\r\n        this.tabHref = '#project_setup';\r\n        this.table = null;\r\n        this.columns = null;\r\n    }\r\n\r\n    init() {\r\n        this.container = $('#project_setup');\r\n        this.dimensionsTable = this.container.find('._dimensions');\r\n        this.dimensionsTableTemplate = this.dimensionsTable.find('._template').detach();\r\n\r\n        this.container.find('._add-custom-dimension').on('click', () => {\r\n            sourceDataPointsSidebar.addCustomDimension();\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        const project = storageService.getCurrentProject();\r\n        const tbody = this.dimensionsTable.find('tbody').html('');\r\n        const dimensions = project.getDimensions(true);\r\n\r\n        dimensions.forEach(dimension => {\r\n            const tr = this.dimensionsTableTemplate.clone();\r\n\r\n            tr.find('._name').html(dimension.label);\r\n\r\n            if (!tr.find('._dictionary-selector').contents().length) {\r\n                let dictionarySelect = new wijmo.input.MultiSelect(tr.find('._dictionary-selector')[0], {\r\n                    placeholder: 'Select Dictionaries',\r\n                    itemsSource: [],\r\n                    headerFormat: '{count} dictionaries selected',\r\n                    onCheckedItemsChanged: () => {\r\n                        dimension.dictionaries = dictionarySelect.checkedItems;\r\n                        storageService.saveCurrentProject();\r\n                    }\r\n                });\r\n                dictionarySelect.itemsSource = common.getGlobalTermsDictionaries();\r\n                dictionarySelect.checkedItems = dimension.getDictionaries();\r\n                tr.find('._dictionary-selector').css('display', dimension.hasGlobalTerms ? '' : 'none');\r\n            }\r\n\r\n            tr.find('._has-structures input')\r\n                .css('display', dimension.special ? 'none' : '')\r\n                .prop('checked', dimension.hasDataStructures)\r\n                .on('change', e => {\r\n                    dimension.hasDataStructures = e.target.checked;\r\n                    storageService.saveCurrentProject();\r\n                    storageService.syncViews();\r\n                });\r\n\r\n            tr.find('._has-global-terms input')\r\n                .css('display', dimension.special ? 'none' : '')\r\n                .prop('checked', dimension.hasGlobalTerms)\r\n                .on('change', e => {\r\n                    dimension.hasGlobalTerms = e.target.checked;\r\n                    storageService.saveCurrentProject();\r\n                    storageService.syncViews();\r\n                });\r\n\r\n            tr.find('._used-as-identifier input')\r\n                .css('display', dimension.special ? 'none' : '')\r\n                .prop('checked', dimension.usedAsIdentifier)\r\n                .on('change', e => {\r\n                    dimension.usedAsIdentifier = e.target.checked;\r\n                    storageService.saveCurrentProject();\r\n                    storageService.syncViews();\r\n                });\r\n\r\n            tr.find('._has-time-intervals input')\r\n                .css('display', dimension.special ? 'none' : '')\r\n                .prop('checked', dimension.hasTimeIntervals)\r\n                .on('change', e => {\r\n                    dimension.hasTimeIntervals = e.target.checked;\r\n                    storageService.saveCurrentProject();\r\n                    storageService.syncViews();\r\n                });\r\n\r\n            {\r\n                let selectElement = tr.find('._data-type select');\r\n                selectElement.css('display', dimension.special ? 'none' : '');\r\n\r\n                let optionNumber = dimension.dataType + 1;\r\n                selectElement.children('option:nth-child(' + optionNumber + ')').prop('selected', true);\r\n\r\n                selectElement.on('change', e => {\r\n                    if (parseInt($(e.target).prop('value')) === dimensionTypesService.STRING) {\r\n                        dimension.dataType = dimensionTypesService.STRING;\r\n                    } else if (parseInt($(e.target).prop('value')) === dimensionTypesService.CURRENCY) {\r\n                        dimension.dataType = dimensionTypesService.CURRENCY;\r\n                    } else {\r\n                        dimension.dataType = dimensionTypesService.NUMBER;\r\n                    }\r\n\r\n                    storageService.saveCurrentProject();\r\n                    storageService.syncViews();\r\n                });\r\n            }\r\n\r\n            tr.find('._hide-dimension')\r\n                .css('display', dimension.special ? 'none' : '')\r\n                .addClass(dimension.isVisible ? '' : 'active');\r\n\r\n            tr.find('._remove-dimension').css('display', dimension.special ? 'none' : '');\r\n\r\n            tbody.append(tr);\r\n        });\r\n\r\n        $('._remove-dimension').on('click', function(e) {\r\n            let result = projectSetup.removeDimension(e, dimensions);\r\n\r\n            if (result !== false) {\r\n                project.dimensions = result;\r\n                storageService.saveCurrentProject();\r\n                storageService.syncViews();\r\n            }\r\n        });\r\n\r\n        $('._hide-dimension').on('click', function() {\r\n            const $this = $(this);\r\n            $this.toggleClass('active');\r\n\r\n            const currentDimensionName = $this\r\n                .parent()\r\n                .siblings('._name')\r\n                .text();\r\n            project.dimensions.forEach(function(dimension) {\r\n                if (dimension.label === currentDimensionName) {\r\n                    $this.hasClass('active') ? (dimension.isVisible = false) : (dimension.isVisible = true);\r\n                    storageService.saveCurrentProject();\r\n                }\r\n            });\r\n\r\n            storageService.syncViews();\r\n        });\r\n\r\n        // Calculate Delta by adding children.\r\n        this.container\r\n            .find('._delta-add-children')\r\n            .prop('checked', project.calculateDeltaByAddingChildren)\r\n            .on('change', e => {\r\n                project.calculateDeltaByAddingChildren = e.target.checked;\r\n                storageService.saveCurrentProject();\r\n                storageService.syncViews();\r\n            });\r\n    }\r\n\r\n    removeDimension(e, dimensionsArray) {\r\n        let change = confirm('Remove dimension?');\r\n\r\n        if (change) {\r\n            let newDimensions = [];\r\n            let dimensionName = $(e.target)\r\n                .parent()\r\n                .siblings('._name')\r\n                .text();\r\n            dimensionsArray.forEach(dimension => {\r\n                if (dimension.label !== dimensionName) {\r\n                    newDimensions.push(dimension);\r\n                }\r\n            });\r\n            return newDimensions;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const projectSetup = new ProjectSetup();\r\n","import { common } from '../../Common';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { Tab } from '../../Tab';\r\nimport { dropbox } from '../../tabs/dropbox/Dropbox';\r\nimport { sourceDataFilesSidebar } from './add-file-workflow/SourceDataFilesSidebar';\r\nimport { addManualSidebar } from './add-manual-workflow/AddManualSidebar';\r\nimport { addManualTable } from './add-manual-workflow/AddManualTable';\r\nimport { SourceDataStructures } from './source-data-structures/SourceDataStructures';\r\nimport { sourceDataFiles } from './SourceDataFiles';\r\nimport { sourceDataGraphView } from './SourceDataGraphView';\r\nimport { sourceDataPoints } from './SourceDataPoints';\r\n\r\nclass SourceData extends Tab {\r\n    constructor() {\r\n        super();\r\n        this.tabHref = '#source_data';\r\n        this.sourceDataFiles = sourceDataFiles;\r\n        this.sourceDataPoints = sourceDataPoints;\r\n        this.sourceDataStructures = new SourceDataStructures($('#source_data_data_structures'), () => {\r\n            storageService.saveCurrentProject();\r\n            storageService.syncViews();\r\n        });\r\n        this.sourceDataGraphView = sourceDataGraphView;\r\n        this.addManualTable = addManualTable;\r\n\r\n        if (this.sourceDataFilesSidebar) this.sourceDataFilesSidebar = sourceDataFilesSidebar;\r\n        if (this.dropbox) this.dropbox = dropbox;\r\n    }\r\n\r\n    init() {\r\n        this.sourceDataFiles.init();\r\n        this.sourceDataPoints.init();\r\n        this.sourceDataGraphView.init();\r\n\r\n        this.container = $('#source_data');\r\n\r\n        $('input[name=source_data_mode][value=files]')\r\n            .parent()\r\n            .css('display', 'none');\r\n        $('input[name=source_data_mode][value=manual_workflow]')\r\n            .parent()\r\n            .css('display', 'none');\r\n\r\n        // Mode\r\n        this.container\r\n            .find('input[name=source_data_mode]')\r\n            .on('change', e => {\r\n                common.showFakeLoading();\r\n                const element = $(e.target);\r\n\r\n                if (!element.is(':checked')) {\r\n                    return;\r\n                }\r\n\r\n                const value = element.val();\r\n                const importedTableActive = $('#source_data_files_pre_ingestion').data('active');\r\n\r\n                $('#source_data_files').css('display', value === 'files' ? '' : 'none');\r\n                $('#source_data_data_points').css('display', value === 'data_points' ? '' : 'none');\r\n                $('#source_data_new_entry').css('display', value === 'data_points' ? '' : 'none');\r\n                $('#source_data_data_structures').css('display', value === 'data_structures' ? '' : 'none');\r\n                $('#graph_view').css('display', value === 'graph_view' ? '' : 'none');\r\n                $('#source_data_files_sidebar').css(\r\n                    'display',\r\n                    importedTableActive === true && value === 'files' ? '' : 'none'\r\n                );\r\n                $('#add_manual_workflow').css('display', value === 'manual_workflow' ? '' : 'none');\r\n                $('#add_manual_sidebar').css('display', value === 'manual_workflow' ? '' : 'none');\r\n\r\n                if (value === 'manual_workflow') {\r\n                    addManualSidebar.sync();\r\n                }\r\n\r\n                if (value === 'graph_view') {\r\n                    sourceDataGraphView.syncGraph();\r\n                }\r\n\r\n                const header = $('#source_data .container-with-sidebar ._content ._options');\r\n                if (value === 'manual_workflow' || value === 'files') {\r\n                    header.css('display', 'none');\r\n                } else {\r\n                    header.css('display', '');\r\n                }\r\n\r\n                // Refresh FlexGrid.\r\n                window.dispatchEvent(new Event('resize'));\r\n            })\r\n            .trigger('change');\r\n\r\n        // Add file.\r\n        this.container.find('._add-data-buttons ._add-file').on('click', e => {\r\n            // $('input[name=source_data_mode][value=files]').trigger('click');\r\n            $('#dropbox_data_files ._upload-file').trigger('click');\r\n        });\r\n\r\n        // Manual workflow button trigger.\r\n        this.container.find('._add-data-buttons ._add-data-points-manually').on('click', e => {\r\n            $('input[name=source_data_mode][value=manual_workflow]').trigger('click');\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        this.sourceDataFiles.sync();\r\n        this.sourceDataPoints.sync();\r\n        this.sourceDataStructures.setProject(storageService.getCurrentProject());\r\n        this.sourceDataStructures.sync();\r\n        this.sourceDataGraphView.sync();\r\n        this.addManualTable.sync();\r\n        if (this.sourceDataFilesSidebar) this.sourceDataFilesSidebar.sync();\r\n    }\r\n\r\n    beginWorkflow() {\r\n        $('.body-container .side-menu').css({ 'pointer-events': 'none', cursor: 'not-allowed' });\r\n    }\r\n\r\n    endWorkflow() {\r\n        $('.body-container .side-menu').css({ 'pointer-events': '', cursor: '' });\r\n        $('input[name=source_data_mode][value=data_points]').trigger('click');\r\n    }\r\n}\r\n\r\nexport const sourceData = new SourceData();\r\n","import { addFileSteps } from './add-file-workflow/AddFileSteps';\r\nimport { sourceDataEditTableCell } from './add-file-workflow/SourceDataEditTableCell';\r\nimport { sourceDataFilesSidebar } from './add-file-workflow/SourceDataFilesSidebar';\r\nimport { addManualTable } from './add-manual-workflow/AddManualTable';\r\n\r\nclass SourceDataFiles {\r\n    constructor() {\r\n        this.flexgrid = null;\r\n    }\r\n\r\n    init() {\r\n        sourceDataFilesSidebar.init();\r\n        sourceDataEditTableCell.init();\r\n        addManualTable.init();\r\n\r\n        this.flexGrid = new wijmo.grid.FlexGrid($('#source_data_files_pre_ingestion ._table')[0], {\r\n            allowDragging: 'None',\r\n            allowSorting: false,\r\n            isReadOnly: true,\r\n            itemsSource: [],\r\n            selectionChanged: (s, e) => addFileSteps.fileWorkflow.onTableSelectionChanged(s, e),\r\n            formatItem: (s, e) => {\r\n                addFileSteps.fileWorkflow.itemFormatter.formatItem(s, e);\r\n                addFileSteps.fileWorkflow.formatTableCell(s, e);\r\n            },\r\n            selectionChanging: (s, e) => addFileSteps.fileWorkflow.onTableSelectionChanging(s, e),\r\n            updatedView: () => {\r\n                sourceDataFiles.flexGrid.columns.map((column, index) => {\r\n                    sourceDataFiles.flexGrid.columns[index].header = XLSX.utils.encode_col(index);\r\n                });\r\n                $(sourceDataFiles.flexGrid.rowHeaders._e)\r\n                    .find('.wj-row .wj-cell.wj-header')\r\n                    .each(function(index) {\r\n                        $(this).text(index + 1);\r\n                    });\r\n            },\r\n            updatingView: () => {\r\n                addFileSteps.fileWorkflow.itemFormatter.updatingView();\r\n            }\r\n        });\r\n        this.flexGrid.hostElement.addEventListener('mousedown', () => {\r\n            addFileSteps.fileWorkflow.onMouseDown();\r\n        });\r\n        $('#source_data_files_pre_ingestion').hide();\r\n\r\n        // Initially hide add manual workflow.\r\n        $('#add_manual_workflow').css('display', 'none');\r\n        $('#add_manual_sidebar').css('display', 'none');\r\n    }\r\n\r\n    sync() {\r\n        sourceDataFiles.flexGrid.refresh();\r\n\r\n        sourceDataFilesSidebar.sync();\r\n\r\n        // Edit table cell functionality.\r\n        sourceDataEditTableCell.sync();\r\n    }\r\n}\r\n\r\nexport const sourceDataFiles = new SourceDataFiles();\r\n","import cloneDeep from 'lodash/cloneDeep';\r\nimport { common } from '../../Common';\r\nimport { SourceFile } from '../../entities/SourceFile';\r\nimport { MultiLevelHashMap } from '../../MultiLevelHashMap';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { SourceDataStructureValidator } from './source-data-structures/SourceDataStructureValidator';\r\nimport { sourceData } from './SourceData';\r\nimport { sourceDataPoints } from './SourceDataPoints';\r\n\r\nclass SourceDataGraphView {\r\n    constructor() {\r\n        this.network = null;\r\n        this.sourceDataStructureValidator = new SourceDataStructureValidator();\r\n        this.filters = [];\r\n        this.dataAvailability = null;\r\n    }\r\n\r\n    init() {\r\n        this.container = $('#graph_view');\r\n        this.filtersContainer = this.container.find('._row3');\r\n\r\n        this.dimensionSelect = new wijmo.input.ComboBox(this.container.find('._dimension-selector')[0], {\r\n            placeholder: 'Select Dimension',\r\n            itemsSource: [],\r\n            displayMemberPath: 'label',\r\n            onSelectedIndexChanged: () => {\r\n                if (!this.isSyncing) {\r\n                    this.syncGraph();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.coloringSelect = new wijmo.input.ComboBox(this.container.find('._coloring-selector')[0], {\r\n            placeholder: 'Select Coloring',\r\n            itemsSource: [\r\n                {\r\n                    label: 'File',\r\n                    value: 'file'\r\n                },\r\n                {\r\n                    label: 'Validation',\r\n                    value: 'validation'\r\n                },\r\n                {\r\n                    label: 'Data Availability',\r\n                    value: 'data_availability'\r\n                }\r\n            ],\r\n            displayMemberPath: 'label',\r\n            onSelectedIndexChanged: () => {\r\n                const coloring = this.coloringSelect.selectedItem.value;\r\n                this.filtersContainer.css('display', coloring === 'data_availability' ? '' : 'none');\r\n\r\n                if (!this.isSyncing) {\r\n                    this.syncGraph();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.sourceFileSelect = new wijmo.input.MultiSelect(this.container.find('._source-file-selector')[0], {\r\n            placeholder: 'Select Source Files',\r\n            itemsSource: [],\r\n            headerFormat: '{count} files selected',\r\n            displayMemberPath: 'name',\r\n            checkedMemberPath: 'selected',\r\n            onCheckedItemsChanged: () => {\r\n                this.syncGraph();\r\n            }\r\n        });\r\n\r\n        this.graphProgress = this.container.find('._graph-progress');\r\n        this.graphContainer = this.container.find('._graph');\r\n\r\n        this.hierarchicalCheckbox = this.container.find('._hierarchical-checkbox');\r\n        this.hierarchicalCheckbox.on('change', () => this.syncGraph());\r\n\r\n        this.useGlobalTermsCheckbox = this.container.find('._use-global-terms-checkbox');\r\n        this.useGlobalTermsCheckbox.on('change', () => this.syncGraph());\r\n\r\n        this.hideDisconnectedValuesCheckbox = this.container.find('._hide-disconnected-values');\r\n        this.hideDisconnectedValuesCheckbox.on('change', () => this.syncGraph());\r\n    }\r\n\r\n    sync() {\r\n        // Prevent multiple runs.\r\n        if (this.isSyncing) {\r\n            return;\r\n        }\r\n        this.isSyncing = true;\r\n\r\n        const project = storageService.getCurrentProject();\r\n\r\n        // Get dimensions that have data structures or global terms.\r\n        let dimensions = project.getDimensions();\r\n        dimensions = dimensions.filter(dimension => {\r\n            return dimension.hasDataStructures;\r\n        });\r\n        this.dimensionSelect.itemsSource = dimensions;\r\n\r\n        // Set source files.\r\n        {\r\n            // Get source files.\r\n            let sourceFiles = Object.values(cloneDeep(project.sourceFiles));\r\n            sourceFiles.unshift(\r\n                new SourceFile({\r\n                    uuid: 'manual',\r\n                    name: 'Manual'\r\n                })\r\n            );\r\n\r\n            let colors = ['#00338d', '#0091da', '#6d2077', '#005eb8', '#00a3a1', '#eaaa00'];\r\n            let i = 0;\r\n            sourceFiles = sourceFiles.map(sourceFile => {\r\n                // All are selected by default.\r\n                sourceFile.selected = true;\r\n\r\n                // Set color.\r\n                sourceFile.color = colors[i % colors.length];\r\n                i++;\r\n\r\n                return sourceFile;\r\n            });\r\n\r\n            this.sourceFileSelect.itemsSource = sourceFiles;\r\n        }\r\n\r\n        // Create filters.\r\n        {\r\n            this.filters = [];\r\n            this.filtersContainer.html('');\r\n            const dimensions = project.getDimensions();\r\n            dimensions.forEach(dimension => {\r\n                // Skip certain dimensions.\r\n                if (\r\n                    this.dimensionSelect.selectedItem &&\r\n                    ['value', 'scale', this.dimensionSelect.selectedItem.slug].indexOf(dimension.slug) !== -1\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                // Create DOM elements.\r\n                const div = $('<div>' + dimension.label + '</div>');\r\n                const filterContainer = $('<div></div>').appendTo(div);\r\n                this.filtersContainer.append(filterContainer);\r\n                this.filtersContainer.append('&nbsp;&nbsp;&nbsp;');\r\n\r\n                // Get items.\r\n                const items = common.getUniqueValues(project.dataPoints, dimension.slug);\r\n                items.unshift('');\r\n\r\n                // Create filter.\r\n                const comboBox = new wijmo.input.ComboBox(filterContainer[0], {\r\n                    placeholder: 'Select ' + dimension.label,\r\n                    itemsSource: items,\r\n                    onSelectedIndexChanged: () => {\r\n                        if (!this.isSyncing) {\r\n                            this.syncGraph();\r\n                        }\r\n                    }\r\n                });\r\n                this.filters.push({\r\n                    dimensionSlug: dimension.slug,\r\n                    comboBox: comboBox\r\n                });\r\n            });\r\n        }\r\n\r\n        // Update graph.\r\n        this.syncGraph();\r\n        this.isSyncing = false;\r\n    }\r\n\r\n    syncGraph() {\r\n        console.log('syncGraph');\r\n        if (!this.dimensionSelect.selectedItem) {\r\n            return;\r\n        }\r\n\r\n        this.syncDataAvailability();\r\n\r\n        const coloring = this.coloringSelect.selectedItem.value;\r\n        const dimensionSlug = this.dimensionSelect.selectedItem.slug;\r\n        const files = this.sourceFileSelect.itemsSource.filter(sourceFile => {\r\n            return sourceFile.selected;\r\n        });\r\n\r\n        // Get values, add nodes and index name-slugs to node-IDs.\r\n        const project = storageService.getCurrentProject();\r\n        this.sourceDataStructureValidator.setProject(project);\r\n        const dataStructures = project.getDataStructuresForDimension(dimensionSlug);\r\n        let nodes = [];\r\n        const slugsToNodes = {};\r\n        const groupNodesToAdd = {};\r\n        let sequence = 0;\r\n        files.forEach(file => {\r\n            let dataset = project.getDataPointsForSource(file.uuid);\r\n            let values = common.getUniqueValues(dataset, dimensionSlug);\r\n            values.forEach(value => {\r\n                /** @type {DataStructure} */\r\n                const dataStructure = dataStructures[value] || {};\r\n\r\n                // Don't add duplicate values.\r\n                if (value in slugsToNodes) {\r\n                    return;\r\n                }\r\n\r\n                // Get label.\r\n                let label;\r\n                {\r\n                    label = value;\r\n\r\n                    if (this.useGlobalTermsCheckbox.is(':checked') && dataStructure.globalTerm) {\r\n                        // Use global term.\r\n                        label = dataStructure.globalTerm;\r\n                    } else {\r\n                        label = value;\r\n                    }\r\n\r\n                    // Replace whitespaces with newlines.\r\n                    label = label.replace(/ /g, '\\n');\r\n\r\n                    if (coloring === 'data_availability') {\r\n                        let percentage = this.getDataAvailabilityForValue(value);\r\n                        label += '\\n ' + Math.round(percentage * 100) + '%';\r\n                    }\r\n                }\r\n\r\n                // Get color.\r\n                let color = this.getColor(file['color'], dimensionSlug, value);\r\n\r\n                // Create node.\r\n                let node = {\r\n                    id: sequence++,\r\n                    label: label,\r\n                    color: color,\r\n                    value: 1,\r\n                    _parentSlug: null,\r\n                    _dimensionValue: value\r\n                };\r\n                nodes.push(node);\r\n                slugsToNodes[value] = node;\r\n\r\n                // Save the group node for later.\r\n                if (dataStructure.group) {\r\n                    const slug = this.getGroupSlug(dataStructure);\r\n                    groupNodesToAdd[slug] = dataStructure;\r\n                }\r\n            });\r\n        });\r\n\r\n        // Add group nodes.\r\n        for (const slug in groupNodesToAdd) {\r\n            /** @type {DataStructure} */\r\n            const dataStructure = groupNodesToAdd[slug];\r\n\r\n            // Get parent node.\r\n            const parentNode = slugsToNodes[dataStructure.parentAttribute];\r\n            if (!parentNode) {\r\n                continue;\r\n            }\r\n\r\n            // Get color.\r\n            let color = this.getColor(\r\n                parentNode.color,\r\n                dimensionSlug,\r\n                dataStructure.parentAttribute,\r\n                dataStructure.group\r\n            );\r\n\r\n            // Create node.\r\n            let node = {\r\n                id: sequence++,\r\n                label: dataStructure.group,\r\n                color: color,\r\n                value: 1,\r\n                _parentSlug: null,\r\n                _groupValue: dataStructure.group\r\n            };\r\n            nodes.push(node);\r\n            slugsToNodes[slug] = node;\r\n        }\r\n\r\n        // Add edges.\r\n        const edges = [];\r\n        const addedEdgeForGroup = {};\r\n        for (const value in dataStructures) {\r\n            /** @type {DataStructure} */\r\n            const dataStructure = dataStructures[value];\r\n            const childSlug = dataStructure.attribute;\r\n            const parentSlug = dataStructure.parentAttribute;\r\n\r\n            if (!(parentSlug in slugsToNodes) || !(childSlug in slugsToNodes)) {\r\n                continue;\r\n            }\r\n\r\n            // Was the other parent a better match?\r\n            if (\r\n                slugsToNodes[childSlug]._parentSlug !== null &&\r\n                childSlug.indexOf(slugsToNodes[childSlug]._parentSlug) !== -1\r\n            ) {\r\n                continue;\r\n            }\r\n\r\n            if (!dataStructure.group) {\r\n                // Create parent-child edge.\r\n                edges.push({\r\n                    from: slugsToNodes[parentSlug].id,\r\n                    to: slugsToNodes[childSlug].id\r\n                });\r\n            } else {\r\n                const groupSlug = this.getGroupSlug(dataStructure);\r\n\r\n                // Create parent-group edge. Prevent duplicates.\r\n                if (!(groupSlug in addedEdgeForGroup)) {\r\n                    addedEdgeForGroup[groupSlug] = true;\r\n                    edges.push({\r\n                        from: slugsToNodes[parentSlug].id,\r\n                        to: slugsToNodes[groupSlug].id\r\n                    });\r\n                }\r\n\r\n                // Create group-child edge.\r\n                edges.push({\r\n                    from: slugsToNodes[groupSlug].id,\r\n                    to: slugsToNodes[childSlug].id\r\n                });\r\n            }\r\n\r\n            // Increase parent node.\r\n            slugsToNodes[childSlug]._parentSlug = parentSlug;\r\n            slugsToNodes[parentSlug]['value']++;\r\n        }\r\n\r\n        // Index nodes by ID.\r\n        const idsToNodes = nodes.reduce((a, node) => {\r\n            a[node.id] = node;\r\n\r\n            return a;\r\n        }, {});\r\n\r\n        // Hide disconnected nodes.\r\n        if (this.hideDisconnectedValuesCheckbox.is(':checked')) {\r\n            // Mark connected nodes.\r\n            edges.forEach(edge => {\r\n                idsToNodes[edge.from].connected = true;\r\n                idsToNodes[edge.to].connected = true;\r\n            });\r\n\r\n            // Remove disconnected.\r\n            nodes = nodes.filter(node => {\r\n                return node.connected;\r\n            });\r\n        }\r\n\r\n        // Adjust colors.\r\n        if (coloring === 'file') {\r\n            let maxValue = 0;\r\n            nodes.forEach(node => {\r\n                maxValue = Math.max(maxValue, node['value']);\r\n            });\r\n            nodes.forEach(node => {\r\n                let percent = (maxValue - node['value']) / maxValue / 2.5;\r\n                node['color'] = common.shadeColor2(node['color'], percent);\r\n            });\r\n        }\r\n\r\n        // Compose network arguments.\r\n        let data = {\r\n            nodes: new vis.DataSet(nodes),\r\n            edges: new vis.DataSet(edges)\r\n        };\r\n        let options = {\r\n            nodes: {\r\n                shape: 'box',\r\n                font: {\r\n                    size: 18,\r\n                    color: '#ffffff'\r\n                }\r\n            },\r\n            interaction: {\r\n                dragNodes: false\r\n            }\r\n        };\r\n        if (!this.hierarchicalCheckbox.is(':checked')) {\r\n            options['physics'] = {\r\n                enabled: true,\r\n                barnesHut: {\r\n                    gravitationalConstant: -2000,\r\n                    centralGravity: 0.3,\r\n                    springLength: 95,\r\n                    springConstant: 0.04,\r\n                    damping: 0.09,\r\n                    avoidOverlap: 0\r\n                },\r\n                maxVelocity: 50,\r\n                minVelocity: 0.1,\r\n                stabilization: {\r\n                    enabled: true,\r\n                    iterations: 1000,\r\n                    updateInterval: 10,\r\n                    onlyDynamicEdges: false,\r\n                    fit: true\r\n                },\r\n                timestep: 1,\r\n                adaptiveTimestep: true\r\n            };\r\n            options['nodes']['scaling'] = {\r\n                label: {\r\n                    min: 15,\r\n                    max: 20\r\n                }\r\n            };\r\n        } else {\r\n            options['physics'] = false;\r\n            options['layout'] = {\r\n                hierarchical: {\r\n                    enabled: true,\r\n                    sortMethod: 'directed',\r\n                    nodeSpacing: 150,\r\n                    blockShifting: false\r\n                }\r\n            };\r\n            options['edges'] = {\r\n                selectionWidth: 0\r\n            };\r\n        }\r\n\r\n        // Create network.\r\n        if (this.network) {\r\n            this.network.destroy();\r\n        }\r\n        this.network = new vis.Network(this.graphContainer[0], data, options);\r\n        this.network.on('stabilizationProgress', o => {\r\n            this.graphProgress\r\n                .css('display', '')\r\n                .html('Loading ' + Math.round((o.iterations / o.total) * 100) + '%...');\r\n        });\r\n        this.network.on('stabilizationIterationsDone', o => {\r\n            this.graphProgress.css('display', 'none').html('');\r\n        });\r\n        this.network.on('afterDrawing', o => {\r\n            this.graphProgress.css('display', 'none').html('');\r\n        });\r\n        this.network.on('doubleClick', params => {\r\n            if (params.nodes.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const id = params.nodes[0];\r\n            const node = idsToNodes[id];\r\n            const coloring = this.coloringSelect.selectedItem.value;\r\n\r\n            if (coloring === 'data_availability') {\r\n                // Open Data Cockpit tab.\r\n                $('#source_data input[name=\"source_data_mode\"]').trigger('blur');\r\n                $('#source_data input[name=\"source_data_mode\"][value=\"data_points\"]').trigger('click');\r\n\r\n                // Ensure required columns are enabled in data cockpit.\r\n                this.filters.forEach(filter => {\r\n                    sourceDataPoints.columnsSelect.itemsSource.forEach(column => {\r\n                        if (column.slug === filter.dimensionSlug) {\r\n                            column.selected = true;\r\n                        }\r\n                    });\r\n                });\r\n                sourceDataPoints.columnsSelect.refresh();\r\n                sourceDataPoints.updateColumns();\r\n\r\n                // Get filters.\r\n                const flexFilters = [];\r\n                this.filters.forEach(filter => {\r\n                    // Check if selected.\r\n                    const selectedValue = filter.comboBox.selectedItem;\r\n                    if (selectedValue === '') {\r\n                        return;\r\n                    }\r\n\r\n                    const showValues = {};\r\n                    showValues[filter.comboBox.selectedItem] = true;\r\n\r\n                    const flexFilter = {\r\n                        binding: filter.dimensionSlug,\r\n                        type: 'value',\r\n                        filterText: '',\r\n                        showValues: showValues\r\n                    };\r\n\r\n                    flexFilters.push(flexFilter);\r\n                });\r\n\r\n                // Set filter definition.\r\n                const filterDefinition = {\r\n                    defaultFilterType: 3,\r\n                    filters: flexFilters\r\n                };\r\n                sourceDataPoints.flexGridFilter.filterDefinition = JSON.stringify(filterDefinition);\r\n            } else {\r\n                // Open Structures tab.\r\n                $('#source_data input[name=\"source_data_mode\"]').trigger('blur');\r\n                $('#source_data input[name=\"source_data_mode\"][value=\"data_structures\"]').trigger('click');\r\n\r\n                // Select dimension.\r\n                sourceData.sourceDataStructures.dimensionSelect.selectedValue = this.dimensionSelect.selectedValue;\r\n\r\n                setTimeout(() => {\r\n                    // Select relevant row.\r\n                    const flexgrid = sourceData.sourceDataStructures.flexgrid;\r\n                    let row = 0;\r\n                    for (let i = 0; i < flexgrid.rows.length; i++) {\r\n                        const item = flexgrid.rows[i].dataItem;\r\n                        row = i;\r\n\r\n                        if (\r\n                            (item.value && item.value === node._dimensionValue) ||\r\n                            (item.group && item.group === node._groupValue)\r\n                        ) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    flexgrid.select(new wijmo.grid.CellRange(row, 0, row, 0), true);\r\n                }, 50);\r\n            }\r\n        });\r\n    }\r\n\r\n    syncDataAvailability() {\r\n        const coloring = this.coloringSelect.selectedItem.value;\r\n        if (coloring !== 'data_availability') {\r\n            return;\r\n        }\r\n\r\n        // Filter data points.\r\n        const project = storageService.getCurrentProject();\r\n        let dataPoints = project.dataPoints;\r\n        dataPoints = dataPoints.filter(dataPoint => {\r\n            let matches = true;\r\n\r\n            this.filters.forEach(filter => {\r\n                const value = filter.comboBox.selectedItem;\r\n                if (value && dataPoint[filter.dimensionSlug] !== value) {\r\n                    matches = false;\r\n                }\r\n            });\r\n\r\n            return matches;\r\n        });\r\n\r\n        // Group values by unique dimension-combinations.\r\n        const dimensionSlug = this.dimensionSelect.selectedItem.slug;\r\n        let dimensions = project.getDimensionsForDataStructureValidation(dimensionSlug);\r\n        let map = new MultiLevelHashMap(dimensions.length + 1);\r\n        dataPoints.forEach((dataPoint, index) => {\r\n            const key = [];\r\n            dimensions.forEach(dimension => {\r\n                // Undefined or an empty string must count as the same thing.\r\n                let value = dataPoint[dimension.slug];\r\n                if (typeof value === 'undefined') {\r\n                    value = '';\r\n                }\r\n\r\n                key.push(value);\r\n            });\r\n\r\n            // Add copy of data-point to map.\r\n            map.set(key.concat([dataPoint.id]), Object.assign({}, dataPoint));\r\n        });\r\n        let groups = map.getUniqueGroups();\r\n\r\n        // Get availability for each value.\r\n        this.dataAvailability = {};\r\n        const values = common.getUniqueValues(dataPoints, dimensionSlug);\r\n        values.forEach(value => {\r\n            let groupsFound = 0;\r\n\r\n            groups.forEach(group => {\r\n                let dataPointFound = false;\r\n\r\n                for (const id in group) {\r\n                    const dataPoint = group[id];\r\n                    if (dataPoint[dimensionSlug] === value) {\r\n                        dataPointFound = true;\r\n                    }\r\n                }\r\n\r\n                if (dataPointFound) {\r\n                    groupsFound++;\r\n                }\r\n            });\r\n\r\n            this.dataAvailability[value] = groupsFound / groups.length;\r\n        });\r\n    }\r\n\r\n    getDataAvailabilityForValue(value) {\r\n        const percentage = this.dataAvailability[value];\r\n\r\n        if (!percentage) {\r\n            return 0;\r\n        }\r\n\r\n        if (common.isDeltaZero(percentage - 1)) {\r\n            return 1;\r\n        }\r\n\r\n        return percentage;\r\n    }\r\n\r\n    getColor(fileColor, dimensionSlug, parentAttribute, group) {\r\n        const coloring = this.coloringSelect.selectedItem.value;\r\n        let color;\r\n\r\n        switch (coloring) {\r\n            case 'validation':\r\n                const result = this.sourceDataStructureValidator.validateValue(dimensionSlug, parentAttribute, group);\r\n                if (result === null) {\r\n                    color = '#888';\r\n                } else if (result.invalid === 0) {\r\n                    color = 'green';\r\n                } else if (result.invalid > 0) {\r\n                    color = 'red';\r\n                }\r\n                break;\r\n\r\n            case 'file':\r\n                color = fileColor;\r\n                break;\r\n\r\n            case 'data_availability':\r\n                if (group) {\r\n                    color = 'green';\r\n                } else {\r\n                    const value = this.getDataAvailabilityForValue(parentAttribute);\r\n\r\n                    color = chroma.mix('red', 'green', value, 'lab').hex();\r\n                }\r\n                break;\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n    /**\r\n     * @param {DataStructure} dataStructure\r\n     */\r\n    getGroupSlug(dataStructure) {\r\n        const slug = '__group__' + dataStructure.parentAttribute + '__' + dataStructure.group;\r\n\r\n        return slug;\r\n    }\r\n}\r\n\r\nexport const sourceDataGraphView = new SourceDataGraphView();\r\n","import { cloneDeep, get } from 'lodash';\r\nimport { common } from '../../Common';\r\nimport { constants } from '../../Constants';\r\nimport { dimensionTypesService } from '../../services/DimensionTypesService';\r\nimport { storageService } from '../../services/StorageService';\r\nimport { sourceDataPointsSidebar } from './SourceDataPointsSidebar';\r\nimport { sourceDataService } from './SourceDataService';\r\n\r\nclass SourceDataPoints {\r\n    constructor() {\r\n        this.flexgrid = null;\r\n        this.inUpdatedLayout = false;\r\n        this.idFilter = [];\r\n        this.columnDefs = [];\r\n        this.scale = 1;\r\n    }\r\n\r\n    init() {\r\n        sourceDataPointsSidebar.init();\r\n\r\n        this.container = $('#source_data_data_points');\r\n        this.rowCounter = $('#_data-points-counter');\r\n\r\n        this.columnsSelect = new wijmo.input.MultiSelect(this.container.find('._column-selector')[0], {\r\n            placeholder: 'Select Columns',\r\n            itemsSource: [],\r\n            headerFormat: '{count} columns selected',\r\n            displayMemberPath: 'label',\r\n            checkedMemberPath: 'selected',\r\n            onCheckedItemsChanged: () => {\r\n                this.updateColumns();\r\n\r\n                // Odd, but otherwise the filters aren't updated visually (i.e. the \"wj-filter-on\" classes aren't added).\r\n                this.flexGridFilter.filterDefinition = this.flexGridFilter.filterDefinition;\r\n            }\r\n        });\r\n\r\n        this.collectionView = new wijmo.collections.CollectionView([], {\r\n            filter: item => {\r\n                // Filter by ID.\r\n                const matchesId = this.idFilter.length === 0 || this.idFilter.indexOf(item.id) !== -1;\r\n\r\n                return matchesId;\r\n            }\r\n        });\r\n\r\n        this.flexgrid = new wijmo.grid.FlexGrid('#source_data_all_data_table', {\r\n            isReadOnly: false,\r\n            selectionMode: 'Row',\r\n            itemsSource: this.collectionView.items,\r\n            autoGenerateColumns: false,\r\n            formatItem: (s, e) => {\r\n                if (e.panel === s.cells) {\r\n                    let item = s.rows[e.row].dataItem;\r\n\r\n                    switch (s.columns[e.col].binding) {\r\n                        case 'value':\r\n                            e.cell.childNodes[0].nodeValue = common.formatNumber(item.value);\r\n                            break;\r\n\r\n                        case '__normalized_value':\r\n                            e.cell.innerHTML = common.formatNumber(item['__normalized_value'] / this.scale);\r\n                            break;\r\n\r\n                        case 'scale':\r\n                            // e.cell.innerHTML = item.scale;\r\n                            break;\r\n                    }\r\n                }\r\n            },\r\n            selectionChanged: (s, e) => {\r\n                const selection = this.flexgrid.selection;\r\n                let item;\r\n\r\n                if (selection._row in s.rows) {\r\n                    item = s.rows[selection._row].dataItem;\r\n                } else {\r\n                    item = null;\r\n                }\r\n\r\n                sourceDataPointsSidebar.setSelectedItem(item);\r\n            },\r\n            updatedLayout: () => {\r\n                if (this.inUpdatedLayout) {\r\n                    this.inUpdatedLayout = false;\r\n                } else {\r\n                    this.inUpdatedLayout = true;\r\n                    this.flexgrid.autoSizeRow(0, true);\r\n                }\r\n            },\r\n            beginningEdit: (s, e) => {\r\n                const col = s.columns[e.col];\r\n\r\n                // User is allowed to edit?\r\n                const dataPoint = s.rows[e.row].dataItem;\r\n                if (col.binding === '__normalized_value') {\r\n                    alert(constants.CANNOT_EDIT_NORMALIZED_VALUE);\r\n                    e.cancel = true;\r\n                    return;\r\n                }\r\n                if (col.binding === 'value' && dataPoint.source !== 'manual') {\r\n                    alert(constants.CANNOT_EDIT_VALUE);\r\n                    e.cancel = true;\r\n                    return;\r\n                }\r\n                if (col.binding.endsWith(constants.DIMENSION_SUFFIX_GROUP)) {\r\n                    const dimensionSlug = col.binding.slice(0, -constants.DIMENSION_SUFFIX_GROUP.length);\r\n                    const dimensionParent = dataPoint[dimensionSlug + constants.DIMENSION_SUFFIX_PARENT];\r\n                    if (!dimensionParent) {\r\n                        alert(constants.CANNOT_SET_GROUP_IF_NO_PARENT);\r\n                        e.cancel = true;\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Get column definition.\r\n                const columnDef = this.columnDefs.find(column => {\r\n                    return column.slug === col.binding;\r\n                });\r\n\r\n                // Update data map.\r\n                if (col.dataMap) {\r\n                    col.dataMap = sourceDataService.getDataMapForDimension(\r\n                        columnDef.dimension,\r\n                        storageService.getCurrentProject()\r\n                    );\r\n                }\r\n\r\n                if (col.dataType !== wijmo.DataType.Date) {\r\n                    // Always format as general cell, not as number.\r\n                    col.format = 'g';\r\n                }\r\n            },\r\n            cellEditEnding: (s, e) => {\r\n                const oldVal = s.getCellData(e.row, e.col);\r\n                const newVal = s.activeEditor.value;\r\n                const dataType = s.columns[e.col].dataType;\r\n                e.cancel = common.checkIfCellHasChanged(oldVal, newVal, dataType);\r\n\r\n                // Validate.\r\n                const col = s.columns[e.col];\r\n                const dataPoint = Object.assign({}, s.rows[e.row].dataItem);\r\n                dataPoint[col.binding] = s.activeEditor.value;\r\n                const validation = storageService.getCurrentProject().validateDataPoint(dataPoint);\r\n                if (validation.success === false) {\r\n                    e.cancel = true;\r\n                    alert(validation.error);\r\n                }\r\n            },\r\n            cellEditEnded: (s, e) => {\r\n                // Edit was cancelled?\r\n                if (e.cancel) {\r\n                    return;\r\n                }\r\n\r\n                // TODO: Show loading screen.\r\n                const dataPoint = s.rows[e.row].dataItem;\r\n                storageService.getCurrentProject().addDataPoint(dataPoint);\r\n\r\n                // Save project.\r\n                storageService.saveCurrentProject();\r\n                storageService.syncViews();\r\n            }\r\n        });\r\n\r\n        // http://jsfiddle.net/Wijmo5/h1njyaez/\r\n        this.flexGridFilter = new wijmo.grid.filter.FlexGridFilter(this.flexgrid, {\r\n            filterApplied: () => {\r\n                this.rowCounter.text(\r\n                    'Showing ' +\r\n                        this.flexgrid.rows.length +\r\n                        ' data-points out of ' +\r\n                        this.collectionView.sourceCollection.length\r\n                );\r\n            }\r\n        });\r\n\r\n        // $('#source_data_all_data_filter_by_file')[0].addEventListener('input', (e) => {\r\n        //     this.collectionView.refresh();\r\n        //     this.flexgrid.itemsSource = this.collectionView.items;\r\n        // });\r\n\r\n        this.container.find('._scale-selector').on('change', e => {\r\n            this.scale = e.target.value;\r\n            this.flexgrid.collectionView.refresh();\r\n        });\r\n\r\n        this.container.find('._clear-filters').on('click', () => {\r\n            this.flexGridFilter.filterDefinition = '';\r\n        });\r\n\r\n        // Export Excel.\r\n        this.container.find('._export-excel').on('click', e => {\r\n            wijmo.grid.xlsx.FlexGridXlsxConverter.save(\r\n                this.flexgrid,\r\n                {\r\n                    includeColumnHeaders: true,\r\n                    includeCellStyles: false\r\n                },\r\n                'FlexGrid.xlsx'\r\n            );\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        sourceDataPointsSidebar.sync();\r\n\r\n        // Columns\r\n        {\r\n            // Get all columns.\r\n            this.columnDefs = this.getAvailableColumns();\r\n\r\n            // Get selected columns from local storageService.\r\n            const selectedColumns = storageService.get(storageService.DATA_COCKPIT_COLUMNS_KEY);\r\n            if (Array.isArray(selectedColumns)) {\r\n                this.columnDefs.forEach(columnDef => {\r\n                    columnDef.selected = selectedColumns.indexOf(columnDef.slug) !== -1;\r\n                });\r\n            }\r\n\r\n            // Set items in combo-box.\r\n            this.columnsSelect.itemsSource = this.columnDefs;\r\n        }\r\n\r\n        // Data points\r\n        let dataPoints = storageService.currentProject.dataPoints;\r\n        this.setData(dataPoints);\r\n    }\r\n\r\n    getAvailableColumns() {\r\n        const cols = [];\r\n        const project = storageService.getCurrentProject();\r\n        const dimensions = project.getFieldsForDimensions();\r\n\r\n        cols.push({\r\n            slug: '__normalized_value',\r\n            label: 'Normalized Value',\r\n            selected: true\r\n        });\r\n\r\n        dimensions.forEach(dimension => {\r\n            cols.push({\r\n                dimension: dimension,\r\n                slug: dimension.slug,\r\n                label: dimension.label,\r\n                selected: true,\r\n                dataMap: sourceDataService.getDataMapForDimension(dimension, project),\r\n                isReadOnly: false\r\n            });\r\n        });\r\n\r\n        cols.push({\r\n            slug: 'source__pretty',\r\n            label: 'Source',\r\n            selected: true,\r\n            isReadOnly: true\r\n        });\r\n\r\n        return cols;\r\n    }\r\n\r\n    updateColumns() {\r\n        // Save selected columns in local storageService.\r\n        const selectedColumns = this.columnDefs.reduce((a, column) => {\r\n            if (column.selected) {\r\n                a.push(column.slug);\r\n            }\r\n\r\n            return a;\r\n        }, []);\r\n        storageService.set(storageService.DATA_COCKPIT_COLUMNS_KEY, selectedColumns);\r\n\r\n        // Create columns.\r\n        this.flexgrid.columns.length = 0;\r\n        this.columnDefs.forEach(column => {\r\n            if (!column.selected) {\r\n                return;\r\n            }\r\n\r\n            const isTime = get(column, 'dimension.isTime');\r\n\r\n            // Add column to grid.\r\n            const gridCol = new wijmo.grid.Column();\r\n            gridCol.binding = column.slug;\r\n            gridCol.header = column.label;\r\n            if (!isTime) {\r\n                gridCol.dataMap = column.dataMap;\r\n\r\n                const dataType = get(column, 'dimension.dataType');\r\n                if (dataType === dimensionTypesService.NUMBER) {\r\n                    gridCol.dataType = wijmo.DataType.Number;\r\n                }\r\n            } else {\r\n                gridCol.dataType = wijmo.DataType.Date;\r\n                gridCol.format = 'yyyy-MM-dd';\r\n            }\r\n            gridCol.isReadOnly = column.isReadOnly;\r\n            this.flexgrid.columns.push(gridCol);\r\n\r\n            if (isTime) {\r\n                common.createDatePickerEditor(this.flexgrid.columns.getColumn(gridCol.binding));\r\n            }\r\n        });\r\n    }\r\n\r\n    setData(dataset) {\r\n        dataset = cloneDeep(dataset);\r\n\r\n        const project = storageService.getCurrentProject();\r\n\r\n        const sourceFiles = project.sourceFiles;\r\n        dataset = dataset.map(item => {\r\n            // Process source files.\r\n            if (item.source === 'manual') {\r\n                item.source__pretty = 'Manual';\r\n            } else if (item.source in sourceFiles) {\r\n                item.source__pretty = sourceFiles[item.source].name;\r\n            }\r\n\r\n            // Normalize values.\r\n            item['__normalized_value'] = item.value * common.parseScale(item.scale) * common.parseInverse(item.inverse);\r\n\r\n            // Process dimensions.\r\n            item = project.addDataStructuresToDataPoint(item);\r\n\r\n            return item;\r\n        });\r\n\r\n        // Save view.\r\n        const sortDescriptions = this.flexgrid.collectionView.sortDescriptions;\r\n        const scrollPosition = this.flexgrid.scrollPosition;\r\n        const selection = this.flexgrid.selection;\r\n        const filterDefinition = this.flexGridFilter.filterDefinition;\r\n\r\n        // Update data source.\r\n        this.collectionView.sourceCollection = dataset;\r\n        this.collectionView.refresh();\r\n        this.flexgrid.itemsSource = this.collectionView.items;\r\n        this.updateColumns();\r\n\r\n        // Load view.\r\n        if (sortDescriptions.length > 0) {\r\n            this.flexgrid.collectionView.sortDescriptions.push(sortDescriptions[0]);\r\n        }\r\n        this.flexgrid.scrollPosition = scrollPosition;\r\n        this.flexgrid.select(selection);\r\n        this.flexGridFilter.filterDefinition = filterDefinition;\r\n    }\r\n\r\n    setIdFilter(array) {\r\n        this.idFilter = array;\r\n    }\r\n}\r\n\r\nexport const sourceDataPoints = new SourceDataPoints();\r\n","import { storageService } from '../../services/StorageService';\r\nimport { sourceDataPoints } from './SourceDataPoints';\r\nimport { sourceDataService } from './SourceDataService';\r\n\r\nclass SourceDataPointsSidebar {\r\n    constructor() {\r\n        this.selectedItem = null;\r\n        this.inputs = [];\r\n    }\r\n\r\n    init() {\r\n        this.form = $('#source_data_new_entry');\r\n        this.fieldsContainer = this.form.find('._fields');\r\n        this.fieldTemplate = this.form\r\n            .find('._template')\r\n            .removeClass('_template')\r\n            .detach();\r\n\r\n        this.form.find('._add-data-point').on('click', () => {\r\n            this.addDataPoint();\r\n        });\r\n        this.form.find('._save-data-point').on('click', () => {\r\n            this.addDataPoint(true);\r\n        });\r\n        this.form.find('._delete-data-point').on('click', () => {\r\n            this.deleteDataPoint();\r\n        });\r\n        this.form.find('._clear').on('click', () => {\r\n            this.clearAllFields();\r\n        });\r\n        this.form.find('._add-custom-dimension').on('click', () => {\r\n            this.addCustomDimension();\r\n        });\r\n\r\n        this.form.on('click', '._lock-container', e => {\r\n            const $this = $(e.currentTarget);\r\n            const input = $this.find('input');\r\n            const checked = !input.prop('checked');\r\n            input.prop('checked', checked);\r\n            $this.toggleClass('_checked', checked);\r\n        });\r\n\r\n        this.form.on('click', '._data-structures-container', e => {\r\n            const $this = $(e.currentTarget);\r\n            const checked = !$this.hasClass('_checked');\r\n            $this.toggleClass('_checked', checked);\r\n            this.updateVisibleFields();\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        // Save settings for previous stuff.\r\n        const lockedFields = this.getLockedFields();\r\n        const openDataStructured = this.getOpenFields();\r\n\r\n        // Remove previous stuff.\r\n        this.inputs = [];\r\n        this.form.find('._field').remove();\r\n\r\n        // Add fields.\r\n        const project = storageService.getCurrentProject();\r\n        const fields = project.getFieldsForDimensions();\r\n        fields.forEach(field => {\r\n            const e = this.fieldTemplate.clone();\r\n            e.find('._name').text(field.shortLabel || field.label);\r\n            this.fieldsContainer.append(e);\r\n\r\n            let values = sourceDataService.getAvailableValuesForField(field, project);\r\n\r\n            // Create input.\r\n            let input;\r\n            if (field.slug === 'value') {\r\n                input = new wijmo.input.InputNumber(e.find('._input')[0], {\r\n                    format: 'g10',\r\n                    isRequired: false,\r\n                    value: null\r\n                });\r\n            } else if (field.isTime) {\r\n                input = new wijmo.input.InputDate(e.find('._input')[0], {\r\n                    format: 'yyyy-MM-dd'\r\n                });\r\n            } else {\r\n                input = new wijmo.input.AutoComplete(e.find('._input')[0], {\r\n                    itemsSource: values\r\n                });\r\n            }\r\n            input._kosmosField = field.slug;\r\n            this.inputs.push(input);\r\n\r\n            // Default value and lock\r\n            if (field.slug in lockedFields) {\r\n                input._setText(lockedFields[field.slug]);\r\n                this.getInputLock(input).prop('checked', true);\r\n            } else {\r\n                input._setText('');\r\n            }\r\n\r\n            const isChild = typeof field.child !== 'undefined' && field.child;\r\n            e.find('._lock-container').toggleClass('_child', isChild);\r\n            e.find('._data-structures-container').toggleClass(\r\n                '_hidden',\r\n                !field.hasDataStructures && !field.hasGlobalTerms && !field.hasTimeIntervals\r\n            );\r\n            e.find('._data-structures-container').toggleClass('_child', isChild);\r\n            e.find('._data-structures-container').toggleClass('_checked', field.slug in openDataStructured);\r\n        });\r\n        this.updateVisibleFields();\r\n    }\r\n\r\n    getLockedFields() {\r\n        const lockedFields = {};\r\n\r\n        this.inputs.forEach(input => {\r\n            if (this.isInputLocked(input)) {\r\n                lockedFields[input._kosmosField] = input.text;\r\n            }\r\n        });\r\n\r\n        return lockedFields;\r\n    }\r\n\r\n    getOpenFields() {\r\n        const openFields = {};\r\n\r\n        this.inputs.forEach(input => {\r\n            if (\r\n                $(input._e)\r\n                    .closest('._field')\r\n                    .find('._data-structures-container._checked').length > 0\r\n            ) {\r\n                openFields[input._kosmosField] = true;\r\n            }\r\n        });\r\n\r\n        return openFields;\r\n    }\r\n\r\n    getDataPointFromForm() {\r\n        // Get point.\r\n        const dataPoint = {};\r\n        this.inputs.forEach(input => {\r\n            if (input._kosmosField === 'value') {\r\n                dataPoint[input._kosmosField] = input.value;\r\n            } else {\r\n                dataPoint[input._kosmosField] = input.text;\r\n            }\r\n        });\r\n        dataPoint.value = parseFloat(dataPoint.value);\r\n        dataPoint.scale = parseInt(dataPoint.scale);\r\n        dataPoint.source = 'manual';\r\n\r\n        return dataPoint;\r\n    }\r\n\r\n    addDataPoint(saveInsteadOfAdding = false) {\r\n        const dataPoint = this.getDataPointFromForm();\r\n\r\n        if (saveInsteadOfAdding) {\r\n            dataPoint.id = this.selectedItem.id;\r\n            dataPoint.source = this.selectedItem.source;\r\n        }\r\n\r\n        const result = storageService.getCurrentProject().addDataPoint(dataPoint);\r\n\r\n        // Abort.\r\n        if (!result.success) {\r\n            alert(result.error);\r\n            return;\r\n        }\r\n\r\n        // Deselect.\r\n        if (!saveInsteadOfAdding) {\r\n            sourceDataPoints.flexgrid.select(-1, -1);\r\n        }\r\n\r\n        // Save project.\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    deleteDataPoint() {\r\n        const dataPoints = storageService.getCurrentDataPoints();\r\n        const key = storageService.getCurrentProject().getKeyForDataPointId(this.selectedItem.id);\r\n        dataPoints.splice(key, 1);\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    clearAllFields() {\r\n        this.form.find('._lock').prop('checked', false);\r\n        sourceDataPoints.flexgrid.select(-1, -1);\r\n        this.setSelectedItem(null);\r\n    }\r\n\r\n    addCustomDimension() {\r\n        const project = storageService.getCurrentProject();\r\n        const dimension = project.addDimensionWithPrompt();\r\n\r\n        if (dimension) {\r\n            storageService.saveCurrentProject();\r\n            storageService.syncViews();\r\n        }\r\n    }\r\n\r\n    getInputLock(input) {\r\n        return $(input._e)\r\n            .closest('._field')\r\n            .find('._lock');\r\n    }\r\n\r\n    isInputLocked(input) {\r\n        return this.getInputLock(input).is(':checked');\r\n    }\r\n\r\n    setSelectedItem(item) {\r\n        this.selectedItem = item;\r\n\r\n        if (!item) {\r\n            item = this.getLockedFields();\r\n        }\r\n\r\n        // Set fields.\r\n        this.inputs.forEach(input => {\r\n            const field = input._kosmosField;\r\n\r\n            if (item && field in item) {\r\n                if (field === 'value') {\r\n                    input.value = parseFloat(item[field]);\r\n                } else {\r\n                    input._setText(item[field]);\r\n                }\r\n            } else {\r\n                if (field === 'value') {\r\n                    input.value = null;\r\n                } else {\r\n                    input._setText('');\r\n                }\r\n            }\r\n        });\r\n\r\n        // Show/hide buttons.\r\n        this.form.find('._save-data-point').prop('disabled', !(item && item.id));\r\n        this.form.find('._delete-data-point').prop('disabled', item && item.source !== 'manual');\r\n    }\r\n\r\n    updateVisibleFields() {\r\n        let previousWasChecked = false;\r\n        this.fieldsContainer.find('._field').each((i, field) => {\r\n            const dataStructureContainer = $(field).find('._data-structures-container');\r\n            const isChecked = dataStructureContainer.hasClass('_checked');\r\n            const isChild = dataStructureContainer.hasClass('_child');\r\n\r\n            if (isChild) {\r\n                $(field).css('display', previousWasChecked ? '' : 'none');\r\n            } else {\r\n                previousWasChecked = isChecked;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const sourceDataPointsSidebar = new SourceDataPointsSidebar();\r\n","import { concat } from 'lodash';\r\nimport { common } from '../../Common';\r\n\r\nclass SourceDataService {\r\n    constructor() {}\r\n\r\n    /**\r\n     * @param field\r\n     * @param project Project\r\n     * @returns {Array}\r\n     */\r\n    getAvailableValuesForField(field, project) {\r\n        const dataset = project.dataPoints;\r\n        let values = [];\r\n\r\n        if (field.isParent) {\r\n            values = common.getUniqueValues(dataset, field.attribute);\r\n        } else if (field.isGroup) {\r\n            const dataStructures = Object.values(project.getDataStructuresForDimension(field.attribute));\r\n            values = common.getUniqueValues(dataStructures, 'group');\r\n        }\r\n        // TODO\r\n        else if (field.isGlobalTerm) {\r\n            values = common.getGlobalTerms();\r\n        } else if (field.slug !== 'value' && field.slug !== 'inverse') {\r\n            values = common.getUniqueValues(dataset, field.slug);\r\n        } else if (field.slug === 'inverse') {\r\n            values = ['No', 'Yes'];\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param dimension\r\n     * @param project Project\r\n     * @returns {wijmo.grid.DataMap}\r\n     */\r\n    getDataMapForDimension(dimension, project) {\r\n        if (dimension.slug === 'value') {\r\n            return null;\r\n        }\r\n\r\n        const dictionaries = dimension.dictionaries;\r\n        let vals = [];\r\n        if (dictionaries) {\r\n            dictionaries.map(dictionary => {\r\n                vals = concat(vals, common.getGlobalTermsByDictionary(dictionary));\r\n            });\r\n        }\r\n\r\n        let values = vals.map(value => {\r\n            return {\r\n                value: value\r\n            };\r\n        });\r\n\r\n        const dataMap = new wijmo.grid.DataMap(values, 'value', 'value');\r\n\r\n        return dataMap;\r\n    }\r\n}\r\n\r\nexport const sourceDataService = new SourceDataService();\r\n","import cloneDeep from 'lodash/cloneDeep';\r\nimport get from 'lodash/get';\r\nimport includes from 'lodash/includes';\r\nimport setWith from 'lodash/setWith';\r\nimport { common } from '../../../Common';\r\nimport { constants } from '../../../Constants';\r\nimport { resizableDivider } from '../../../ResizableDivider';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { FileWorkflow } from '../../../tabs/source-data/add-file-workflow/FileWorkflow';\r\nimport { FileWorkflowStep1 } from '../../../tabs/source-data/add-file-workflow/FileWorkflowStep1';\r\nimport { FileWorkflowStep2 } from '../../../tabs/source-data/add-file-workflow/FileWorkflowStep2';\r\nimport { FileWorkflowStep3 } from '../../../tabs/source-data/add-file-workflow/FileWorkflowStep3';\r\nimport { FileWorkflowStep4 } from '../../../tabs/source-data/add-file-workflow/FileWorkflowStep4';\r\nimport { sourceDataEditTableCell } from '../../../tabs/source-data/add-file-workflow/SourceDataEditTableCell';\r\nimport { sourceDataFilesReviewTable } from '../../../tabs/source-data/add-file-workflow/SourceDataFilesReviewTable';\r\nimport { sourceDataFilesSidebar } from '../../../tabs/source-data/add-file-workflow/SourceDataFilesSidebar';\r\nimport { addManualSidebar } from '../../../tabs/source-data/add-manual-workflow/AddManualSidebar';\r\nimport { sourceData } from '../../../tabs/source-data/SourceData';\r\nimport { sourceDataFiles } from '../../../tabs/source-data/SourceDataFiles';\r\n\r\nclass AddFileSteps {\r\n    constructor() {\r\n        this.ingestionStep = 1;\r\n        this.container = $('#source_data');\r\n        this.fileWorkflow = new FileWorkflow();\r\n        this.DEFINE_DATA_STEP = 1;\r\n        this.STRUCTURE_DATA_STEP = 2;\r\n        this.GLOBAL_MAPPING_STEP = 3;\r\n        this.REVIEW_STEP = 4;\r\n        this.FINISH_STEP = 5;\r\n        this.steps = [\r\n            new FileWorkflowStep1(this.container, this.fileWorkflow),\r\n            new FileWorkflowStep2(this.container, this.fileWorkflow),\r\n            new FileWorkflowStep3(this.container, this.fileWorkflow),\r\n            new FileWorkflowStep4(this.container, this.fileWorkflow)\r\n        ];\r\n\r\n        /** @type {Project} */\r\n        this.project = null;\r\n\r\n        this.labelBrushesColors = constants.getAllColors();\r\n    }\r\n\r\n    init() {\r\n        // Back\r\n        $('#source_data_files_sidebar ._ingestion-steps ._back').on('click', () => {\r\n            this.ingestionPrevStepSwitch();\r\n        });\r\n\r\n        // Next\r\n        $('#source_data_files_sidebar ._ingestion-steps ._next').on('click', () => {\r\n            this.ingestionNextStepSwitch();\r\n        });\r\n\r\n        // Jump to a specific step.\r\n        $('#source_data_files_pre_ingestion ._ingestion-steps-display ._step').on('click', e => {\r\n            const step = parseInt($(e.currentTarget).attr('data-step'));\r\n            this.headerStepNav(step);\r\n        });\r\n\r\n        const mySlider = $('#_zoom-slider')\r\n            .bootstrapSlider({\r\n                min: 25,\r\n                max: 100,\r\n                step: 1,\r\n                value: 100,\r\n                selection: 'before',\r\n                tooltip: 'show',\r\n                formatter: value => {\r\n                    return value + '%';\r\n                }\r\n            })\r\n            .on('slide', function(evt) {\r\n                let zoomValue = mySlider.bootstrapSlider('getValue') / 100;\r\n\r\n                $('#source_data_files ._table')\r\n                    .first()\r\n                    .css('zoom', zoomValue);\r\n            });\r\n    }\r\n\r\n    sync() {}\r\n\r\n    cancelWorkflow() {\r\n        const confirmation = confirm('Are you sure you want to cancel?');\r\n        if (!confirmation) {\r\n            return;\r\n        }\r\n\r\n        this.steps[2].inputsValues = {};\r\n        if (this.steps[2].dimensionSelect.selectedItem) {\r\n            this.steps[2].changeDimension();\r\n            this.steps[2].changeDictionary();\r\n        }\r\n\r\n        sourceData.endWorkflow();\r\n        $('#source_data_files_pre_ingestion').hide();\r\n        $('#source_data_files_sidebar').css('display', 'none');\r\n        $('#source_data_import_table').val('');\r\n        $('ul.nav a[href=\"#dropbox\"]').trigger('click');\r\n        sourceDataEditTableCell.firstCellAutomaticSelectionFinished = false;\r\n\r\n        // Unfreeze columns and rows.\r\n        sourceDataFiles.flexGrid.frozenColumns = 0;\r\n        sourceDataFiles.flexGrid.frozenRows = 0;\r\n\r\n        storageService.syncViews();\r\n    }\r\n\r\n    headerStepNav(step) {\r\n        if (step < this.ingestionStep) {\r\n            this.prevStep(step);\r\n        } else {\r\n            switch (step) {\r\n                case 2:\r\n                    this.updateDimensionsForDefDataPointsStep();\r\n                    this.structureDataStep();\r\n                    break;\r\n\r\n                case 3:\r\n                    this.globalMappingStep();\r\n                    break;\r\n\r\n                case 4:\r\n                    this.updateDimensionsForDefDataPointsStep();\r\n                    this.saveCurrentDataPoints();\r\n                    this.reviewStep();\r\n                    break;\r\n\r\n                case 5:\r\n                    this.finishStep();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    defineLabelsStep() {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        if (!file) {\r\n            return;\r\n        }\r\n\r\n        const tableSource = sourceDataFiles.flexGrid.itemsSource;\r\n\r\n        // Display the Brushes list of dimensions.\r\n        const dimensions = sourceDataFilesSidebar.columnDefs;\r\n        dimensions.map((dimension, index) => {\r\n            if (dimension.selected) {\r\n                const container = $('<div class=\"_brush-container\"></div>');\r\n                const div = $('<div class=\"_brush _label-brush\"></div>');\r\n                const rangeDiv = $('<div class=\"_label-brush-range\"></div>');\r\n                const globalDiv = $('<div class=\"_label-global\"></div>');\r\n                const backgroundColor = this.labelBrushesColors[index];\r\n                const color = constants.getTextColorForBackground(backgroundColor);\r\n                div.css('background-color', backgroundColor);\r\n                div.css('color', color);\r\n                div.attr('data-dimension', dimension.label);\r\n                div.html(dimension.label);\r\n                div.prepend('<i class=\"fa fa-paint-brush\" aria-hidden=\"true\"></i> ');\r\n                rangeDiv.css('background-color', backgroundColor);\r\n                rangeDiv.css('color', color);\r\n                globalDiv.css('background-color', backgroundColor);\r\n                globalDiv.css('color', color);\r\n                container\r\n                    .append(div)\r\n                    .append(rangeDiv)\r\n                    .append(globalDiv);\r\n                $('.brush-section').append(container);\r\n\r\n                // Define range for each dimension.\r\n                this.defineRangeForEachDimension(tableSource, rangeDiv, div, file, dimension);\r\n            }\r\n        });\r\n    }\r\n\r\n    defineRangeForEachDimension(tableSource, rangeDiv, div, file, dimension) {\r\n        const ranges = [];\r\n        const rangeText = [];\r\n        for (let i = 0; i < tableSource.length; i++) {\r\n            ranges[i] = new Array(tableSource[0].length);\r\n            for (let j = 0; j < tableSource[0].length; j++) {\r\n                ranges[i][j] = false;\r\n            }\r\n        }\r\n        tableSource.map((row, r) => {\r\n            row.map((col, c) => {\r\n                const labelDimension = get(file.cellProperties, `[${c}][${r}]['labelDimension']`, false);\r\n                const isLabel = get(file.cellProperties, `[${c}][${r}]['cellType']`, false);\r\n                if (includes(labelDimension, dimension.label) && isLabel === 'label') {\r\n                    let range = get(file.cellProperties, `[${c}][${r}]['range']`, false);\r\n                    range = range ? XLSX.utils.decode_range(range) : range;\r\n                    if (range) {\r\n                        for (let r = range.s.r; r <= range.e.r; r++) {\r\n                            for (let c = range.s.c; c <= range.e.c; c++) {\r\n                                ranges[r][c] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        const inRange = {};\r\n        const rows = ranges.length;\r\n        const cols = ranges[0].length;\r\n\r\n        for (let r = 0; r < rows; r++) {\r\n            for (let c = 0; c < cols; c++) {\r\n                let lastRow = rows - 1;\r\n                let lastCol = cols - 1;\r\n                if (ranges[r][c] && !get(inRange, `[${c}][${r}]`, false)) {\r\n                    for (let i = r; i < rows; i++) {\r\n                        if (!get(inRange, `[${c}][${i}]`, false) && ranges[i][c]) {\r\n                            setWith(inRange, `${c}.${i}`, true, Object);\r\n                        } else {\r\n                            lastRow = i - 1;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (let i = c + 1; i < cols; i++) {\r\n                        let isRange = true;\r\n                        for (let j = r; j <= lastRow; j++) {\r\n                            if (ranges[j][i] && !get(inRange, `[${i}][${j}]`, false)) {\r\n                                setWith(inRange, `${i}.${j}`, true, Object);\r\n                            } else {\r\n                                isRange = false;\r\n                                for (let k = j; k >= r; k--) {\r\n                                    setWith(inRange, `${i}.${k}`, false, Object);\r\n                                }\r\n                                i--;\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!isRange) {\r\n                            lastCol = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    rangeText.push(XLSX.utils.encode_range({ s: { r: r, c: c }, e: { r: lastRow, c: lastCol } }));\r\n                }\r\n            }\r\n        }\r\n\r\n        rangeDiv.html(rangeText.join(', '));\r\n    }\r\n\r\n    ingestionPrevStepSwitch() {\r\n        const prevStep = this.ingestionStep - 1;\r\n        sourceDataFilesSidebar.syncDimensionsContainer();\r\n\r\n        this.prevStep(prevStep);\r\n    }\r\n\r\n    prevStep(step) {\r\n        this.setStep(step);\r\n\r\n        if (step === this.DEFINE_DATA_STEP) {\r\n            sourceDataFilesSidebar.showHiddenCells();\r\n            this.defineTablesStep();\r\n            this.defineLabelsStep();\r\n        }\r\n\r\n        // Save new current ingestion step for file.\r\n        sourceFilesService.getCurrentSourceFile().ingestionStep = this.ingestionStep;\r\n        storageService.saveCurrentProject();\r\n\r\n        // Display Sidebar for current step.\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n    }\r\n\r\n    ingestionNextStepSwitch() {\r\n        const nextStep = this.ingestionStep + 1;\r\n        sourceDataFilesSidebar.syncDimensionsContainer();\r\n\r\n        switch (nextStep) {\r\n            case this.STRUCTURE_DATA_STEP:\r\n                this.structureDataStep();\r\n                break;\r\n            case this.GLOBAL_MAPPING_STEP:\r\n                this.globalMappingStep();\r\n                break;\r\n            case this.REVIEW_STEP:\r\n                this.reviewStep();\r\n                break;\r\n            case this.FINISH_STEP:\r\n                this.finishStep();\r\n                break;\r\n        }\r\n    }\r\n\r\n    async finishStep() {\r\n        let success = true;\r\n        let projectKey = localStorage.getItem('current_project_key');\r\n        let thisproject = JSON.parse(localStorage.getItem(projectKey));\r\n        localStorage.setItem('currentProject', JSON.stringify(thisproject));\r\n        let currentFileId = localStorage.getItem('currentFileID');\r\n        let file;\r\n        if (!localStorage.getItem('blobExcelData')) file = sourceFilesService.getCurrentSourceFile();\r\n        else file = get(thisproject, `sourceFiles[${currentFileId}]`);\r\n\r\n        this.ingestionStep--;\r\n        const project = storageService.getCurrentProject() || thisproject;\r\n\r\n        let fileDataPointsCopyArray = [];\r\n        let successCount = 0;\r\n        let errors = '';\r\n\r\n        // Add new Data Points.\r\n        file.dataPoints.map((dataPoint, index) => {\r\n            let dataPointCopy = _.assign({}, dataPoint);\r\n\r\n            const col = dataPointCopy.col;\r\n            const row = dataPointCopy.row;\r\n\r\n            // delete dataPointCopy.source;\r\n            delete dataPointCopy.col;\r\n            delete dataPointCopy.row;\r\n\r\n            const result = storageService.getCurrentProject().addDataPoint(dataPointCopy);\r\n            if (result.success) {\r\n                // Save the data point ID for cell.\r\n                file.cellProperties[col][row]['dataPointId'] = result.id;\r\n                file.cellProperties[col][row]['failedSaving'] = false;\r\n                const dpCopy = Object.assign({}, dataPoint);\r\n                dpCopy.id = result.id;\r\n                fileDataPointsCopyArray.push(dpCopy);\r\n                successCount++;\r\n            } else {\r\n                success = false;\r\n                // Here add red warning that it did not get saved successfully.\r\n                file.cellProperties[col][row]['failedSaving'] = true;\r\n                errors += 'Error for data-point with the value = ' + dataPoint.value + ': ' + result.error + '\\n';\r\n            }\r\n        });\r\n\r\n        // Remove Data Points.\r\n        file.dataPointsCopy.map(dataPoint => {\r\n            let deleteDataPoint = true;\r\n\r\n            file.dataPoints.map(dp => {\r\n                if (dp.id === dataPoint.id) {\r\n                    deleteDataPoint = false;\r\n                }\r\n            });\r\n\r\n            if (deleteDataPoint) {\r\n                project.dataPoints.splice(_.findIndex(project.dataPoints, dp => dp.id === dataPoint.id), 1);\r\n                file.cellProperties[dataPoint.col][dataPoint.row]['dataPointId'] = 'initial';\r\n            }\r\n        });\r\n\r\n        // Add data structures.\r\n        addManualSidebar.sourceDataStructures.addDataStructuresFromProject(this.project);\r\n\r\n        // Add global mapping structures.\r\n        file.globalMappingStructures.map(el => {\r\n            storageService.getCurrentProject().addDataStructure(el.dimension, el.value, null, null, el.globalTerm);\r\n        });\r\n        this.steps[2].inputsValues = {};\r\n\r\n        try {\r\n            this.steps[2].changeDimension();\r\n            this.steps[2].changeDictionary();\r\n        } catch (err) {\r\n            console.log('will change later changeDimension', err);\r\n        }\r\n\r\n        if (success) {\r\n            if (sourceFilesService.getCurrentSourceFile()) alert('Your changes have been saved successfully.');\r\n        } else {\r\n            alert(\r\n                successCount +\r\n                    '/' +\r\n                    file.dataPoints.length +\r\n                    ' data-points were saved. The following errors have occurred: ' +\r\n                    '\\n' +\r\n                    errors\r\n            );\r\n        }\r\n\r\n        // If not set to true, first time clicking on a cell will not open the modal.\r\n        sourceDataEditTableCell.firstCellAutomaticSelectionFinished = true;\r\n\r\n        // Unfreeze columns and rows.\r\n        //sourceDataFiles.flexGrid.frozenColumns = 0;\r\n        //sourceDataFiles.flexGrid.frozenRows = 0;\r\n\r\n        file.dataPointsCopy = fileDataPointsCopyArray;\r\n        file.ingestionStep = 1;\r\n        //sourceDataFiles.flexGrid.refresh();\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n        sourceData.endWorkflow();\r\n    }\r\n\r\n    globalMappingStep() {\r\n        this.nextStep(this.GLOBAL_MAPPING_STEP);\r\n    }\r\n\r\n    reviewStep() {\r\n        this.nextStep(this.REVIEW_STEP);\r\n\r\n        // Display new table.\r\n        sourceDataFilesReviewTable.sync();\r\n\r\n        // Change Next button to Finish.\r\n        $('#source_data_files_sidebar ._ingestion-steps ._next').text('Finish');\r\n    }\r\n\r\n    saveCurrentDataPoints() {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        // file.dataPointsCopy = file.dataPoints;\r\n        file.dataPoints = [];\r\n        const columns = file.cellProperties;\r\n\r\n        if (columns) {\r\n            Object.keys(columns).forEach(function(i) {\r\n                const rows = columns[i];\r\n                Object.keys(rows).forEach(function(j) {\r\n                    const cell = rows[j];\r\n                    if (cell.cellType === 'data') {\r\n                        let dataPoint = cloneDeep(cell);\r\n\r\n                        delete dataPoint.cellType;\r\n                        delete dataPoint.appliedLabelWarning;\r\n                        if (dataPoint.dataPointId !== 'noID' && dataPoint.dataPointId !== 'initial') {\r\n                            dataPoint.id = dataPoint.dataPointId;\r\n                        }\r\n\r\n                        delete dataPoint.dataPointId;\r\n\r\n                        // TODO: temporary solution\r\n                        delete dataPoint.parent_attribute;\r\n                        delete dataPoint.global_term;\r\n\r\n                        dataPoint.source = sourceFilesService.currentUuid;\r\n                        dataPoint.col = i;\r\n                        dataPoint.row = j;\r\n\r\n                        file.dataPoints.push(dataPoint);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    structureDataStep() {\r\n        this.nextStep(this.STRUCTURE_DATA_STEP);\r\n\r\n        // Save current data points for file.\r\n        this.saveCurrentDataPoints();\r\n\r\n        // Load data structures.\r\n        if (addFileSteps.ingestionStep === this.STRUCTURE_DATA_STEP) {\r\n            // Get new data points.\r\n            const file = sourceFilesService.getCurrentSourceFile();\r\n\r\n            // Copy new data points into our project, and assign fake IDs to them as its required by the validator.\r\n            addFileSteps.project.dataPoints = cloneDeep(file.dataPoints);\r\n            addFileSteps.project.dataPoints = addFileSteps.project.dataPoints.reduce((dataPoints, dataPoint) => {\r\n                dataPoint.id = common.getNextUuid();\r\n                dataPoints.push(dataPoint);\r\n\r\n                return dataPoints;\r\n            }, []);\r\n\r\n            // Use new project for data-structures screen.\r\n            sourceDataFilesSidebar.sourceDataStructures.setProject(addFileSteps.project);\r\n            sourceDataFilesSidebar.sourceDataStructures.sync();\r\n        }\r\n\r\n        storageService.saveCurrentProject();\r\n    }\r\n\r\n    updateDimensionsForDefDataPointsStep() {\r\n        // Update dimensions for cell properties.\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const cellProperties = file.cellProperties;\r\n        if (cellProperties) {\r\n            Object.keys(cellProperties).forEach(col => {\r\n                if (cellProperties[col]) {\r\n                    Object.keys(cellProperties[col]).forEach(row => {\r\n                        sourceDataFilesSidebar.columnDefs.map(dimension => {\r\n                            if (!dimension.selected) {\r\n                                if (cellProperties[col][row].hasOwnProperty(dimension.slug)) {\r\n                                    cellProperties[col][row][dimension.slug] = '';\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    defineTablesStep() {\r\n        this.updateDimensionsForDefDataPointsStep();\r\n    }\r\n\r\n    nextStep(step) {\r\n        this.setStep(step);\r\n\r\n        // Save new current ingestion step for file.\r\n        sourceFilesService.getCurrentSourceFile().ingestionStep = this.ingestionStep;\r\n        storageService.saveCurrentProject();\r\n\r\n        // Display Sidebar for current step and disable Data|Label Views switch.\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n    }\r\n\r\n    setStep(step) {\r\n        if (this.ingestionStep === 2) {\r\n            resizableDivider.resetResizable('#source_data_files_pre_ingestion ._table', () => {});\r\n        }\r\n\r\n        $('._brush-container').remove();\r\n        this.ingestionStep = step;\r\n\r\n        // Reset table mode.\r\n        this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;\r\n\r\n        // Hide all.\r\n        this.steps.forEach(step => {\r\n            step.hide();\r\n        });\r\n\r\n        // Show current step.\r\n        this.steps[this.ingestionStep - 1].show();\r\n\r\n        if (this.ingestionStep === 2) {\r\n            resizableDivider.enableResizable(\r\n                '#source_data_files_pre_ingestion ._table',\r\n                '.dataStructuresComponent',\r\n                'height',\r\n                { handles: 's' },\r\n                { minHeight: 200, maxHeight: 800 },\r\n                () => {}\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport const addFileSteps = new AddFileSteps();\r\n","import { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { sourceDataFiles } from '../SourceDataFiles';\r\nimport { FileWorkflowItemFormatter } from './FileWorkflowItemFormatter';\r\nimport { sourceDataEditTableCell } from './SourceDataEditTableCell';\r\n\r\nexport class FileWorkflow {\r\n    constructor() {\r\n        this.MODE_MODAL = 0;\r\n        this.MODE_BRUSH = 1;\r\n        this.MODE_STRUCTURE = 2;\r\n        this.MODE_RANGE_PICKER = 3;\r\n        this.MODE_CLICK_TO_COPY = 4;\r\n\r\n        // Current operating mode.\r\n        this.mode = this.MODE_MODAL;\r\n\r\n        // Is the user making a selection using the mouse?\r\n        this.isSelectingWithMouse = false;\r\n\r\n        // Function to call after brush mode has ended.\r\n        this.callback = null;\r\n\r\n        // Disable any further selection events on the flex-grid.\r\n        this.disableSelection = false;\r\n\r\n        // List of cells selected while in Structure mode.\r\n        this.selectedStructureCells = [];\r\n\r\n        // Saves the previous cell selection when the modal mode is active.\r\n        this.previousModalSelection = null;\r\n\r\n        // Ignore selection-changing events, e.g. if we're programatically changing the selection.\r\n        this.ignoreSelectionChangingEvents = false;\r\n\r\n        // Catch mouse-up events even if they are outside the flexgrid.\r\n        $(document).on('mouseup', () => {\r\n            this.onMouseUp();\r\n        });\r\n\r\n        // Item formatter.\r\n        this.itemFormatter = new FileWorkflowItemFormatter();\r\n    }\r\n\r\n    enableModal() {\r\n        this.reset();\r\n        this.mode = this.MODE_MODAL;\r\n        sourceDataFiles.flexGrid.selectionMode = wijmo.grid.SelectionMode.CellRange;\r\n        sourceDataFiles.flexGrid.refresh();\r\n    }\r\n\r\n    enableBrush(callback) {\r\n        this.reset();\r\n        this.mode = this.MODE_BRUSH;\r\n        this.callback = callback;\r\n        sourceDataFiles.flexGrid.selectionMode = wijmo.grid.SelectionMode.CellRange;\r\n        sourceDataFiles.flexGrid.refresh();\r\n    }\r\n\r\n    enableStructure() {\r\n        this.reset();\r\n        this.mode = this.MODE_STRUCTURE;\r\n        this.selectedStructureCells = [];\r\n        sourceDataFiles.flexGrid.selectionMode = wijmo.grid.SelectionMode.Cell;\r\n        sourceDataFiles.flexGrid.selection = new wijmo.grid.CellRange(-1, -1, -1, -1);\r\n    }\r\n\r\n    enableRangePickerMode(callback) {\r\n        // If multiple cells are selected, label range cannot be edited.\r\n        if (sourceDataFiles.flexGrid.selection.isSingleCell === false) {\r\n            return;\r\n        }\r\n\r\n        // Reset.\r\n        this.reset();\r\n\r\n        // Save previous selection, will be used when we re-active modal mode.\r\n        if (this.mode === this.MODE_MODAL) {\r\n            this.previousModalSelection = sourceDataFiles.flexGrid.selection;\r\n        }\r\n\r\n        $(sourceDataFiles.flexGrid.hostElement).addClass('_copy-cursor');\r\n        this.mode = this.MODE_RANGE_PICKER;\r\n        this.callback = callback;\r\n        sourceDataFiles.flexGrid.refresh();\r\n    }\r\n\r\n    enableClickToCopyMode(callback) {\r\n        // Reset.\r\n        this.reset();\r\n\r\n        // Save previous selection, will be used when we re-active modal mode.\r\n        if (this.mode === this.MODE_MODAL) {\r\n            this.previousModalSelection = sourceDataFiles.flexGrid.selection;\r\n        }\r\n\r\n        $(sourceDataFiles.flexGrid.hostElement).addClass('_copy-cursor');\r\n        this.mode = this.MODE_CLICK_TO_COPY;\r\n        this.callback = callback;\r\n        sourceDataFiles.flexGrid.refresh();\r\n    }\r\n\r\n    reset() {\r\n        this.disableSelection = false;\r\n        $(sourceDataFiles.flexGrid.hostElement).removeClass('_copy-cursor');\r\n    }\r\n\r\n    onTableSelectionChanging(s, e) {\r\n        if (this.ignoreSelectionChangingEvents) {\r\n            return;\r\n        }\r\n\r\n        // If user is still dragging the selection but we already cancelled it...\r\n        if (this.disableSelection) {\r\n            e.cancel = true;\r\n            return;\r\n        }\r\n\r\n        switch (this.mode) {\r\n            case this.MODE_MODAL:\r\n                // If modal is open, try to close it.\r\n                if ($('#tableCellModal').is(':visible')) {\r\n                    $('#tableCellModal').modal('hide');\r\n\r\n                    // Still visible? Then the user clicked \"cancel\", so we should cancel too.\r\n                    if ($('#tableCellModal').is(':visible')) {\r\n                        e.cancel = true;\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n            case this.MODE_BRUSH:\r\n                break;\r\n\r\n            case this.MODE_RANGE_PICKER:\r\n                if (s === undefined || e === undefined) {\r\n                    break;\r\n                }\r\n                this.callback(this, e);\r\n                break;\r\n\r\n            case this.MODE_CLICK_TO_COPY:\r\n                if (s === undefined || e === undefined) {\r\n                    break;\r\n                }\r\n                this.callback(this, e);\r\n                break;\r\n        }\r\n    }\r\n\r\n    onTableSelectionChanged(s, e) {\r\n        if (this.ignoreSelectionChangingEvents) {\r\n            return;\r\n        }\r\n\r\n        if (e.cancel || !e.range.isValid) {\r\n            return;\r\n        }\r\n\r\n        // Do not call this event when first opening the table. Flexgrid automatically calls this for the [0, 0] cell.\r\n        if (!this.firstCellAutomaticSelectionFinished) {\r\n            this.firstCellAutomaticSelectionFinished = true;\r\n\r\n            return;\r\n        }\r\n\r\n        switch (this.mode) {\r\n            case this.MODE_MODAL:\r\n                sourceDataEditTableCell.onTableSelectionChanged(s, e);\r\n                break;\r\n\r\n            case this.MODE_BRUSH:\r\n                break;\r\n\r\n            case this.MODE_STRUCTURE:\r\n                const cellProperties = sourceFilesService.getCurrentSourceFile().getSingleCellProperties(e.row, e.col);\r\n\r\n                // Only consider data-cells.\r\n                if (cellProperties.cellType !== 'data') {\r\n                    break;\r\n                }\r\n\r\n                // Save new cell.\r\n                this.selectedStructureCells.push({\r\n                    row: e.row,\r\n                    col: e.col\r\n                });\r\n\r\n                // Format table.\r\n                sourceDataFiles.flexGrid.refresh();\r\n                break;\r\n            case this.MODE_RANGE_PICKER:\r\n                break;\r\n            case this.MODE_CLICK_TO_COPY:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onMouseDown() {\r\n        if (this.disableSelection) {\r\n            return;\r\n        }\r\n        this.isSelectingWithMouse = true;\r\n    }\r\n\r\n    onMouseUp() {\r\n        if (!this.isSelectingWithMouse || !sourceDataFiles.flexGrid.selection.isValid) {\r\n            return;\r\n        }\r\n\r\n        this.isSelectingWithMouse = false;\r\n        this.disableSelection = false;\r\n\r\n        switch (this.mode) {\r\n            case this.MODE_MODAL:\r\n                break;\r\n\r\n            case this.MODE_BRUSH:\r\n                this.callback(sourceDataFiles.flexGrid.selection);\r\n                sourceDataFiles.flexGrid.selection = new wijmo.grid.CellRange(-1, -1, -1, -1);\r\n                break;\r\n\r\n            case this.MODE_RANGE_PICKER:\r\n                if (this.previousModalSelection !== null) {\r\n                    this.ignoreSelectionChangingEvents = true;\r\n                    sourceDataFiles.flexGrid.selection = this.previousModalSelection;\r\n                    this.ignoreSelectionChangingEvents = false;\r\n                    this.previousModalSelection = null;\r\n                }\r\n\r\n                this.disableSelection = true;\r\n                this.enableModal();\r\n                break;\r\n\r\n            case this.MODE_CLICK_TO_COPY:\r\n                if (this.previousModalSelection !== null) {\r\n                    this.ignoreSelectionChangingEvents = true;\r\n                    sourceDataFiles.flexGrid.selection = this.previousModalSelection;\r\n                    this.ignoreSelectionChangingEvents = false;\r\n                    this.previousModalSelection = null;\r\n                }\r\n\r\n                this.disableSelection = true;\r\n                this.enableModal();\r\n                break;\r\n        }\r\n    }\r\n\r\n    formatTableCell(s, e) {\r\n        if ($(e.cell).hasClass('wj-header')) {\r\n            return;\r\n        }\r\n\r\n        $(e.cell).removeClass('_structure-mode-parent');\r\n        $(e.cell).removeClass('_structure-mode-child');\r\n\r\n        switch (this.mode) {\r\n            case this.MODE_STRUCTURE:\r\n                this.selectedStructureCells.forEach((position, index) => {\r\n                    if (e.col === position.col && e.row === position.row) {\r\n                        if (index === 0) {\r\n                            $(e.cell).addClass('_structure-mode-parent');\r\n                        } else {\r\n                            $(e.cell).addClass('_structure-mode-child');\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { sourceDataFilesSidebar } from './SourceDataFilesSidebar';\r\n\r\nexport class FileWorkflowAutoDetectTable {\r\n    constructor() {}\r\n\r\n    /**\r\n     *\r\n     * @param selection {wijmo.grid.CellRange}\r\n     */\r\n    autoDetectTable(selection) {\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n\r\n        // Get range of data-points.\r\n        let dataPointsFound = false;\r\n        let dataFirstRow = sourceFile.getNumberOfRows();\r\n        let dataLastRow = 0;\r\n        let dataFirstColumn = sourceFile.getNumberOfCols();\r\n        let dataLastColumn = 0;\r\n        for (let i = selection.leftCol; i <= selection.rightCol; i++) {\r\n            for (let j = selection.topRow; j <= selection.bottomRow; j++) {\r\n                const cellProperties = sourceFile.getSingleCellProperties(j, i);\r\n\r\n                if (cellProperties.cellType !== 'data') {\r\n                    continue;\r\n                }\r\n\r\n                // Found at least one data point.\r\n                dataPointsFound = true;\r\n\r\n                // Adjust range.\r\n                dataFirstRow = Math.min(dataFirstRow, j);\r\n                dataLastRow = Math.max(dataLastRow, j);\r\n                dataFirstColumn = Math.min(dataFirstColumn, i);\r\n                dataLastColumn = Math.max(dataLastColumn, i);\r\n            }\r\n        }\r\n\r\n        // No data-points?\r\n        if (!dataPointsFound) {\r\n            alert('You must assign the data-points first.');\r\n            return;\r\n        }\r\n\r\n        // Everything else becomes a label.\r\n        for (let i = selection.leftCol; i <= selection.rightCol; i++) {\r\n            for (let j = selection.topRow; j <= selection.bottomRow; j++) {\r\n                let cellProperties = sourceFile.getSingleCellProperties(j, i);\r\n                const cellValue = sourceFile.getCellValue(j, i);\r\n\r\n                if (cellProperties.cellType === 'data' || cellValue === '') {\r\n                    continue;\r\n                }\r\n\r\n                cellProperties.cellType = 'label';\r\n\r\n                let range = '';\r\n\r\n                // Check for data-point on the same row.\r\n                let dataOnRow = false;\r\n                for (let ii = dataFirstColumn; ii <= dataLastColumn; ii++) {\r\n                    const thisCellProperties = sourceFile.getSingleCellProperties(j, ii);\r\n\r\n                    if (thisCellProperties.cellType === 'data') {\r\n                        dataOnRow = true;\r\n                    }\r\n                }\r\n                if (dataOnRow) {\r\n                    range = XLSX.utils.encode_range({ r: j, c: dataFirstColumn }, { r: j, c: dataLastColumn });\r\n                }\r\n\r\n                let dataOnColumn = false;\r\n                for (let jj = dataFirstRow; jj <= dataLastRow; jj++) {\r\n                    const thisCellProperties = sourceFile.getSingleCellProperties(jj, i);\r\n\r\n                    if (thisCellProperties.cellType === 'data') {\r\n                        dataOnColumn = true;\r\n                    }\r\n                }\r\n                if (dataOnColumn) {\r\n                    range = XLSX.utils.encode_range({ r: dataFirstRow, c: i }, { r: dataLastRow, c: i });\r\n                }\r\n\r\n                // Apply to all data-points.\r\n                if (\r\n                    !dataOnRow &&\r\n                    !dataOnColumn &&\r\n                    (j < dataFirstRow || j > dataLastRow) &&\r\n                    (i < dataFirstColumn || i > dataLastColumn)\r\n                ) {\r\n                    range = XLSX.utils.encode_range(\r\n                        { r: dataFirstRow, c: dataFirstColumn },\r\n                        { r: dataLastRow, c: dataLastColumn }\r\n                    );\r\n                }\r\n\r\n                // We must get the cellProperties again, the object might have been overwrriten.\r\n                cellProperties = sourceFile.getSingleCellProperties(j, i);\r\n\r\n                // Apply new range.\r\n                cellProperties.range = range;\r\n\r\n                // Re-apply dimensions to data-points.\r\n                sourceFilesService.applyDimensions(cellProperties, sourceDataFilesSidebar.columnDefs);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import get from 'lodash/get';\r\nimport { constants } from '../../../Constants';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { addFileSteps } from './AddFileSteps';\r\nimport { sourceDataFilesSidebar } from './SourceDataFilesSidebar';\r\n\r\nexport class FileWorkflowItemFormatter {\r\n    constructor() {\r\n        // Used for cell warnings.\r\n        this.cellWarnings = [];\r\n        this.nextCellWarning = 0;\r\n\r\n        // Used for cell triangles.\r\n        this.style = null;\r\n        this.previousFormDimensionsLength = null;\r\n    }\r\n\r\n    updatingView() {\r\n        // Table is refreshing, so all of our cell-warning-elements have been detached.\r\n        this.nextCellWarning = 0;\r\n\r\n        // We need a source file.\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n        if (!sourceFile) {\r\n            return;\r\n        }\r\n\r\n        // Create style element.\r\n        if (!this.style) {\r\n            this.style = $('<style>');\r\n            $('html > head').append(this.style);\r\n        }\r\n\r\n        // Recreate CSS rules, if necessary.\r\n        if (this.previousFormDimensionsLength !== sourceFile.formDimensions.length) {\r\n            this.previousFormDimensionsLength = sourceFile.formDimensions.length;\r\n            let styleHtml = '';\r\n\r\n            for (let i = 0; i <= sourceFile.formDimensions.length; i++) {\r\n                const ratio = i / sourceFile.formDimensions.length;\r\n                const color = chroma\r\n                    .mix(\r\n                        constants.FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN,\r\n                        constants.FILE_WORKFLOW_CELL_PROGRESS_COLOR_END,\r\n                        ratio,\r\n                        'lab'\r\n                    )\r\n                    .hex();\r\n                const background =\r\n                    \"url(\\\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='15' height='15'><polygon points='0,0 15,0 0,15' style='fill:\" +\r\n                    color +\r\n                    '\\'></polygon></svg>\")';\r\n\r\n                styleHtml +=\r\n                    '.wj-cell[data-type=\"data\"][data-ratio=\"' +\r\n                    Math.round(ratio * 100) +\r\n                    '\"] { background-image: ' +\r\n                    background +\r\n                    ' !important; background-repeat: no-repeat !important; background-position: 0 0 !important; }\\n';\r\n            }\r\n\r\n            // Save rules.\r\n            this.style.html(styleHtml);\r\n        }\r\n    }\r\n\r\n    formatItem(s, e) {\r\n        const cellElement = $(e.cell);\r\n\r\n        if (cellElement.hasClass('wj-header')) {\r\n            return;\r\n        }\r\n\r\n        // Reset everything, because cells are reused.\r\n        const css = {\r\n            background: '',\r\n            'background-color': '',\r\n            color: ''\r\n        };\r\n\r\n        const col = e._rng._col;\r\n        const row = e._rng._row;\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n        const cell = get(sourceFile, `cellProperties[${col}][${row}]`);\r\n\r\n        // No cell properties? Just reset everything and return early.\r\n        if (!cell) {\r\n            cellElement.attr('data-type', '');\r\n            cellElement.css(css);\r\n            return;\r\n        }\r\n\r\n        if (cell.cellType === 'data') {\r\n            // Add inverse operator\r\n            if (cell.inverse === 'Yes') {\r\n                // Check if cell value is percentage or other format which should be ignored.\r\n                let cellValString = cell.value.toString();\r\n                const isPercentage = this.isPercentage(cellValString);\r\n                cellValString = this.removePercentage(cellValString, isPercentage);\r\n\r\n                if (!isNaN(cellValString)) {\r\n                    cellValString = cellValString * -1;\r\n                }\r\n\r\n                cellValString = this.applyPercentage(cellValString, isPercentage);\r\n\r\n                cellElement.text(cellValString);\r\n            }\r\n\r\n            // Add 2 decimals to numbers.\r\n            if (cell.value !== '' && cell.value !== null) {\r\n                // Check if cell value is percentage or other format which should be ignored.\r\n                let cellValue = cellElement.text();\r\n                const isPercentage = this.isPercentage(cellValue);\r\n                cellValue = this.removePercentage(cellValue, isPercentage);\r\n\r\n                if (!isNaN(parseFloat(cellValue.replace(/,/g, '')))) {\r\n                    cellValue = parseFloat(cellValue.replace(/,/g, ''));\r\n                    cellValue = this.addZeroes(cellValue);\r\n                }\r\n\r\n                cellValue = this.applyPercentage(cellValue, isPercentage);\r\n                cellElement.text(cellValue);\r\n            }\r\n\r\n            // Set ratio.\r\n            const ratio = sourceFile.getCellCompletionPercentage(row, col);\r\n            cellElement.attr('data-ratio', Math.round(ratio * 100));\r\n\r\n            if (cell.appliedLabelWarning) {\r\n                const cellWarning = this.getNextCellWarning();\r\n                cellElement.append(cellWarning);\r\n            }\r\n\r\n            if (cell.failedSaving === true) {\r\n                css['background-color'] = '#ff5c52';\r\n            }\r\n        } else if (cell.cellType === 'label') {\r\n            const dimension = get(cell, `labelDimension[0]`);\r\n            if (dimension) {\r\n                // Get color for dimension.\r\n                let colorIndex = 0;\r\n                for (let i = 0; i < sourceDataFilesSidebar.columnDefs.length; i++) {\r\n                    if (sourceDataFilesSidebar.columnDefs[i].label === dimension) {\r\n                        colorIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Apply color.\r\n                const backgroundColor = addFileSteps.labelBrushesColors[colorIndex];\r\n                css['background-color'] = backgroundColor;\r\n                css['color'] = constants.getTextColorForBackground(backgroundColor);\r\n            } else {\r\n                css['background-color'] = '#a9e2ff';\r\n            }\r\n        }\r\n\r\n        // Apply CSS in bulk.\r\n        cellElement.css(css);\r\n\r\n        // Save cell-type as attribute, used by CSS selectors.\r\n        cellElement.attr('data-type', cell.cellType);\r\n    }\r\n\r\n    addZeroes(num) {\r\n        num = num.toString();\r\n        let value = Number(num);\r\n\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n\r\n        let res = num.split('.');\r\n        if (res.length === 1 || res[1].length < 3) {\r\n            value = value.toFixed(2);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    isPercentage(cellValString) {\r\n        let isPercentage = false;\r\n\r\n        if (cellValString.indexOf('%') > -1) {\r\n            isPercentage = true;\r\n        }\r\n        return isPercentage;\r\n    }\r\n\r\n    removePercentage(cellValString, isPercentage) {\r\n        if (isPercentage) {\r\n            cellValString = cellValString.replace('%', '');\r\n        }\r\n        return cellValString;\r\n    }\r\n\r\n    applyPercentage(cellValString, isPercentage) {\r\n        if (isPercentage) {\r\n            cellValString = cellValString + '%';\r\n        }\r\n\r\n        return cellValString;\r\n    }\r\n\r\n    getNextCellWarning() {\r\n        if (this.cellWarnings.length > this.nextCellWarning) {\r\n            // Reuse existing.\r\n            return this.cellWarnings[this.nextCellWarning++];\r\n        } else {\r\n            // Create new element.\r\n            const element = $(\r\n                '<div class=\"_applied-label-warning\"><i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i></div>'\r\n            );\r\n            this.cellWarnings.push(element);\r\n            this.nextCellWarning++;\r\n            return element;\r\n        }\r\n    }\r\n}\r\n","import { constants } from '../../../Constants';\r\n\r\nexport class FileWorkflowLegend {\r\n    constructor(rootElement) {\r\n        this.rootElement = rootElement;\r\n    }\r\n\r\n    sync(columnDefs) {\r\n        this.rootElement.html('');\r\n        const projectFields = columnDefs.filter(field => {\r\n            return field.selected;\r\n        });\r\n        const totalFields = projectFields.length;\r\n\r\n        this.rootElement.append('<span>0%</span>');\r\n\r\n        for (let i = 0; i <= totalFields; i++) {\r\n            const ratio = totalFields > 0 ? i / totalFields : 1;\r\n            const color = chroma\r\n                .mix(\r\n                    constants.FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN,\r\n                    constants.FILE_WORKFLOW_CELL_PROGRESS_COLOR_END,\r\n                    ratio,\r\n                    'lab'\r\n                )\r\n                .hex();\r\n            const percentage = Math.round(ratio * 100);\r\n            const div = $(`<div style='background-color: ${color}'></div>`);\r\n\r\n            this.rootElement.append(div);\r\n        }\r\n\r\n        this.rootElement.append('<span>100%</span>');\r\n    }\r\n}\r\n","import get from 'lodash/get';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { sourceDataEditTableCell } from '../../../tabs/source-data/add-file-workflow/SourceDataEditTableCell';\r\nimport { sourceDataFiles } from '../SourceDataFiles';\r\nimport { FileWorkflowAutoDetectTable } from './FileWorkflowAutoDetectTable';\r\nimport { sourceDataFilesSidebar } from './SourceDataFilesSidebar';\r\n\r\nexport class FileWorkflowStep1 {\r\n    /**\r\n     * @param rootElement\r\n     * @param fileWorkflow {FileWorkflow}\r\n     */\r\n    constructor(rootElement, fileWorkflow) {\r\n        this.rootElement = rootElement;\r\n        this.fileWorkflow = fileWorkflow;\r\n\r\n        // DOM\r\n        this.brushSection = this.rootElement.find('.brush-section');\r\n        this.dataPointBrush = this.brushSection.find('._data-point');\r\n        this.freezeCol = this.brushSection.find('._freeze-col');\r\n        this.unfreezeCol = this.brushSection.find('._unfreeze-col');\r\n        this.freezeRow = this.brushSection.find('._freeze-row');\r\n        this.unfreezeRow = this.brushSection.find('._unfreeze-row');\r\n        this.notUsedBrush = this.brushSection.find('._not-used');\r\n        this.tableBrush = this.brushSection.find('._table');\r\n        this.table = this.rootElement.find('#source_data_files_pre_ingestion > ._table');\r\n\r\n        // Events\r\n        this.dataPointBrush.on('click', () => {\r\n            const isActive = this.dataPointBrush.hasClass('_active');\r\n            this.resetBrushes();\r\n\r\n            if (isActive) {\r\n                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;\r\n            } else {\r\n                this.table.addClass('_brush-cursor');\r\n                this.dataPointBrush.addClass('_active');\r\n                this.fileWorkflow.enableBrush(this.onDataPointBrushEnd);\r\n            }\r\n        });\r\n        this.notUsedBrush.on('click', () => {\r\n            const isActive = this.notUsedBrush.hasClass('_active');\r\n            this.resetBrushes();\r\n\r\n            if (isActive) {\r\n                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;\r\n            } else {\r\n                this.table.addClass('_brush-cursor');\r\n                this.notUsedBrush.addClass('_active');\r\n                this.fileWorkflow.enableBrush(this.onNotUsedBrushEnd);\r\n            }\r\n        });\r\n        this.tableBrush.on('click', () => {\r\n            const isActive = this.tableBrush.hasClass('_active');\r\n            this.resetBrushes();\r\n\r\n            if (isActive) {\r\n                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;\r\n            } else {\r\n                this.table.addClass('_brush-cursor');\r\n                this.tableBrush.addClass('_active');\r\n                this.fileWorkflow.enableBrush(this.onTableBrushEnd);\r\n            }\r\n        });\r\n        $(document.body).on('click', '._label-brush', event => {\r\n            const brush = $(event.target);\r\n            const isActive = brush.hasClass('_active');\r\n            this.resetBrushes();\r\n\r\n            if (isActive) {\r\n                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;\r\n            } else {\r\n                this.table.addClass('_brush-cursor-for-labels');\r\n                brush.addClass('_active');\r\n                this.fileWorkflow.enableBrush(selection => {\r\n                    $('._show-loading').css('display', 'block');\r\n\r\n                    // Use setTimeout because otherwise loading animation does not appear.\r\n                    setTimeout(() => {\r\n                        this.onLabelBrushEnd(selection, brush.attr('data-dimension'));\r\n                        $('._show-loading').css('display', 'none');\r\n                    }, 50);\r\n                });\r\n            }\r\n        });\r\n        $(document.body).on('click', '._label-global', event => {\r\n            const container = $(event.target).closest('._label-global');\r\n\r\n            if (container.find('i').length === 0) {\r\n                container.append('<i class=\"fa fa-check\" aria-hidden=\"true\"></i>');\r\n                const globalRange = this.getGlobalRange();\r\n                const dimension = container.siblings('._label-brush').data('dimension');\r\n                this.setGlobalRangeToLabels(globalRange, dimension);\r\n            } else {\r\n                container.find('i').remove();\r\n            }\r\n        });\r\n        this.freezeCol.on('click', () => {\r\n            const isActive = this.freezeCol.hasClass('_active');\r\n            this.resetBrushes();\r\n\r\n            if (isActive) {\r\n                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;\r\n            } else {\r\n                this.table.addClass('_brush-cursor');\r\n                this.freezeCol.addClass('_active');\r\n                this.fileWorkflow.enableBrush(this.onFreezeCol);\r\n            }\r\n        });\r\n        this.freezeRow.on('click', () => {\r\n            const isActive = this.freezeRow.hasClass('_active');\r\n            this.resetBrushes();\r\n\r\n            if (isActive) {\r\n                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;\r\n            } else {\r\n                this.table.addClass('_brush-cursor');\r\n                this.freezeRow.addClass('_active');\r\n                this.fileWorkflow.enableBrush(this.onFreezeRow);\r\n            }\r\n        });\r\n        this.unfreezeCol.on('click', () => {\r\n            sourceDataFiles.flexGrid.frozenColumns = 0;\r\n        });\r\n        this.unfreezeRow.on('click', () => {\r\n            sourceDataFiles.flexGrid.frozenRows = 0;\r\n        });\r\n    }\r\n\r\n    sync() {}\r\n\r\n    show() {\r\n        this.brushSection.show();\r\n        this.dataPointBrush.show();\r\n        this.notUsedBrush.show();\r\n        this.tableBrush.show();\r\n        $('#source_data_files_sidebar ._ingestion-steps ._back').css('display', 'none');\r\n        $('#source_data_files_pre_ingestion ._table').css('display', '');\r\n        sourceDataFiles.flexGrid.refresh();\r\n    }\r\n\r\n    hide() {\r\n        this.brushSection.hide();\r\n        this.dataPointBrush.hide();\r\n        this.notUsedBrush.hide();\r\n        this.tableBrush.hide();\r\n        this.tableBrush.removeClass('_active');\r\n        this.dataPointBrush.removeClass('_active');\r\n        $('._label-brush').removeClass('_active');\r\n        $('._label-brush-range').remove();\r\n        $('#source_data_files_sidebar ._ingestion-steps ._back').css('display', '');\r\n        this.resetBrushes();\r\n        // Reset label brush ranges buttons.\r\n        $('._label-brush-range').removeClass('_active');\r\n        $('._label-brush-range').attr('data-active', false);\r\n        sourceDataEditTableCell.resetGridBorders();\r\n        $('#source_data_files_pre_ingestion ._table').hide();\r\n    }\r\n\r\n    resetBrushes() {\r\n        this.table.removeClass('_brush-cursor');\r\n        this.table.removeClass('_brush-cursor-for-labels');\r\n        $('.brush-section ._brush').removeClass('_active');\r\n        $('.brush-section ._table').removeClass('_active');\r\n    }\r\n\r\n    onFreezeCol(selection) {\r\n        if (selection.isSingleCell) {\r\n            sourceDataFiles.flexGrid.frozenColumns = selection._col;\r\n        }\r\n    }\r\n\r\n    onFreezeRow(selection) {\r\n        if (selection.isSingleCell) {\r\n            sourceDataFiles.flexGrid.frozenRows = selection._row;\r\n        }\r\n    }\r\n\r\n    setGlobalRangeToLabels(globalRange, dimension) {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const table = sourceDataFiles.flexGrid.itemsSource;\r\n\r\n        for (let row = 0; row < table.length; row++) {\r\n            for (let col = 0; col < table[row].length; col++) {\r\n                const cellType = get(file.cellProperties, `[${col}][${row}]['cellType']`, false);\r\n                if (cellType === 'label') {\r\n                    const dimensions = get(file.cellProperties, `[${col}][${row}]['labelDimension']`, false);\r\n                    if (dimensions[0] === dimension) {\r\n                        file.cellProperties[col][row]['range'] = globalRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getGlobalRange() {\r\n        let globalRange;\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const table = sourceDataFiles.flexGrid.itemsSource;\r\n        let leftCol = table[0].length;\r\n        let leftRow = table.length;\r\n        let rightCol = 0;\r\n        let rightRow = 0;\r\n\r\n        for (let row = 0; row < table.length; row++) {\r\n            for (let col = 0; col < table[row].length; col++) {\r\n                const cellType = get(file.cellProperties, `[${col}][${row}]['cellType']`, false);\r\n                if (cellType === 'data') {\r\n                    if (leftCol > col) {\r\n                        leftCol = col;\r\n                    }\r\n                    if (leftRow > row) {\r\n                        leftRow = row;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let row = table.length - 1; row >= 0; row--) {\r\n            for (let col = table[row].length - 1; col >= 0; col--) {\r\n                const cellType = get(file.cellProperties, `[${col}][${row}]['cellType']`, false);\r\n                if (cellType === 'data') {\r\n                    if (rightCol < col) {\r\n                        rightCol = col;\r\n                    }\r\n                    if (rightRow < row) {\r\n                        rightRow = row;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        globalRange = XLSX.utils.encode_range({ r: leftRow, c: leftCol }, { r: rightRow, c: rightCol });\r\n\r\n        return globalRange;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param selection {wijmo.grid.CellRange}\r\n     */\r\n    onDataPointBrushEnd(selection) {\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n\r\n        for (let row = selection.topRow; row <= selection.bottomRow; row++) {\r\n            for (let col = selection.leftCol; col <= selection.rightCol; col++) {\r\n                const properties = sourceFile.getSingleCellProperties(row, col);\r\n\r\n                // Skip empty cells.\r\n                const val = sourceFile.getCellValue(row, col);\r\n                if (val === '') {\r\n                    continue;\r\n                }\r\n\r\n                properties.cellType = 'data';\r\n                properties.value = val;\r\n            }\r\n        }\r\n\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param selection {wijmo.grid.CellRange}\r\n     */\r\n    onNotUsedBrushEnd(selection) {\r\n        for (let row = selection.topRow; row <= selection.bottomRow; row++) {\r\n            for (let col = selection.leftCol; col <= selection.rightCol; col++) {\r\n                const properties = sourceFilesService.getCurrentSourceFile().getSingleCellProperties(row, col);\r\n\r\n                properties.cellType = 'notUsed';\r\n            }\r\n        }\r\n\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param selection {wijmo.grid.CellRange}\r\n     */\r\n    onTableBrushEnd(selection) {\r\n        let detect = new FileWorkflowAutoDetectTable();\r\n        detect.autoDetectTable(selection);\r\n\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    onLabelBrushEnd(selection, dimension) {\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n\r\n        for (let row = selection.topRow; row <= selection.bottomRow; row++) {\r\n            for (let col = selection.leftCol; col <= selection.rightCol; col++) {\r\n                const properties = sourceFile.getSingleCellProperties(row, col);\r\n\r\n                // Skip cells that are not labels.\r\n                if (properties.cellType !== 'label') {\r\n                    continue;\r\n                }\r\n\r\n                // Skip empty cells.\r\n                const val = sourceFile.getCellValue(row, col);\r\n                if (!val) {\r\n                    continue;\r\n                }\r\n\r\n                properties.labelDimension = [dimension];\r\n                sourceFilesService.applyDimensions(properties, sourceDataFilesSidebar.columnDefs);\r\n                const range = get(properties, `['range']`, false);\r\n                if (range) {\r\n                    this.updateAppliedLabelWarning(range, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    updateAppliedLabelWarning(range, onlyCheckCellsWithWarning = false) {\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n        const rangeObject = XLSX.utils.decode_range(range);\r\n\r\n        // Apply new value to each cell in range.\r\n        for (let row = rangeObject.s.r; row <= rangeObject.e.r; row++) {\r\n            for (let col = rangeObject.s.c; col <= rangeObject.e.c; col++) {\r\n                const properties = sourceFile.getSingleCellProperties(row, col);\r\n\r\n                // Skip cells without a warning.\r\n                if (onlyCheckCellsWithWarning && !properties.appliedLabelWarning) {\r\n                    // continue;\r\n                }\r\n\r\n                properties.appliedLabelWarning = sourceDataEditTableCell.setAppliedLabelWarning(col, row, properties);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { sourceDataFiles } from '../SourceDataFiles';\r\nimport { addFileSteps } from './AddFileSteps';\r\nimport { sourceDataFilesSidebar } from './SourceDataFilesSidebar';\r\n\r\nexport class FileWorkflowStep2 {\r\n    /**\r\n     * @param rootElement\r\n     * @param fileWorkflow {FileWorkflow}\r\n     */\r\n    constructor(rootElement, fileWorkflow) {\r\n        this.rootElement = rootElement;\r\n        this.fileWorkflow = fileWorkflow;\r\n\r\n        // DOM\r\n        this.dataStructureSection = this.rootElement.find('.data-structures-section');\r\n        this.addRelationship = this.dataStructureSection.find('._add-relationship');\r\n        this.addRelationshipContainer = this.dataStructureSection.find('._add-relationship-container');\r\n        this.save = this.addRelationshipContainer.find('._save');\r\n        this.cancel = this.addRelationshipContainer.find('._cancel');\r\n\r\n        // Events\r\n        this.addRelationship.on('click', () => {\r\n            this.addRelationship.prop('disabled', true);\r\n            this.addRelationshipContainer.show();\r\n            this.fileWorkflow.enableStructure();\r\n        });\r\n        this.save.on('click', () => {\r\n            const cells = this.fileWorkflow.selectedStructureCells;\r\n            const file = sourceFilesService.getCurrentSourceFile();\r\n            let parentValue = null;\r\n            let parentProperties = null;\r\n\r\n            cells.forEach((cell, index) => {\r\n                const cellValue = file.getCellValue(cell.row, cell.col);\r\n                const cellProperties = file.getSingleCellProperties(cell.row, cell.col);\r\n\r\n                // First cell is always the parent.\r\n                if (index === 0) {\r\n                    parentValue = cellValue;\r\n                    parentProperties = cellProperties;\r\n                } else {\r\n                    // Get the dimension that differs.\r\n                    const dimensions = [];\r\n                    file.formDimensions.forEach(dimension => {\r\n                        let cellValue = cellProperties[dimension];\r\n                        let parentValue = parentProperties[dimension];\r\n\r\n                        // Consider undefined values as empty string.\r\n                        cellValue = typeof cellValue === 'undefined' ? '' : cellValue;\r\n                        parentValue = typeof parentValue === 'undefined' ? '' : parentValue;\r\n\r\n                        if (cellValue !== parentValue) {\r\n                            dimensions.push(dimension);\r\n                        }\r\n                    });\r\n\r\n                    if (dimensions.length === 1) {\r\n                        const dimension = dimensions[0];\r\n                        const ds = addFileSteps.project.addDataStructure(\r\n                            dimension,\r\n                            cellProperties[dimension],\r\n                            parentProperties[dimension]\r\n                        );\r\n                        ds.changed = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            sourceDataFilesSidebar.sourceDataStructures.sync();\r\n            storageService.saveCurrentProject();\r\n            storageService.syncViews();\r\n\r\n            this.cancel.trigger('click');\r\n        });\r\n        this.cancel.on('click', () => {\r\n            this.addRelationship.prop('disabled', false);\r\n            this.addRelationshipContainer.hide();\r\n            this.fileWorkflow.enableModal();\r\n        });\r\n    }\r\n\r\n    sync() {}\r\n\r\n    show() {\r\n        this.dataStructureSection.show();\r\n        $('#source_data_files_pre_ingestion ._table').css('display', '');\r\n        sourceDataFiles.flexGrid.refresh();\r\n    }\r\n\r\n    hide() {\r\n        this.cancel.trigger('click');\r\n        this.dataStructureSection.hide();\r\n        $('#source_data_files_pre_ingestion ._table').hide();\r\n    }\r\n}\r\n","import { difference, remove, union } from 'lodash';\r\nimport { common } from '../../../Common';\r\nimport { keyboardService } from '../../../services/KeyboardService';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\n\r\nexport class FileWorkflowStep3 {\r\n    /**\r\n     * @param rootElement\r\n     * @param fileWorkflow {FileWorkflow}\r\n     */\r\n    constructor(rootElement, fileWorkflow) {\r\n        this.rootElement = rootElement;\r\n        this.fileWorkflow = fileWorkflow;\r\n        this.dataStructures = [];\r\n        this.inputsValues = {};\r\n        this.lastSelectedItem = null;\r\n\r\n        const globalMappingContainer = this.rootElement.find('._add-file-global-mapping ._mapping-select-dimension');\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            this.dimensionSelect = new wijmo.input.ComboBox(globalMappingContainer[0], {\r\n                placeholder: 'Select Dimension',\r\n                itemsSource: [],\r\n                displayMemberPath: 'label',\r\n                onSelectedIndexChanged: () => {\r\n                    this.changeDimension();\r\n                }\r\n            });\r\n        const selectDictionaryContainer = this.rootElement.find('._add-file-global-mapping ._select-dictionary');\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            this.selectDictionary = new wijmo.input.ComboBox(selectDictionaryContainer[0], {\r\n                placeholder: 'Select Dictionary',\r\n                itemsSource: [],\r\n                onSelectedIndexChanged: () => {\r\n                    this.changeDictionary();\r\n                }\r\n            });\r\n        // DOM\r\n\r\n        // Events\r\n        $('._add-file-global-mapping').on('click', e => {\r\n            if (!keyboardService.ctrlDown && !keyboardService.shiftDown) {\r\n                $('._values-left ._mapping-value').removeClass('_active');\r\n            }\r\n        });\r\n\r\n        $('._add-file-global-mapping').on('click', '._values-left ._mapping-value', e => {\r\n            const item = $(e.currentTarget);\r\n\r\n            let multipleSelection = false;\r\n            let addClass = true;\r\n            if (item.hasClass('_active')) {\r\n                addClass = false;\r\n            }\r\n\r\n            // Deselect other cards if shift/ctrl is not pressed.\r\n            if (!keyboardService.ctrlDown && !keyboardService.shiftDown) {\r\n                if ($('._values-left ._mapping-value._active').length > 1) {\r\n                    multipleSelection = true;\r\n                }\r\n\r\n                $('._values-left ._mapping-value').removeClass('_active');\r\n            }\r\n\r\n            // If shift if pressed, select all items between the previous and the current one.\r\n            if (keyboardService.shiftDown) {\r\n                const index1 = this.lastSelectedItem.index();\r\n                const index2 = item.index();\r\n                const indexMin = Math.min(index1, index2);\r\n                const indexMax = Math.max(index1, index2);\r\n                const parent = item.parent();\r\n\r\n                for (let i = indexMin; i <= indexMax; i++) {\r\n                    parent\r\n                        .children()\r\n                        .eq(i)\r\n                        .addClass('_active');\r\n                }\r\n            } else {\r\n                if (addClass || multipleSelection) {\r\n                    item.addClass('_active');\r\n                } else {\r\n                    item.removeClass('_active');\r\n                }\r\n            }\r\n\r\n            // Remember the last selected item.\r\n            this.lastSelectedItem = item;\r\n\r\n            e.stopPropagation();\r\n        });\r\n    }\r\n\r\n    sync() {}\r\n\r\n    show() {\r\n        $('._add-file-global-mapping').css('display', 'flex');\r\n        setTimeout(() => {\r\n            $('#source_data_files_pre_ingestion ._table').hide();\r\n        }, 20);\r\n        const project = storageService.getCurrentProject();\r\n        let dimensions = project.getDimensions();\r\n        dimensions = dimensions.filter(dimension => {\r\n            return dimension.hasGlobalTerms;\r\n        });\r\n\r\n        if (!this.dimensionSelect.itemsSource.length) {\r\n            this.dimensionSelect.itemsSource = dimensions;\r\n        }\r\n\r\n        this.changeDimension();\r\n        $('._values-left ._mapping-value').removeClass('_active');\r\n    }\r\n\r\n    hide() {\r\n        $('._add-file-global-mapping').css('display', 'none');\r\n\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n        if (sourceFile) {\r\n            sourceFile.globalMappingStructures = this.dataStructures;\r\n        }\r\n        storageService.saveCurrentProject();\r\n\r\n        $('._values-left ._mapping-value').removeClass('_active');\r\n    }\r\n\r\n    changeDimension() {\r\n        // Clear values.\r\n        $('._add-file-global-mapping ._values-left ._mapping-value').remove();\r\n\r\n        const slug = this.dimensionSelect.selectedItem.slug;\r\n        if (!this.inputsValues[slug]) {\r\n            this.inputsValues[slug] = {};\r\n        }\r\n        const dataStructuresForDimension = storageService.getCurrentProject().getDataStructuresForDimension(slug);\r\n\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const cellProperties = file.cellProperties;\r\n        let values = [];\r\n        Object.keys(cellProperties).forEach(col => {\r\n            Object.keys(cellProperties[col]).forEach(row => {\r\n                const cell = cellProperties[col][row];\r\n                if (cell.cellType === 'data') {\r\n                    if (cell.hasOwnProperty(slug)) {\r\n                        if (values.length) {\r\n                            values = union([], values, [cell[slug]]);\r\n                        } else {\r\n                            values = union([], [cell[slug]]);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        values.map(value => {\r\n            if (!dataStructuresForDimension.hasOwnProperty(value) || !dataStructuresForDimension[value].globalTerm) {\r\n                if (!this.inputsValues[slug].hasOwnProperty(value) || this.inputsValues[slug][value].length === 0) {\r\n                    this.rootElement.find('._values-left').append('<div class=\"_mapping-value\">' + value + '</div>');\r\n                }\r\n            } else {\r\n                if (this.inputsValues[slug][value]) {\r\n                    this.inputsValues[slug][value] = union([], this.inputsValues[slug][value], [\r\n                        dataStructuresForDimension[value].globalTerm\r\n                    ]);\r\n                } else {\r\n                    this.inputsValues[slug][value] = union([], [dataStructuresForDimension[value].globalTerm]);\r\n                }\r\n            }\r\n        });\r\n\r\n        Sortable.create(this.rootElement.find('._values-left')[0], {\r\n            group: {\r\n                name: 'dimension-value',\r\n                put: ['map-global-terms']\r\n            }\r\n        });\r\n\r\n        this.selectDictionary.itemsSource = this.dimensionSelect.selectedItem.getDictionaries();\r\n        this.selectDictionary.refresh();\r\n    }\r\n\r\n    changeDictionary() {\r\n        // Clear values.\r\n        $('._add-file-global-mapping ._global-term-from-dictionary').remove();\r\n\r\n        // Create Global terms containers.\r\n        const dictionary = this.selectDictionary.selectedItem;\r\n        const globalTerms = common.getGlobalTermsByDictionary(dictionary);\r\n        globalTerms.map(term => {\r\n            const divTitle = '<div class=\"_term-title\">' + term + '</div>';\r\n            const divSortable = '<div class=\"_global-term-from-dictionary-sortable\"></div>';\r\n            const div =\r\n                '<div class=\"_global-term-from-dictionary\" data-term=\"' +\r\n                term +\r\n                '\">' +\r\n                divTitle +\r\n                divSortable +\r\n                '</div>';\r\n            this.rootElement.find('._global-terms-from-dictionary').append(div);\r\n            const el = this.rootElement.find($('._global-term-from-dictionary[data-term=\"' + term + '\"]'))[0];\r\n\r\n            Sortable.create(el, {\r\n                group: {\r\n                    name: 'map-global-terms',\r\n                    put: 'dimension-value'\r\n                },\r\n                filter: '._term-title',\r\n                onAdd: e => {\r\n                    $(e.item).removeClass('_active');\r\n                    const slug = this.dimensionSelect.selectedItem.slug;\r\n                    const value = $(e.item).text();\r\n                    const dataStructure = {\r\n                        dimension: slug,\r\n                        value: value,\r\n                        globalTerm: term\r\n                    };\r\n                    this.dataStructures.push(dataStructure);\r\n\r\n                    if (this.inputsValues[slug][value]) {\r\n                        this.inputsValues[slug][value] = union([], this.inputsValues[slug][value], [term]);\r\n                    } else {\r\n                        this.inputsValues[slug][value] = union([], [term]);\r\n                    }\r\n\r\n                    // Handle moving multiple mapping-values.\r\n                    $('._values-left ._mapping-value').each((index, el) => {\r\n                        if ($(el).hasClass('_active')) {\r\n                            const value = $(el).text();\r\n                            const dataStructure = {\r\n                                dimension: slug,\r\n                                value: value,\r\n                                globalTerm: term\r\n                            };\r\n                            this.dataStructures.push(dataStructure);\r\n\r\n                            if (this.inputsValues[slug][value]) {\r\n                                this.inputsValues[slug][value] = union([], this.inputsValues[slug][value], [term]);\r\n                            } else {\r\n                                this.inputsValues[slug][value] = union([], [term]);\r\n                            }\r\n\r\n                            $(e.to).append('<div class=\"_mapping-value\">' + value + '</div>');\r\n                            $(el).remove();\r\n                        }\r\n                    });\r\n                },\r\n                onRemove: e => {\r\n                    const slug = this.dimensionSelect.selectedItem.slug;\r\n                    const value = $(e.item).text();\r\n                    const dataStructure = {\r\n                        dimension: slug,\r\n                        value: $(e.item).text(),\r\n                        globalTerm: term\r\n                    };\r\n                    remove(this.dataStructures, el => {\r\n                        return (\r\n                            dataStructure.dimension === el.dimension &&\r\n                            dataStructure.value === el.value &&\r\n                            dataStructure.globalTerm === el.globalTerm\r\n                        );\r\n                    });\r\n\r\n                    this.inputsValues[slug][value] = difference(this.inputsValues[slug][value], [term]);\r\n                }\r\n            });\r\n        });\r\n\r\n        // Add specific dimension values to each Global term container.\r\n        const slug = this.dimensionSelect.selectedItem.slug;\r\n        const dimensionVals = this.inputsValues[slug];\r\n        Object.keys(dimensionVals).forEach(attr => {\r\n            const globalTerms = dimensionVals[attr];\r\n            const termHtml = $('._global-term-from-dictionary ._term-title').filter(function() {\r\n                return $.inArray($(this).text(), globalTerms) !== -1;\r\n            });\r\n\r\n            // Used to remove from the left when val is associated to a global term and add it to the right.\r\n            const valExists = this.rootElement.find('._values-left ._mapping-value').filter(function() {\r\n                return $(this).text() === attr;\r\n            });\r\n\r\n            if (termHtml.length) {\r\n                termHtml.after('<div class=\"_mapping-value\">' + attr + '</div>');\r\n                valExists.remove();\r\n            } else {\r\n                if (!valExists.length) {\r\n                    this.rootElement.find('._values-left').append('<div class=\"_mapping-value\">' + attr + '</div>');\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","export class FileWorkflowStep4 {\r\n    /**\r\n     * @param rootElement\r\n     * @param fileWorkflow {FileWorkflow}\r\n     */\r\n    constructor(rootElement, fileWorkflow) {\r\n        this.rootElement = rootElement;\r\n        this.fileWorkflow = fileWorkflow;\r\n\r\n        // DOM\r\n\r\n        // Events\r\n    }\r\n\r\n    sync() {\r\n    }\r\n\r\n    show() {\r\n        $('#source_data_files_pre_ingestion ._review-table').css('display', '');\r\n        $('#source_data_files_pre_ingestion ._table').hide();\r\n    }\r\n\r\n    hide() {\r\n        $('#source_data_files_pre_ingestion ._review-table').hide();\r\n    }\r\n}","import get from 'lodash/get';\r\nimport { common } from '../../../Common';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { addFileSteps } from '../../../tabs/source-data/add-file-workflow/AddFileSteps';\r\nimport { sourceDataFilesSidebar } from '../../../tabs/source-data/add-file-workflow/SourceDataFilesSidebar';\r\nimport { sourceDataTableCellModal } from '../../../tabs/source-data/add-file-workflow/SourceDataTableCellModal';\r\nimport { sourceDataFiles } from '../../../tabs/source-data/SourceDataFiles';\r\n\r\nclass SourceDataEditTableCell {\r\n    constructor() {\r\n        this.newCellIsBeingEdited = false;\r\n    }\r\n\r\n    init() {\r\n        sourceDataTableCellModal.init();\r\n        this.firstCellAutomaticSelectionFinished = false;\r\n\r\n        $('#tableCellModal .modal-footer ._close').on('click', e => {\r\n            $('#tableCellModal').modal('hide');\r\n\r\n            this.resetGridBorders();\r\n        });\r\n\r\n        $('#tableCellModal ._apply-and-next').on('click', e => this.applyAndNext(e));\r\n    }\r\n\r\n    sync() {\r\n        sourceDataTableCellModal.sync();\r\n    }\r\n\r\n    resetGridBorders() {\r\n        // Reset borders after highlighting a range.\r\n        $('.wj-cell').css('border-right', '1px solid #d4d4d4');\r\n        $('.wj-cell').css('border-bottom', '1px solid #d4d4d4');\r\n        $('.wj-cell').css('border-top', 'initial');\r\n        $('.wj-cell').css('border-left', 'initial');\r\n    }\r\n\r\n    applyAndNext(e) {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const tableSource = _.concat([], file.itemsSource);\r\n        const fileCellProperties = file.cellProperties;\r\n        const sel = sourceDataFiles.flexGrid.selection;\r\n\r\n        this.saveProperties(e);\r\n\r\n        addFileSteps.fileWorkflow.enableModal();\r\n\r\n        if (sel.isSingleCell) {\r\n            let col = sel._col;\r\n            let nextCol = col + 1;\r\n            let row = sel._row;\r\n            let newSelection = false;\r\n\r\n            const columnsNumber = tableSource[0].length;\r\n            const rowsNumber = tableSource.length;\r\n\r\n            if (col < columnsNumber) {\r\n                const cellProperties = get(fileCellProperties, `[${nextCol}][${row}]`);\r\n                if (cellProperties && cellProperties.cellType === 'data') {\r\n                    sourceDataFiles.flexGrid.select(new wijmo.grid.CellRange(row, nextCol, row, nextCol), true);\r\n                } else {\r\n                    while (nextCol < columnsNumber) {\r\n                        nextCol++;\r\n                        const cellProperties = get(fileCellProperties, `[${nextCol}][${row}]`);\r\n                        if (cellProperties && cellProperties.cellType === 'data') {\r\n                            sourceDataFiles.flexGrid.select(new wijmo.grid.CellRange(row, nextCol, row, nextCol), true);\r\n                            newSelection = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (!newSelection) {\r\n                        let nextRow = row + 1;\r\n                        while (nextRow <= rowsNumber) {\r\n                            nextCol = 0;\r\n                            while (nextCol < columnsNumber) {\r\n                                const cellProperties = get(fileCellProperties, `[${nextCol}][${nextRow}]`);\r\n                                if (cellProperties && cellProperties.cellType === 'data') {\r\n                                    sourceDataFiles.flexGrid.select(\r\n                                        new wijmo.grid.CellRange(nextRow, nextCol, nextRow, nextCol),\r\n                                        true\r\n                                    );\r\n                                    newSelection = true;\r\n                                    break;\r\n                                }\r\n                                nextCol++;\r\n                            }\r\n                            if (newSelection) {\r\n                                break;\r\n                            }\r\n\r\n                            nextRow++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            let newSelection = true;\r\n            if (sel.leftCol < sel.rightCol && sel.topRow === sel.bottomRow) {\r\n                const nextRow = sel.topRow + 1;\r\n\r\n                for (let i = sel.leftCol; i <= sel.rightCol; i++) {\r\n                    const cellProperties = get(fileCellProperties, `[${i}][${nextRow}]`);\r\n                    if (!cellProperties || cellProperties.cellType !== 'data') {\r\n                        newSelection = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (newSelection) {\r\n                    sourceDataFiles.flexGrid.select(\r\n                        new wijmo.grid.CellRange(nextRow, sel.rightCol, nextRow, sel.leftCol),\r\n                        true\r\n                    );\r\n                }\r\n            } else if (sel.topRow < sel.bottomRow && sel.leftCol === sel.rightCol) {\r\n                const nextCol = sel.leftCol + 1;\r\n\r\n                for (let i = sel.topRow; i <= sel.bottomRow; i++) {\r\n                    const cellProperties = get(fileCellProperties, `[${nextCol}][${i}]`);\r\n                    if (!cellProperties || cellProperties.cellType !== 'data') {\r\n                        newSelection = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (newSelection) {\r\n                    sourceDataFiles.flexGrid.select(\r\n                        new wijmo.grid.CellRange(sel.bottomRow, nextCol, sel.topRow, nextCol),\r\n                        true\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onTableSelectionChanged(s, e) {\r\n        this.resetGridBorders();\r\n\r\n        if (addFileSteps.ingestionStep === addFileSteps.STRUCTURE_DATA_STEP) {\r\n            return;\r\n        }\r\n\r\n        this.newCellIsBeingEdited = true;\r\n\r\n        if (!sourceDataFiles.flexGrid.itemsSource) {\r\n            return;\r\n        }\r\n\r\n        const activeCell = $(e._p._activeCell);\r\n\r\n        if (!$('#tableCellModal.modal.in').length) {\r\n            $('#tableCellModal .modal-dialog').css({\r\n                top: 0,\r\n                left: 0\r\n            });\r\n        }\r\n        $('#tableCellModal').modal({\r\n            backdrop: false,\r\n            show: true\r\n        });\r\n\r\n        $('#tableCellModal .modal-dialog').draggable({\r\n            handle: '.modal-header'\r\n        });\r\n        $('#tableCellModal .modal-dialog').css('margin', 0);\r\n        $('.modal-backdrop').css('background', 'transparent');\r\n\r\n        $('#tableCellModal .modal-body').data('cell_type', 'notUsed');\r\n\r\n        // Display modal content.\r\n        if (sourceDataFiles.flexGrid.selection.isSingleCell) {\r\n            $('#tableCellModal ._label-properties ._range-picker input').prop('readonly', false);\r\n            sourceDataTableCellModal.displayContentForCellModal(activeCell);\r\n        } else {\r\n            $('#tableCellModal ._label-properties ._range-picker input').prop('readonly', true);\r\n            sourceDataTableCellModal.displayContentForCellsModal();\r\n        }\r\n\r\n        // Position modal content.\r\n        {\r\n            const modalHeight = $('#tableCellModal .modal-content').height();\r\n            const modalWidth = $('#tableCellModal .modal-content').width();\r\n            const windowHeight = $(window).height();\r\n            const windowWidth = $(window).width();\r\n            const offset = activeCell.offset();\r\n            const lineRangeOffset = $('#tableCellModal .modal-dialog').data('line_range') ? 30 : 0;\r\n            $('#tableCellModal .modal-dialog').data('line_range', false);\r\n\r\n            // When selecting a range larger than the screen, offset is not always available.\r\n            if (offset) {\r\n                if (windowHeight - offset.top > modalHeight) {\r\n                    $('#tableCellModal .modal-dialog').css('top', offset.top + lineRangeOffset);\r\n                } else {\r\n                    if (offset.top - modalHeight > 150) {\r\n                        $('#tableCellModal .modal-dialog').css('top', offset.top - modalHeight + lineRangeOffset);\r\n                    } else {\r\n                        $('#tableCellModal .modal-dialog').css(\r\n                            'top',\r\n                            windowHeight - modalHeight - 10 + lineRangeOffset\r\n                        );\r\n                    }\r\n                }\r\n\r\n                if (windowWidth - offset.left > 390 + modalWidth) {\r\n                    $('#tableCellModal .modal-dialog').css('left', offset.left + activeCell.width() + 10);\r\n                } else {\r\n                    $('#tableCellModal .modal-dialog').css('left', offset.left - modalWidth - 10);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    saveProperties(e) {\r\n        // We're saving the data, so no more unsaved changes!\r\n        sourceDataTableCellModal.hasUnsavedChanges = false;\r\n\r\n        e.preventDefault();\r\n        $('#tableCellModal ._fields input').blur();\r\n\r\n        const cellType = $('#tableCellModal input[name=data-label-switch]:checked').val();\r\n        let commonProperties = {};\r\n        commonProperties.labelDimension = [];\r\n        commonProperties.overwriteValue = [];\r\n\r\n        // Copy properties depending on cell-type.\r\n        switch (cellType) {\r\n            case 'label':\r\n                $('#tableCellModal ._label-properties ._dimension-picker-container').each(function() {\r\n                    const overwriteValue = $(this)\r\n                        .find('._overwrite-value input')\r\n                        .val();\r\n                    const labelDimension = $(this)\r\n                        .find('._dimension-picker input')\r\n                        .val();\r\n                    if (overwriteValue !== 'Multiple values') {\r\n                        commonProperties.overwriteValue.push(overwriteValue);\r\n                    }\r\n                    if (labelDimension !== 'Multiple values') {\r\n                        commonProperties.labelDimension.push(labelDimension);\r\n                    }\r\n                });\r\n\r\n                let range = sourceDataTableCellModal.rangeInput.text;\r\n                if (range && !this.isRangeValid(range)) {\r\n                    alert('Invalid range entered!');\r\n                    range = '';\r\n                }\r\n\r\n                sourceDataTableCellModal.setCommonProperty(commonProperties, 'range', range);\r\n                break;\r\n\r\n            case 'data':\r\n                commonProperties.dataPointId = 'initial';\r\n                commonProperties.failedSaving = false;\r\n\r\n                sourceDataTableCellModal.modalInputs.map(input => {\r\n                    sourceDataTableCellModal.setCommonProperty(\r\n                        commonProperties,\r\n                        input._kosmosField,\r\n                        $(input._elRef).val()\r\n                    );\r\n                });\r\n                break;\r\n        }\r\n\r\n        let sel = sourceDataFiles.flexGrid.selection;\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        for (let col = sel.leftCol; col <= sel.rightCol; col++) {\r\n            for (let row = sel.topRow; row <= sel.bottomRow; row++) {\r\n                const properties = file.getSingleCellProperties(row, col);\r\n                const val = sourceDataFiles.flexGrid.cells.getCellData(row, col, false);\r\n\r\n                // Skip empty cells and cells of different types.\r\n                if (val === '' || properties.cellType !== cellType) {\r\n                    continue;\r\n                }\r\n\r\n                // Overwrite cell properties.\r\n                Object.assign(properties, commonProperties);\r\n                properties.value = val;\r\n\r\n                // Set applied label warning.\r\n                properties.appliedLabelWarning = this.setAppliedLabelWarning(col, row, properties);\r\n\r\n                // Apply range.\r\n                if (cellType === 'label') {\r\n                    sourceFilesService.applyDimensions(properties, sourceDataFilesSidebar.columnDefs);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Close modal and refresh.\r\n        $('#tableCellModal').modal('hide');\r\n        sourceDataFilesSidebar.displayLoadedFileSidebar();\r\n        sourceDataFiles.flexGrid.refresh();\r\n        sourceDataFiles.flexGrid.select(-1, -1);\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n    }\r\n\r\n    setAppliedLabelWarning(c, r, props) {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const table = sourceDataFiles.flexGrid.itemsSource;\r\n        const dimensions = sourceDataFilesSidebar.columnDefs;\r\n        let warning = false;\r\n\r\n        table_loop: {\r\n            for (let row = 0; row < table.length; row++) {\r\n                for (let col = 0; col < table[row].length; col++) {\r\n                    const cellType = get(file.cellProperties, `[${col}][${row}]['cellType']`, false);\r\n\r\n                    if (cellType !== 'label') {\r\n                        continue;\r\n                    }\r\n\r\n                    const range = get(file.cellProperties, `[${col}][${row}]['range']`, false);\r\n                    const dimension = get(file.cellProperties, `[${col}][${row}]['labelDimension']`, false);\r\n\r\n                    if (!(range && dimension[0])) {\r\n                        continue;\r\n                    }\r\n\r\n                    const rangeObject = XLSX.utils.decode_range(range);\r\n\r\n                    if (\r\n                        !(c >= rangeObject.s.c && c <= rangeObject.e.c && r >= rangeObject.s.r && r <= rangeObject.e.r)\r\n                    ) {\r\n                        continue;\r\n                    }\r\n\r\n                    const cellProperties = file.getSingleCellProperties(row, col);\r\n                    const selectedDimension = dimensions.find(column => {\r\n                        return column.label === dimension[0];\r\n                    });\r\n                    const slug = selectedDimension.slug;\r\n\r\n                    if (!common.areIdentical(props[slug], cellProperties.value)) {\r\n                        warning = true;\r\n\r\n                        break table_loop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return warning;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given range is valid.\r\n     *\r\n     * @param range\r\n     * @returns {boolean} True if the range is valid, false otherwise.\r\n     */\r\n    isRangeValid(range) {\r\n        const rangeSeparatorIndex = range.indexOf(':');\r\n        if (rangeSeparatorIndex === -1) {\r\n            return false;\r\n        }\r\n\r\n        const newRange = XLSX.utils.decode_range(range);\r\n\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n        const fileRowsNumber = sourceFile.getNumberOfRows();\r\n        const fileColsNumber = sourceFile.getNumberOfCols();\r\n\r\n        if (newRange.e.r > fileRowsNumber || newRange.e.c > fileColsNumber) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport const sourceDataEditTableCell = new SourceDataEditTableCell();\r\n","import { cloneDeep } from 'lodash';\r\nimport { common } from '../../../Common';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { sourceDataFilesSidebar } from '../../../tabs/source-data/add-file-workflow/SourceDataFilesSidebar';\r\n\r\nclass SourceDataFilesReviewTable {\r\n    constructor() {\r\n        this.columnDefs = [];\r\n        this.scale = 1;\r\n        this.inUpdatedLayout = false;\r\n    }\r\n\r\n    init() {\r\n        this.flexgrid = new wijmo.grid.FlexGrid($('#source_data_files_pre_ingestion ._review-table')[0], {\r\n            isReadOnly: true,\r\n            selectionMode: 'Row',\r\n            itemsSource: [],\r\n            autoGenerateColumns: false,\r\n            formatItem: (s, e) => {\r\n                if (e.panel === s.cells) {\r\n                    let item = s.rows[e.row].dataItem;\r\n\r\n                    switch (s.columns[e.col].binding) {\r\n                        case 'value':\r\n                            if (e.cell.childNodes[0]) {\r\n                                e.cell.childNodes[0].nodeValue = common.formatNumber(item.value);\r\n                            }\r\n                            break;\r\n\r\n                        case '__normalized_value':\r\n                            e.cell.innerHTML = common.formatNumber(item['__normalized_value'] / this.scale);\r\n                            break;\r\n\r\n                        case 'scale':\r\n                            // e.cell.innerHTML = item.scale;\r\n                            break;\r\n                    }\r\n                }\r\n            },\r\n            updatedLayout: () => {\r\n                if (this.inUpdatedLayout) {\r\n                    this.inUpdatedLayout = false;\r\n                } else {\r\n                    this.inUpdatedLayout = true;\r\n                    this.flexgrid.autoSizeRow(0, true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        // Columns.\r\n        this.columnDefs = this.getAvailableColumns();\r\n        this.updateColumns();\r\n\r\n        // Data points.\r\n        let dataPoints = [];\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        if (file && file.dataPoints) {\r\n            dataPoints = file.dataPoints;\r\n        }\r\n        this.setData(dataPoints);\r\n    }\r\n\r\n    getAvailableColumns() {\r\n        const cols = [];\r\n        const allColumns = sourceDataFilesSidebar.columnDefs;\r\n\r\n        cols.push({\r\n            slug: '__normalized_value',\r\n            label: 'Normalized Value',\r\n            selected: true,\r\n            isReadOnly: true\r\n        });\r\n\r\n        cols.push({\r\n            slug: 'value',\r\n            label: 'Value',\r\n            selected: true,\r\n            isReadOnly: true\r\n        });\r\n\r\n        allColumns.forEach(column => {\r\n            if (column.selected) {\r\n                cols.push({\r\n                    slug: column.slug,\r\n                    label: column.label,\r\n                    selected: true,\r\n                    isReadOnly: false\r\n                });\r\n            }\r\n        });\r\n\r\n        return cols;\r\n    }\r\n\r\n    updateColumns() {\r\n        this.flexgrid.columns.length = 0;\r\n        this.columnDefs.forEach(column => {\r\n            if (!column.selected) {\r\n                return;\r\n            }\r\n\r\n            // Add column to grid.\r\n            const gridCol = new wijmo.grid.Column();\r\n            gridCol.binding = column.slug;\r\n            gridCol.header = column.label;\r\n            gridCol.dataMap = column.dataMap;\r\n            gridCol.isReadOnly = column.isReadOnly;\r\n            this.flexgrid.columns.push(gridCol);\r\n        });\r\n    }\r\n\r\n    setData(dataset) {\r\n        dataset = cloneDeep(dataset);\r\n\r\n        const project = storageService.getCurrentProject();\r\n        // const sourceFiles = project.sourceFiles;\r\n\r\n        dataset = dataset.map(item => {\r\n            // Normalize values.\r\n            item['__normalized_value'] = item.value * common.parseScale(item.scale) * common.parseInverse(item.inverse);\r\n\r\n            // Process dimensions.\r\n            item = project.addDataStructuresToDataPoint(item);\r\n\r\n            return item;\r\n        });\r\n\r\n        // Update data source.\r\n        this.flexgrid.itemsSource = dataset;\r\n        this.flexgrid.collectionView.refresh();\r\n        this.updateColumns();\r\n    }\r\n}\r\n\r\nexport const sourceDataFilesReviewTable = new SourceDataFilesReviewTable();\r\n","import _ from 'lodash';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { SourceDataStructures } from '../source-data-structures/SourceDataStructures';\r\nimport { sourceData } from '../SourceData';\r\nimport { sourceDataFiles } from '../SourceDataFiles';\r\nimport { sourceDataPointsSidebar } from '../SourceDataPointsSidebar';\r\nimport { addFileSteps } from './AddFileSteps';\r\nimport { FileWorkflowLegend } from './FileWorkflowLegend';\r\nimport { sourceDataEditTableCell } from './SourceDataEditTableCell';\r\nimport { sourceDataFilesReviewTable } from './SourceDataFilesReviewTable';\r\nimport { sourceDataTableCellModal } from './SourceDataTableCellModal';\r\n\r\nclass SourceDataFilesSidebar {\r\n    constructor() {\r\n        this.selectedItem = null;\r\n        this.container = $('#source_data_files_pre_ingestion');\r\n        this.dataStructuresContainer = this.container.find('._data-structures');\r\n        this.sourceDataStructures = new SourceDataStructures(\r\n            this.dataStructuresContainer,\r\n            () => {\r\n                this.sourceDataStructures.sync();\r\n            },\r\n            true,\r\n            true\r\n        );\r\n        this.columnDefs = [];\r\n        this.fileWorkflowLegend = new FileWorkflowLegend($('#source_data_files_sidebar .legend-section ._colors'));\r\n        this.hiddenCols = [];\r\n        this.hiddenRows = [];\r\n    }\r\n\r\n    init() {\r\n        addFileSteps.init();\r\n\r\n        $('#source_data_files_sidebar ._dimensions-section ._column-selector').on('click', () => {\r\n            this.updateDimensionsDropdown();\r\n        });\r\n\r\n        $('#source_data_files_sidebar ._ingestion-steps ._cancel').on('click', () => {\r\n            addFileSteps.cancelWorkflow();\r\n        });\r\n\r\n        this.columnsSelect = new wijmo.input.MultiSelect(\r\n            $('#source_data_files_sidebar ._dimensions-section ._column-selector')[0],\r\n            {\r\n                placeholder: 'Select Columns',\r\n                itemsSource: [],\r\n                headerFormat: '{count} columns selected',\r\n                displayMemberPath: 'label',\r\n                checkedMemberPath: 'selected',\r\n                onCheckedItemsChanged: () => {\r\n                    this.updateDimensions();\r\n                }\r\n            }\r\n        );\r\n        $('#source_data_files_sidebar ._dimensions-section ._add-custom-dimension').on('click', () => {\r\n            sourceDataPointsSidebar.addCustomDimension();\r\n        });\r\n\r\n        $('._hide-cells').on('change', function() {\r\n            if ($(this).is(':checked')) {\r\n                sourceDataFilesSidebar.hideCells();\r\n            } else {\r\n                sourceDataFilesSidebar.showHiddenCells();\r\n            }\r\n        });\r\n\r\n        $('._dimensions-cog, ._range-global-visibility').on('click', e => {\r\n            let $this;\r\n            if ($(e.target).hasClass('_dimensions-cog')) {\r\n                $this = $('._dimensions-section');\r\n                this.toggleClassAndShowHide(e.target);\r\n            } else {\r\n                $this = $('._brush-container');\r\n                this.toggleClassAndShowHide(e.target);\r\n            }\r\n\r\n            const visible = !$this.hasClass('_visible');\r\n            $this.toggleClass('_visible', visible);\r\n        });\r\n\r\n        $(document.body).on('click', '._label-brush-range', e => {\r\n            const cell = $(e.currentTarget);\r\n\r\n            if (cell.attr('data-active') == null || cell.attr('data-active') === 'false') {\r\n                sourceDataEditTableCell.resetGridBorders();\r\n                $('._label-brush-range').attr('data-active', false);\r\n                $('._label-brush-range').removeClass('_active');\r\n\r\n                cell.attr('data-active', true);\r\n                cell.addClass('_active');\r\n                let rangeText = cell.text();\r\n\r\n                if (rangeText) {\r\n                    let ranges = rangeText.split(',');\r\n                    ranges.map(range => {\r\n                        range = range.replace(/\\s/g, '');\r\n                        sourceDataTableCellModal.highlightRangeCells(range);\r\n                    });\r\n                }\r\n            } else {\r\n                $('._label-brush-range').removeClass('_active');\r\n                cell.attr('data-active', false);\r\n                sourceDataEditTableCell.resetGridBorders();\r\n            }\r\n        });\r\n\r\n        sourceDataFilesReviewTable.init();\r\n    }\r\n\r\n    toggleClassAndShowHide(element) {\r\n        const active = !$(element).hasClass('_active');\r\n        $(element).toggleClass('_active', active);\r\n    }\r\n\r\n    showHiddenCells() {\r\n        $('.hide-cells-container').css('background-color', '');\r\n\r\n        const columnNumber = sourceFilesService.getCurrentSourceFile().itemsSource[0].length;\r\n\r\n        this.hiddenRows.map(row => {\r\n            let minHeight = true;\r\n\r\n            for (let col = 0; col < columnNumber; col++) {\r\n                if (sourceDataFiles.flexGrid.getCellData(row, col, true)) {\r\n                    minHeight = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (minHeight) {\r\n                sourceDataFiles.flexGrid.autoSizeRow(row, false, 20);\r\n            } else {\r\n                sourceDataFiles.flexGrid.autoSizeRow(row);\r\n            }\r\n        });\r\n        this.hiddenCols.map(col => sourceDataFiles.flexGrid.autoSizeColumn(col));\r\n    }\r\n\r\n    hideCells() {\r\n        $('.hide-cells-container').css('background-color', '#6e707d');\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const fileCellProperties = file.cellProperties;\r\n        const tableSource = _.concat([], file.itemsSource);\r\n        let hiddenRows = [],\r\n            hiddenCols = [];\r\n\r\n        // Check what rows to hide.\r\n        tableSource.map((row, rowNumber) => {\r\n            let hideRow = true;\r\n\r\n            row.map((cell, colNumber) => {\r\n                if (fileCellProperties.hasOwnProperty(colNumber)) {\r\n                    if (fileCellProperties[colNumber].hasOwnProperty(rowNumber)) {\r\n                        if (\r\n                            fileCellProperties[colNumber][rowNumber].cellType === 'data' ||\r\n                            fileCellProperties[colNumber][rowNumber].cellType === 'label'\r\n                        ) {\r\n                            hideRow = false;\r\n                        } else {\r\n                            delete fileCellProperties[colNumber][rowNumber];\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (hideRow) {\r\n                hiddenRows = _.concat([], hiddenRows, rowNumber);\r\n            }\r\n        });\r\n\r\n        // Check what cols to hide.\r\n        tableSource[0].map((col, colNumber) => {\r\n            let hideCol = true;\r\n\r\n            if (fileCellProperties.hasOwnProperty(colNumber)) {\r\n                const columnArray = fileCellProperties[colNumber];\r\n                Object.keys(columnArray).forEach(key => {\r\n                    if (columnArray[key].cellType === 'data' || columnArray[key].cellType === 'label') {\r\n                        hideCol = false;\r\n                    } else {\r\n                        delete columnArray[key];\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (hideCol) {\r\n                hiddenCols = _.concat([], hiddenCols, colNumber);\r\n            }\r\n        });\r\n        hiddenCols.sort(function(a, b) {\r\n            return b - a;\r\n        });\r\n        this.hiddenCols = hiddenCols;\r\n        this.hiddenRows = hiddenRows;\r\n\r\n        hiddenRows.map(row => (sourceDataFiles.flexGrid.rows[row].height = 0));\r\n        hiddenCols.map(col => (sourceDataFiles.flexGrid.columns[col].width = 0));\r\n    }\r\n\r\n    sync() {\r\n        // Last step table.\r\n        sourceDataFilesReviewTable.sync();\r\n\r\n        this.syncDimensionsColumns();\r\n        this.fileWorkflowLegend.sync(this.columnDefs);\r\n    }\r\n\r\n    syncDimensionsColumns() {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n\r\n        this.columnDefs = this.getAvailableColumns();\r\n        if (file) {\r\n            if (file.formDimensions.length) {\r\n                this.columnDefs.forEach(column => {\r\n                    if (!_.includes(file.formDimensions, column.slug)) {\r\n                        column.selected = false;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        this.columnsSelect.itemsSource = this.columnDefs;\r\n        this.fileWorkflowLegend.sync(this.columnDefs);\r\n        this.updateDimensionsDropdown();\r\n    }\r\n\r\n    getAvailableColumns(manual = false, table = false) {\r\n        const cols = [];\r\n        const project = storageService.getCurrentProject();\r\n        const dimensions = project.getDimensions();\r\n\r\n        if (manual && table) {\r\n            cols.push({\r\n                slug: '__normalized_value',\r\n                label: 'Normalized Value',\r\n                selected: true,\r\n                isReadOnly: true\r\n            });\r\n        }\r\n\r\n        dimensions.forEach(dimension => {\r\n            if (manual) {\r\n                cols.push({\r\n                    slug: dimension.slug,\r\n                    label: dimension.label,\r\n                    selected: true\r\n                });\r\n            } else if (dimension.slug !== 'value') {\r\n                cols.push({\r\n                    slug: dimension.slug,\r\n                    label: dimension.label,\r\n                    selected: true\r\n                });\r\n            }\r\n        });\r\n\r\n        return cols;\r\n    }\r\n\r\n    syncDimensionsContainer() {\r\n        $('#source_data_files_sidebar ._dimensions-section ._add-custom-dimension').prop(\r\n            'disabled',\r\n            addFileSteps.ingestionStep > addFileSteps.DEFINE_DATA_STEP\r\n        );\r\n    }\r\n\r\n    startWorkflow() {\r\n        addFileSteps.setStep(addFileSteps.DEFINE_DATA_STEP);\r\n\r\n        // Copy current project and add new data points into it.\r\n        const project = storageService.getCurrentProject();\r\n        addFileSteps.project = cloneDeep(project);\r\n\r\n        addFileSteps.defineLabelsStep();\r\n\r\n        sourceData.beginWorkflow();\r\n    }\r\n\r\n    displayLoadedFileSidebar() {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n\r\n        this.dataStructuresContainer.css(\r\n            'display',\r\n            addFileSteps.ingestionStep === addFileSteps.STRUCTURE_DATA_STEP ? '' : 'none'\r\n        );\r\n        if ($('.tab-pane.active').find('._sidebar-dimension-selector').length > 0) {\r\n            $('.tab-pane.active ._sidebar-dimension-selector').css(\r\n                'display',\r\n                addFileSteps.ingestionStep === addFileSteps.STRUCTURE_DATA_STEP ? '' : 'none'\r\n            );\r\n        }\r\n\r\n        if (addFileSteps.ingestionStep !== addFileSteps.REVIEW_STEP) {\r\n            $('#source_data_files_pre_ingestion ._review-table').hide();\r\n            $('#source_data_files_pre_ingestion ._table').css('display', '');\r\n        } else {\r\n            $('#source_data_files_pre_ingestion ._review-table').css('display', '');\r\n            $('#source_data_files_pre_ingestion ._table').hide();\r\n\r\n            sourceDataFilesReviewTable.flexgrid.itemsSource = file.dataPoints;\r\n            sourceDataFilesReviewTable.flexgrid.refresh();\r\n        }\r\n\r\n        // Hightlight selected step in ingestion header.\r\n        $('#source_data_files_pre_ingestion ._ingestion-steps-display ._step').removeClass('highlight-step');\r\n        $(\r\n            '#source_data_files_pre_ingestion ._ingestion-steps-display ._step[data-step=' +\r\n                addFileSteps.ingestionStep +\r\n                ']'\r\n        ).addClass('highlight-step');\r\n\r\n        // Prev and next buttons\r\n        $('#source_data_files_sidebar ._ingestion-steps ._next').text(\r\n            addFileSteps.ingestionStep < 4 ? 'Next' : 'Finish'\r\n        );\r\n        switch (addFileSteps.ingestionStep) {\r\n            case 1:\r\n                if ($('.brush-section > h4.hide').length) {\r\n                    $('.brush-section > h4').removeClass('hide');\r\n                }\r\n                break;\r\n        }\r\n\r\n        $('#source_data_files_sidebar').css('display', '');\r\n\r\n        // Refresh FlexGrid.\r\n        window.dispatchEvent(new Event('resize'));\r\n\r\n        this.syncDimensionsContainer();\r\n        this.syncDimensionsColumns();\r\n\r\n        // Display the Brushes list of dimensions.\r\n        $('._label-brush-range').html('');\r\n        const tableSource = sourceDataFiles.flexGrid.itemsSource;\r\n        const dimensions = sourceDataFilesSidebar.columnDefs;\r\n        dimensions.map((dimension, index) => {\r\n            if (dimension.selected) {\r\n                const div = $($('._brush._label-brush')[index]);\r\n                const rangeDiv = $($('._label-brush-range')[index]);\r\n\r\n                // Define range for each dimension.\r\n                addFileSteps.defineRangeForEachDimension(tableSource, rangeDiv, div, file, dimension);\r\n            }\r\n        });\r\n\r\n        $('#source_data_files_sidebar ._zoom-slider-container').css(\r\n            'display',\r\n            addFileSteps.ingestionStep > 2 ? 'none' : 'block'\r\n        );\r\n    }\r\n\r\n    updateDimensions() {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        file.formDimensions = [];\r\n        this.columnDefs.forEach(column => {\r\n            if (column.selected) {\r\n                file.formDimensions = _.concat([], file.formDimensions, column.slug);\r\n            }\r\n        });\r\n        this.fileWorkflowLegend.sync(this.columnDefs);\r\n        // file.formDimensions = _.concat([], this.columnDefs);\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n        sourceDataFiles.flexGrid.refresh();\r\n    }\r\n\r\n    updateDimensionsDropdown() {\r\n        $('.wj-listbox-item input').prop('disabled', addFileSteps.ingestionStep > addFileSteps.DEFINE_DATA_STEP);\r\n        $('.wj-listbox-item label').each(function() {\r\n            if (\r\n                $(this)\r\n                    .text()\r\n                    .replace(/\\s/g, '') === 'Scale'\r\n            ) {\r\n                $(this)\r\n                    .find('input')\r\n                    .prop('disabled', true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const sourceDataFilesSidebar = new SourceDataFilesSidebar();\r\n","import { concat, get, union } from 'lodash';\r\nimport { common } from '../../../Common';\r\nimport { sourceFilesService } from '../../../services/SourceFilesService';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { addFileSteps } from '../../../tabs/source-data/add-file-workflow/AddFileSteps';\r\nimport { sourceDataEditTableCell } from '../../../tabs/source-data/add-file-workflow/SourceDataEditTableCell';\r\nimport { sourceDataFilesSidebar } from '../../../tabs/source-data/add-file-workflow/SourceDataFilesSidebar';\r\nimport { sourceDataFiles } from '../../../tabs/source-data/SourceDataFiles';\r\n\r\nclass SourceDataTableCellModal {\r\n    constructor() {\r\n        this.modalInputs = [];\r\n        this.multipleCellsInputFields = {};\r\n        this.hasUnsavedChanges = false;\r\n        this.labelMultipleDimensions = [];\r\n        this.labelMultipleOverwriteValues = [];\r\n        this.dropdownValue = '';\r\n        this.appliedLabelChangeCounter = 0;\r\n        this.applyButton = '';\r\n        this.previousSelection = 'notUsed';\r\n    }\r\n\r\n    init() {\r\n        const fieldTemplateHtml =\r\n            '<div class=\"_fields _data-properties\"><div class=\"_field\">' +\r\n            '<div class=\"_name\">Value</div><div class=\"_input\"></div></div></div>';\r\n        this.form = $('#tableCellModal .modal-body');\r\n        this.form.append(fieldTemplateHtml);\r\n        this.fieldTemplate = this.form.find('._data-properties ._field');\r\n        const rangeInputHtml = $('#tableCellModal ._label-properties ._range-picker');\r\n\r\n        this.rangeInput = new wijmo.input.AutoComplete(rangeInputHtml[0], {\r\n            isReadOnly: false,\r\n            onGotFocus: e => {\r\n                addFileSteps.fileWorkflow.enableRangePickerMode((fileWorkflow, e) => {\r\n                    const value = XLSX.utils.encode_range({\r\n                        s: { r: e.range.topRow, c: e.range.leftCol },\r\n                        e: { r: e.range.bottomRow, c: e.range.rightCol }\r\n                    });\r\n\r\n                    this.rangeInput._setText(value);\r\n                });\r\n            },\r\n            lostFocus: e => {\r\n                $(sourceDataFiles.flexGrid.hostElement).removeClass('_copy-cursor');\r\n            }\r\n        });\r\n\r\n        // Prevent modal close when clicking on modal dialog.\r\n        $('#tableCellModal > .modal-dialog').on('mousedown', e => {\r\n            e.stopPropagation();\r\n        });\r\n\r\n        // Prevent modal close when clicking on dropdown.\r\n        $('#source_data_files ._table ._modal-container').on('mousedown', '.wj-dropdown-panel', e => {\r\n            e.stopPropagation();\r\n        });\r\n\r\n        // Apply changes button functionality on cell modal.\r\n        $('._save-cell-properties').on('click', e => sourceDataEditTableCell.saveProperties(e));\r\n\r\n        // When showing the modal...\r\n        $('#tableCellModal').on('show.bs.modal', e => {\r\n            this.hasUnsavedChanges = false;\r\n        });\r\n\r\n        // Before hiding the modal...\r\n        $('#tableCellModal').on('hide.bs.modal', e => {\r\n            // Prevent user from losing their changes.\r\n            if (this.hasUnsavedChanges) {\r\n                const userConfirmation = confirm('Are you sure you do not want to save changes before leaving?');\r\n\r\n                if (!userConfirmation) {\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        });\r\n\r\n        $('._add-new-label-rule').on('click', () => this.addNewLabelRule());\r\n\r\n        $(document).on('click', '._dimension-picker-container ._remove-rule', function() {\r\n            $(this)\r\n                .closest('._dimension-picker-container')\r\n                .remove();\r\n        });\r\n\r\n        $('#source_data_files_pre_ingestion ._table').on('keydown', e => {\r\n            if (!$('#tableCellModal').data('bs.modal').isShown || !$('#cellModalSwitchLabel').is(':checked')) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n\r\n            const keycode = e.keyCode ? e.keyCode : e.which;\r\n            if (keycode === 13) {\r\n                sourceDataEditTableCell.saveProperties(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    sync() {}\r\n\r\n    getValuesForDimensionsDropdown() {\r\n        let fields = sourceDataFilesSidebar.columnDefs;\r\n        let dimensions = [];\r\n        for (const key in fields) {\r\n            const field = fields[key];\r\n            if (field.slug === 'value' || !field.selected) {\r\n                continue;\r\n            }\r\n            dimensions.push(field);\r\n        }\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    addNewLabelRule() {\r\n        $('#tableCellModal .modal-body ._label-properties ._add-new-label-rule').before(\r\n            this.generateDimensionPickerContainer()\r\n        );\r\n\r\n        const dimensionsSelector = $('#tableCellModal ._label-properties ._dimension-picker').last();\r\n        const overwriteValueSelector = $('#tableCellModal ._label-properties ._overwrite-value').last();\r\n        new wijmo.input.ComboBox(dimensionsSelector[0], {\r\n            displayMemberPath: 'label',\r\n            selectedValuePath: 'slug',\r\n            isEditable: true,\r\n            itemsSource: this.getValuesForDimensionsDropdown()\r\n        });\r\n        new wijmo.input.InputMask(overwriteValueSelector[0], {\r\n            isRequired: false\r\n        });\r\n    }\r\n\r\n    generateDimensionPickerContainer() {\r\n        let removeButton = '';\r\n        if ($('._dimension-picker-container').length) {\r\n            removeButton = '<div class=\"btn btn-danger _remove-rule\">Remove dimension</div>';\r\n        }\r\n\r\n        return (\r\n            '<div class=\"_dimension-picker-container\">' +\r\n            '<div class=\"_field\"><div class=\"_name\">Overwrite</div><div class=\"_overwrite-value\"></div></div>' +\r\n            '<div class=\"_field\"><div class=\"_name\">Dimension</div><div class=\"_dimension-picker\"></div></div>' +\r\n            removeButton +\r\n            '</div>'\r\n        );\r\n    }\r\n\r\n    generateDimensionsInputContainerForLabelView() {\r\n        const fileCellProperties = sourceFilesService.getCurrentSourceFile().cellProperties;\r\n        this.rangeInput._setText(this.getCommonValueForSelection('range'));\r\n        $('._dimension-picker-container').remove();\r\n        $('#tableCellModal ._label-properties ._add-new-label-rule').css('display', '');\r\n\r\n        if (sourceDataFiles.flexGrid.selection.isSingleCell) {\r\n            const col = sourceDataFiles.flexGrid.selection._col;\r\n            const row = sourceDataFiles.flexGrid.selection._row;\r\n            const dimensions = get(fileCellProperties, `[${col}][${row}]['labelDimension']`);\r\n            if (dimensions && dimensions.length > 1) {\r\n                dimensions.map((dimension, index) => {\r\n                    $('#tableCellModal .modal-body ._label-properties ._add-new-label-rule').before(\r\n                        this.generateDimensionPickerContainer()\r\n                    );\r\n\r\n                    const dimensionsSelector = $('#tableCellModal ._label-properties ._dimension-picker').last();\r\n                    const labelDimensionsInput = new wijmo.input.ComboBox(dimensionsSelector[0], {\r\n                        displayMemberPath: 'label',\r\n                        selectedValuePath: 'slug',\r\n                        isEditable: true,\r\n                        itemsSource: this.getValuesForDimensionsDropdown()\r\n                    });\r\n                    labelDimensionsInput.text = dimension;\r\n\r\n                    const overwriteValueSelector = $('#tableCellModal ._label-properties ._overwrite-value').last();\r\n                    const overwriteValueInput = new wijmo.input.InputMask(overwriteValueSelector[0], {\r\n                        isRequired: false\r\n                    });\r\n                    let overwriteVal = get(fileCellProperties, `[${col}][${row}]['overwriteValue'][${index}]`);\r\n                    overwriteVal = overwriteVal ? overwriteVal : '';\r\n                    overwriteValueInput.rawValue = overwriteVal;\r\n                });\r\n            } else {\r\n                this.createLabelPropertiesContainer(\r\n                    get(fileCellProperties, `[${col}][${row}]['labelDimension'][0]`),\r\n                    get(fileCellProperties, `[${col}][${row}]['overwriteValue'][0]`)\r\n                );\r\n            }\r\n        } else {\r\n            let sel = sourceDataFiles.flexGrid.selection;\r\n            for (let col = sel.leftCol; col <= sel.rightCol; col++) {\r\n                for (let row = sel.topRow; row <= sel.bottomRow; row++) {\r\n                    const dimensions = get(fileCellProperties, `[${col}][${row}]['labelDimension']`);\r\n                    if (dimensions && dimensions.length > 1) {\r\n                        $('#tableCellModal ._label-properties ._add-new-label-rule').css('display', 'none');\r\n\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.createLabelPropertiesContainer();\r\n            const labelDimensionsInput = $('#tableCellModal ._label-properties ._dimension-picker input');\r\n            const overwriteValueInput = $('#tableCellModal ._label-properties ._overwrite-value input');\r\n            if (Array.isArray(this.labelMultipleDimensions)) {\r\n                if (this.labelMultipleDimensions.length > 1) {\r\n                    labelDimensionsInput.val('Multiple values');\r\n                } else if (this.labelMultipleDimensions.length === 1) {\r\n                    labelDimensionsInput.val(this.labelMultipleDimensions[0]);\r\n                } else {\r\n                    labelDimensionsInput.val('');\r\n                }\r\n            }\r\n\r\n            if (Array.isArray(this.labelMultipleOverwriteValues)) {\r\n                if (this.labelMultipleOverwriteValues.length > 1) {\r\n                    overwriteValueInput.val('Multiple values');\r\n                } else if (this.labelMultipleOverwriteValues.length === 1) {\r\n                    overwriteValueInput.val(this.labelMultipleOverwriteValues[0]);\r\n                } else {\r\n                    overwriteValueInput.val('');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    createLabelPropertiesContainer(dimension = '', overwriteVal = '') {\r\n        $('#tableCellModal .modal-body ._label-properties ._add-new-label-rule').before(\r\n            this.generateDimensionPickerContainer()\r\n        );\r\n        const labelDimensionsInput = new wijmo.input.ComboBox(\r\n            $('#tableCellModal ._label-properties ._dimension-picker')[0],\r\n            {\r\n                displayMemberPath: 'label',\r\n                selectedValuePath: 'slug',\r\n                isEditable: true,\r\n                itemsSource: this.getValuesForDimensionsDropdown()\r\n            }\r\n        );\r\n        labelDimensionsInput.text = dimension;\r\n\r\n        overwriteVal = overwriteVal ? overwriteVal : '';\r\n        const overwriteValueInput = new wijmo.input.InputMask(\r\n            $('#tableCellModal ._label-properties ._overwrite-value')[0],\r\n            {\r\n                isRequired: false,\r\n                rawValue: overwriteVal\r\n            }\r\n        );\r\n    }\r\n\r\n    highlightRangeCells(range) {\r\n        const rangeArray = range.split(':');\r\n        const rangeLeft = rangeArray[0].slice(0, rangeArray[0].length);\r\n        const rangeRight = rangeArray[1].slice(0, rangeArray[1].length);\r\n        let row = rangeLeft.replace(/^\\D+/g, '');\r\n        let col = XLSX.utils.decode_col(rangeArray[0].replace(row, ''));\r\n        row = Number(row) - 1;\r\n        let row1 = rangeRight.replace(/^\\D+/g, '');\r\n        let col1 = XLSX.utils.decode_col(rangeArray[1].replace(row1, ''));\r\n        row1 = Number(row1) - 1;\r\n        row = Math.min(row, row1);\r\n        row1 = Math.max(row, row1);\r\n        col = Math.min(col, col1);\r\n        col1 = Math.max(col, col1);\r\n\r\n        if (row === row1) {\r\n            // First cell.\r\n            $(sourceDataFiles.flexGrid.cells.getCellElement(row, col)).css('border-left', '1px solid #5797e9');\r\n\r\n            // Last cell.\r\n            $(sourceDataFiles.flexGrid.cells.getCellElement(row, col1)).css('border-right', '1px solid #5797e9');\r\n\r\n            for (let i = col; i <= col1; i++) {\r\n                const cell = $(sourceDataFiles.flexGrid.cells.getCellElement(row, i));\r\n                cell.css('border-top', '1px solid #5797e9');\r\n                cell.css('border-bottom', '1px solid #5797e9');\r\n            }\r\n\r\n            $('#tableCellModal .modal-dialog').data('line_range', true);\r\n\r\n            return;\r\n        }\r\n\r\n        if (col === col1) {\r\n            // First cell.\r\n            $(sourceDataFiles.flexGrid.cells.getCellElement(row, col)).css('border-top', '1px solid #5797e9');\r\n\r\n            // Last cell.\r\n            $(sourceDataFiles.flexGrid.cells.getCellElement(row1, col)).css('border-bottom', '1px solid #5797e9');\r\n\r\n            for (let i = row; i <= row1; i++) {\r\n                const cell = $(sourceDataFiles.flexGrid.cells.getCellElement(i, col));\r\n                cell.css('border-left', '1px solid #5797e9');\r\n                cell.css('border-right', '1px solid #5797e9');\r\n            }\r\n        } else {\r\n            for (let i = col; i <= col1; i++) {\r\n                const cellTop = $(sourceDataFiles.flexGrid.cells.getCellElement(row, i));\r\n                const cellBottom = $(sourceDataFiles.flexGrid.cells.getCellElement(row1, i));\r\n                cellTop.css('border-top', '1px solid #5797e9');\r\n                cellBottom.css('border-bottom', '1px solid #5797e9');\r\n            }\r\n\r\n            for (let i = row; i <= row1; i++) {\r\n                const cellLeft = $(sourceDataFiles.flexGrid.cells.getCellElement(i, col));\r\n                const cellRight = $(sourceDataFiles.flexGrid.cells.getCellElement(i, col1));\r\n                cellLeft.css('border-left', '1px solid #5797e9');\r\n                cellRight.css('border-right', '1px solid #5797e9');\r\n            }\r\n        }\r\n    }\r\n\r\n    detachSubmitFormButton(prevSelection, newSelection, button, prevBtn) {\r\n        if (this.applyButton) {\r\n            if (this.previousSelection === prevSelection) {\r\n                $('.modal-footer').prepend(this.applyButton[0]);\r\n                $(`.${prevBtn}`)\r\n                    .attr('disabled', false)\r\n                    .css('display', '');\r\n                this.applyButton = $(`.${button}`).detach();\r\n            }\r\n        } else {\r\n            this.applyButton = $(`.${button}`).detach();\r\n        }\r\n        this.previousSelection = newSelection;\r\n    }\r\n\r\n    displayContentForCellModalForLabelView() {\r\n        this.detachSubmitFormButton('data', 'label', '_apply-and-next', '_save-cell-properties');\r\n\r\n        this.generateDimensionsInputContainerForLabelView();\r\n\r\n        // Hightlight range cells.\r\n        if (sourceDataFiles.flexGrid.selection.isSingleCell) {\r\n            const col = sourceDataFiles.flexGrid.selection._col;\r\n            const row = sourceDataFiles.flexGrid.selection._row;\r\n\r\n            const fileCellProperties = sourceFilesService.getCurrentSourceFile().cellProperties;\r\n            const range = get(fileCellProperties, `[${col}][${row}][range]`);\r\n            if (range) {\r\n                this.highlightRangeCells(range);\r\n            }\r\n        }\r\n    }\r\n\r\n    generateLabelDimensionsForModalInputsInDataView() {\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        const fileCellProperties = file.cellProperties;\r\n        const formDimensions = file.formDimensions;\r\n        let labelDimensions2 = [];\r\n        let labelDimensions = [];\r\n\r\n        Object.keys(fileCellProperties).forEach(col => {\r\n            Object.keys(fileCellProperties[col]).forEach(row => {\r\n                if (fileCellProperties[col][row].cellType === 'label') {\r\n                    const dimension = fileCellProperties[col][row].labelDimension;\r\n                    const value = fileCellProperties[col][row].overwriteValue\r\n                        ? fileCellProperties[col][row].overwriteValue\r\n                        : fileCellProperties[col][row].value;\r\n\r\n                    if (Array.isArray(dimension)) {\r\n                        dimension.map((dimensionValue, index) => {\r\n                            const dimensionObject = sourceDataFilesSidebar.columnDefs.filter(obj => {\r\n                                return obj.label === dimensionValue;\r\n                            });\r\n\r\n                            if (dimensionObject.length) {\r\n                                const dimensionSlug = dimensionObject[0].slug;\r\n\r\n                                labelDimensions2 = union(labelDimensions2, [dimensionSlug]);\r\n                                labelDimensions[dimensionSlug] = union([], labelDimensions[dimensionSlug], [\r\n                                    value[index]\r\n                                ]);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        labelDimensions2 = union(labelDimensions2, [dimension]);\r\n                        labelDimensions[dimension] = union([], labelDimensions[dimension], [value]);\r\n                    }\r\n                }\r\n\r\n                if (fileCellProperties[col][row].cellType === 'data') {\r\n                    const cell = fileCellProperties[col][row];\r\n                    Object.keys(cell).forEach(function(key) {\r\n                        if (formDimensions.includes(key)) {\r\n                            if (cell[key]) {\r\n                                const value = cell[key];\r\n                                labelDimensions2 = union(labelDimensions2, [key]);\r\n                                labelDimensions[key] = union([], labelDimensions[key], [value]);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        return labelDimensions;\r\n    }\r\n\r\n    setCellTypeForCellModal(type) {\r\n        // $('#tableCellModal ._range-picker').parent().css('display', '');\r\n        $('#tableCellModal .modal-body').data('cell_type', type);\r\n        $('#tableCellModal ._range-picker')\r\n            .parent()\r\n            .css('display', type === 'label' ? '' : 'none');\r\n        $('#tableCellModal ._label-properties').css('display', type === 'label' ? '' : 'none');\r\n        $('#tableCellModal ._data-properties').css('display', type === 'data' ? '' : 'none');\r\n        $('#tableCellModal ._apply-and-next')\r\n            .css('display', type === 'data' ? '' : 'none')\r\n            .prop('disabled', type === 'data' ? false : true);\r\n        $('#tableCellModal ._save-cell-properties')\r\n            .css('display', type !== 'data' ? '' : 'none')\r\n            .prop('disabled', type !== 'data' ? false : true);\r\n\r\n        switch (type) {\r\n            case 'data':\r\n                $('#cellModalSwitchData').prop('checked', true);\r\n                this.displayContentForCellModalForDataView();\r\n                break;\r\n\r\n            case 'label':\r\n                $('#cellModalSwitchLabel').prop('checked', true);\r\n                this.displayContentForCellModalForLabelView();\r\n                break;\r\n\r\n            case 'notUsed':\r\n            default:\r\n                $('#cellModalSwitchNotUsed').prop('checked', true);\r\n                break;\r\n        }\r\n    }\r\n\r\n    displayContentForCellModalForDataView() {\r\n        const labelDimensions = this.generateLabelDimensionsForModalInputsInDataView();\r\n        const fileCellProperties = sourceFilesService.getCurrentSourceFile().cellProperties;\r\n        this.detachSubmitFormButton('label', 'data', '_save-cell-properties', '_apply-and-next');\r\n\r\n        // Load settings from cell data.\r\n        let inputFields = {};\r\n        if (sourceDataFiles.flexGrid.selection.isSingleCell) {\r\n            let sel = sourceDataFiles.flexGrid.selection;\r\n            const cellProperties = get(fileCellProperties, `[${sel.leftCol}][${sel.topRow}]`);\r\n            if (cellProperties) {\r\n                Object.keys(cellProperties).forEach(function(key) {\r\n                    inputFields[key] = cellProperties[key];\r\n                });\r\n            }\r\n        } else {\r\n            inputFields = this.multipleCellsInputFields;\r\n        }\r\n\r\n        // Remove previous stuff.\r\n        this.modalInputs.forEach(modalInput => {\r\n            modalInput.dispose();\r\n        });\r\n        this.modalInputs.length = 0;\r\n        this.form.find('._data-properties ._field').remove();\r\n\r\n        // Add fields.\r\n        const dataset = storageService.getCurrentDataPoints();\r\n        let fields = sourceDataFilesSidebar.columnDefs;\r\n        for (const key in fields) {\r\n            const field = fields[key];\r\n            if (field.slug === 'value' || !field.selected) {\r\n                continue;\r\n            }\r\n\r\n            const e = this.fieldTemplate.clone();\r\n            e.find('._name').text(field.label);\r\n            this.form.find('._fields._data-properties').append(e);\r\n\r\n            // Dropdown values\r\n            let values;\r\n            switch (field.slug) {\r\n                case 'attribute__global_terms':\r\n                    values = common.getGlobalTerms();\r\n                    break;\r\n\r\n                case 'parent_attribute':\r\n                    values = common.getUniqueValues(dataset, 'attribute');\r\n                    break;\r\n\r\n                default:\r\n                    values = common.getUniqueValues(dataset, field.slug);\r\n                    break;\r\n            }\r\n\r\n            values = union(values, labelDimensions[field.slug]);\r\n            // Create input.\r\n            const input = new wijmo.input.AutoComplete(e.find('._input')[0], {\r\n                itemsSource: values.reverse(),\r\n                onGotFocus: () => {\r\n                    this.dropdownValue = input.text;\r\n\r\n                    addFileSteps.fileWorkflow.enableClickToCopyMode((fileWorkflow, e) => {\r\n                        const activeCell = $(sourceDataFiles.flexGrid.cells.getCellElement(e._rng._row, e._rng._col));\r\n                        const inputElement = $(input._elRef);\r\n\r\n                        // Copy value from cell to focused input.\r\n                        sourceDataTableCellModal.hasUnsavedChanges = true;\r\n                        inputElement.val(activeCell.text());\r\n\r\n                        fileWorkflow.disableSelection = true;\r\n                        e.cancel = true;\r\n                        inputElement.animate({ backgroundColor: '#449D44' }, 200);\r\n                        inputElement.animate({ backgroundColor: 'rgba(0, 0, 0, 0)' }, 150).blur(function(e) {\r\n                            setTimeout(function() {\r\n                                input.focus();\r\n                            }, 20);\r\n                        });\r\n                    });\r\n                },\r\n                textChanged: e => {\r\n                    if (this.dropdownValue && sourceDataFiles.flexGrid.selection.isSingleCell) {\r\n                        // Check if is applied label.\r\n                        const file = sourceFilesService.getCurrentSourceFile();\r\n                        const table = sourceDataFiles.flexGrid.itemsSource;\r\n                        const selectedCol = sourceDataFiles.flexGrid.selection._col;\r\n                        const selectedRow = sourceDataFiles.flexGrid.selection._row;\r\n\r\n                        check_label: {\r\n                            for (let row = 0; row < table.length; row++) {\r\n                                for (let col = 0; col < table[row].length; col++) {\r\n                                    const cellType = get(file.cellProperties, `[${col}][${row}]['cellType']`, false);\r\n                                    if (cellType === 'label') {\r\n                                        let range = get(file.cellProperties, `[${col}][${row}]['range']`, false);\r\n                                        range = XLSX.utils.decode_range(range);\r\n                                        const cellVal = sourceDataFiles.flexGrid.getCellData(row, col, true);\r\n\r\n                                        if (\r\n                                            cellVal === this.dropdownValue &&\r\n                                            selectedCol >= range.s.c &&\r\n                                            selectedCol <= range.e.c &&\r\n                                            selectedRow >= range.s.r &&\r\n                                            selectedRow <= range.e.r\r\n                                        ) {\r\n                                            if (\r\n                                                !confirm(\r\n                                                    'This value was applied by a label. Are you sure you want to change it?'\r\n                                                )\r\n                                            ) {\r\n                                                $(e._e)\r\n                                                    .find('input')\r\n                                                    .val(this.dropdownValue);\r\n                                                this.dropdownValue = '';\r\n                                                document.activeElement.blur();\r\n                                                if (this.appliedLabelChangeCounter) {\r\n                                                    this.appliedLabelChangeCounter--;\r\n                                                }\r\n\r\n                                                return false;\r\n                                            } else {\r\n                                                // file.cellProperties[selectedCol][selectedRow]['appliedLabelWarning'] = true;\r\n                                                this.appliedLabelChangeCounter++;\r\n                                                this.dropdownValue = input.text;\r\n                                            }\r\n\r\n                                            break check_label;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                onLostFocus: () => {\r\n                    this.dropdownValue = '';\r\n                    addFileSteps.fileWorkflow.enableModal();\r\n                }\r\n            });\r\n            input._kosmosField = field.slug;\r\n            this.modalInputs.push(input);\r\n\r\n            // Default value.\r\n            if (field.slug in inputFields) {\r\n                if (sourceDataFiles.flexGrid.selection.isSingleCell) {\r\n                    input._setText(inputFields[field.slug]);\r\n                } else {\r\n                    if (Array.isArray(inputFields[field.slug])) {\r\n                        if (inputFields[field.slug].length > 1) {\r\n                            input._setText('Multiple values');\r\n                        } else if (inputFields[field.slug].length === 1) {\r\n                            input._setText(inputFields[field.slug][0]);\r\n                        } else {\r\n                            input._setText('');\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                input._setText('');\r\n            }\r\n\r\n            // Add events.\r\n            input.textChanged.addHandler(() => {\r\n                this.hasUnsavedChanges = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    displayContentForCellModal(activeCell) {\r\n        // Set title of cell modal.\r\n        $('#tableCellModal .modal-title').text(activeCell.text());\r\n\r\n        // Add Data | Label switch.\r\n        if (!$('#tableCellModal ._data-label-switch').length) {\r\n            const labelInput =\r\n                '<label class=\"_modal-switch-label-left\"><input disabled type=\"radio\" id=\"cellModalSwitchData\" name=\"data-label-switch\" value=\"data\">Data</label>';\r\n            const dataInput =\r\n                '<label class=\"_modal-switch-label-middle\"><input disabled type=\"radio\" id=\"cellModalSwitchLabel\" name=\"data-label-switch\" value=\"label\">Label</label>';\r\n            const notUsedInput =\r\n                '<label class=\"_modal-switch-label-right\"><input disabled type=\"radio\" id=\"cellModalSwitchNotUsed\" name=\"data-label-switch\" value=\"notUsed\">Not used</label>';\r\n            const divRadioContainer =\r\n                '<div class=\"_data-label-switch\">' + labelInput + dataInput + notUsedInput + '</div>';\r\n            this.form.prepend(divRadioContainer);\r\n\r\n            $('#tableCellModal ._data-label-switch input[type=radio][name=data-label-switch]').change(e => {\r\n                const value = $(e.currentTarget).val();\r\n                this.setCellTypeForCellModal(value);\r\n            });\r\n        }\r\n\r\n        const file = sourceFilesService.getCurrentSourceFile();\r\n        if (sourceDataEditTableCell.newCellIsBeingEdited) {\r\n            sourceDataEditTableCell.newCellIsBeingEdited = false;\r\n\r\n            let sel = sourceDataFiles.flexGrid.selection;\r\n            const cellType = get(file, `cellProperties[${sel.leftCol}][${sel.topRow}].cellType`);\r\n            this.setCellTypeForCellModal(cellType);\r\n        }\r\n    }\r\n\r\n    displayContentForCellsModal() {\r\n        const grid = sourceDataFiles.flexGrid;\r\n        let sel = grid.selection;\r\n        let cellType = '';\r\n        const project = storageService.getCurrentProject();\r\n        const sourceFile = sourceFilesService.getCurrentSourceFile();\r\n        let inputFields = {};\r\n        project.getDimensions().map(dimension => {\r\n            inputFields[dimension.slug] = [];\r\n        });\r\n        inputFields['cellType'] = [];\r\n        inputFields['dataPointId'] = [];\r\n\r\n        // Set title of cell modal.\r\n        const modalTitle = XLSX.utils.encode_range({\r\n            s: { r: sel.topRow, c: sel.leftCol },\r\n            e: { r: sel.bottomRow, c: sel.rightCol }\r\n        });\r\n        $('#tableCellModal .modal-title').text(modalTitle);\r\n\r\n        this.labelMultipleDimensions = [];\r\n        for (let row = sel.topRow; row <= sel.bottomRow; row++) {\r\n            for (let col = sel.leftCol; col <= sel.rightCol; col++) {\r\n                const cellProperties = sourceFile.getSingleCellProperties(row, col);\r\n\r\n                if (cellProperties.cellType === 'label') {\r\n                    if (cellType !== 'data') {\r\n                        cellType = 'label';\r\n                    }\r\n\r\n                    if (addFileSteps.ingestionStep === addFileSteps.DEFINE_DATA_STEP) {\r\n                        let dimension = get(cellProperties, `['labelDimension'][0]`);\r\n                        dimension = dimension ? dimension : '';\r\n                        this.labelMultipleDimensions = union(this.labelMultipleDimensions, [dimension]);\r\n\r\n                        let overwriteValue = get(cellProperties, `['overwriteValue'][0]`);\r\n                        overwriteValue = overwriteValue ? overwriteValue : '';\r\n                        this.labelMultipleOverwriteValues = union(this.labelMultipleOverwriteValues, [overwriteValue]);\r\n                    }\r\n                }\r\n\r\n                if (cellProperties.cellType === 'data') {\r\n                    cellType = 'data';\r\n                } else {\r\n                    continue;\r\n                }\r\n\r\n                // Prepare inputFields.\r\n                Object.keys(inputFields).forEach(function(key) {\r\n                    if (cellProperties[key]) {\r\n                        inputFields[key] = union(inputFields[key], [cellProperties[key]]);\r\n                    } else {\r\n                        if (key !== 'cellType' && key !== 'dataPointId') {\r\n                            if (inputFields[key].length) {\r\n                                inputFields[key] = union(inputFields[key], ['']);\r\n                            } else {\r\n                                inputFields[key] = concat(inputFields[key], ['']);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        this.multipleCellsInputFields = inputFields;\r\n\r\n        this.setCellTypeForCellModal(cellType);\r\n    }\r\n\r\n    // Get the common value for the currect selection of cells, or a string indicating multiple values.\r\n    getCommonValueForSelection(property) {\r\n        const sel = sourceDataFiles.flexGrid.selection;\r\n        const fileCellProperties = sourceFilesService.getCurrentSourceFile().cellProperties;\r\n        let values = {};\r\n\r\n        // Get all values.\r\n        for (let col = sel.leftCol; col <= sel.rightCol; col++) {\r\n            for (let row = sel.topRow; row <= sel.bottomRow; row++) {\r\n                let value = get(fileCellProperties, `[${col}][${row}][${property}]`);\r\n\r\n                if (!value && value !== 0) {\r\n                    value = '';\r\n                }\r\n\r\n                values[value] = true;\r\n            }\r\n        }\r\n        values = Object.keys(values);\r\n\r\n        if (values.length > 1) {\r\n            return 'Multiple values';\r\n        } else if (values.length === 1) {\r\n            return values[0];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    setCommonProperty(object, property, value) {\r\n        if (value === 'Multiple values') {\r\n            return;\r\n        }\r\n\r\n        object[property] = value;\r\n    }\r\n}\r\n\r\nexport const sourceDataTableCellModal = new SourceDataTableCellModal();\r\n","import _ from 'lodash';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { sourceDataFilesSidebar } from '../../../tabs/source-data/add-file-workflow/SourceDataFilesSidebar';\r\nimport { addManualTable } from '../../../tabs/source-data/add-manual-workflow/AddManualTable';\r\nimport { SourceDataStructures } from '../../../tabs/source-data/source-data-structures/SourceDataStructures';\r\nimport { sourceData } from '../../../tabs/source-data/SourceData';\r\nimport { sourceDataPointsSidebar } from '../../../tabs/source-data/SourceDataPointsSidebar';\r\nimport { sourceDataService } from '../../../tabs/source-data/SourceDataService';\r\n\r\nclass AddManualSidebar {\r\n    constructor() {\r\n        this.ingestionStep = 1;\r\n        this.inputs = [];\r\n        this.container = $('#add_manual_workflow');\r\n        this.dataStructuresContainer = this.container.find('._data-structures');\r\n\r\n        this.sourceDataStructures = new SourceDataStructures(\r\n            this.dataStructuresContainer,\r\n            () => {\r\n                this.sourceDataStructures.sync();\r\n            },\r\n            true\r\n        );\r\n        /** @type {Project} */\r\n        this.project = null;\r\n\r\n        this.columnDefs = [];\r\n        this.tableColumns = [];\r\n    }\r\n\r\n    init() {\r\n        addManualTable.manualWorkflowContent();\r\n\r\n        $('#add_manual_sidebar ._ingestion-steps ._back').on('click', () => this.addManualPrevStep());\r\n        $('#add_manual_sidebar ._ingestion-steps ._next').on('click', () => this.addManualNextStep());\r\n\r\n        this.form = $('#add_manual_form');\r\n        this.fieldsContainer = this.form.find('._fields');\r\n        this.fieldTemplate = this.form\r\n            .find('._template')\r\n            .removeClass('_template')\r\n            .detach();\r\n\r\n        $('#add_manual_sidebar ._cancel').on('click', () => {\r\n            this.cancelWorkflow();\r\n        });\r\n        this.form.find('._add-data-point').on('click', () => {\r\n            this.addDataPoint();\r\n        });\r\n        this.form.find('._delete-data-point').on('click', () => {\r\n            this.deleteDataPoint();\r\n        });\r\n        this.form.find('._save-data-point').on('click', () => {\r\n            this.saveChanges(true);\r\n        });\r\n        this.form.find('._clear').on('click', () => {\r\n            this.clearAllFields();\r\n        });\r\n        $('#add_manual_sidebar ._dimensions-section ._add-custom-dimension').on('click', () => {\r\n            sourceDataPointsSidebar.addCustomDimension();\r\n            this.sync();\r\n            storageService.syncViews();\r\n        });\r\n        this.columnsSelect = new wijmo.input.MultiSelect(\r\n            $('#add_manual_sidebar ._dimensions-section ._column-selector')[0],\r\n            {\r\n                placeholder: 'Select Columns',\r\n                itemsSource: [],\r\n                headerFormat: '{count} columns selected',\r\n                displayMemberPath: 'label',\r\n                checkedMemberPath: 'selected',\r\n                onCheckedItemsChanged: () => {\r\n                    this.updateDimensions();\r\n                }\r\n            }\r\n        );\r\n        $('#add_manual_sidebar ._dimensions-section ._column-selector').on('click', () => {\r\n            $('.wj-listbox-item input').prop('disabled', this.ingestionStep !== 1);\r\n            $('.wj-listbox-item label').each(function() {\r\n                if (\r\n                    $(this)\r\n                        .text()\r\n                        .replace(/\\s/g, '') === 'Scale'\r\n                ) {\r\n                    $(this)\r\n                        .find('input')\r\n                        .prop('disabled', true);\r\n                }\r\n            });\r\n        });\r\n\r\n        this.form.on('click', '._lock-container', e => {\r\n            const $this = $(e.currentTarget);\r\n            const input = $this.find('input');\r\n            const checked = !input.prop('checked');\r\n            input.prop('checked', checked);\r\n            $this.toggleClass('_checked', checked);\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        this.columnDefs = sourceDataFilesSidebar.getAvailableColumns();\r\n        this.columnsSelect.itemsSource = this.columnDefs;\r\n        this.displayForm();\r\n    }\r\n\r\n    displayForm() {\r\n        // Save settings for previous stuff.\r\n        const lockedFields = this.getLockedFields();\r\n\r\n        // Remove previous stuff.\r\n        this.inputs = [];\r\n        this.form.find('._field').remove();\r\n\r\n        // Add fields.\r\n        let fields = [\r\n            {\r\n                slug: 'value',\r\n                label: 'Value',\r\n                selected: true\r\n            }\r\n        ];\r\n        fields = _.concat([], fields, this.columnDefs);\r\n\r\n        fields.forEach(field => {\r\n            if (field.selected || field.slug === 'value') {\r\n                const e = this.fieldTemplate.clone();\r\n                e.find('._name').text(field.label);\r\n                this.fieldsContainer.append(e);\r\n\r\n                if (!this.project) {\r\n                    this.project = cloneDeep(storageService.getCurrentProject());\r\n                }\r\n                let values = sourceDataService.getAvailableValuesForField(field, this.project);\r\n\r\n                // Create input.\r\n                let input;\r\n                if (field.slug === 'value') {\r\n                    input = new wijmo.input.InputNumber(e.find('._input')[0], {\r\n                        format: 'g10',\r\n                        isRequired: false,\r\n                        value: null\r\n                    });\r\n                } else {\r\n                    input = new wijmo.input.AutoComplete(e.find('._input')[0], {\r\n                        itemsSource: values\r\n                    });\r\n                }\r\n                input._kosmosField = field.slug;\r\n                this.inputs.push(input);\r\n\r\n                // Default value and lock\r\n                if (field.slug in lockedFields) {\r\n                    input._setText(lockedFields[field.slug]);\r\n                    this.getInputLock(input).prop('checked', true);\r\n                } else {\r\n                    input._setText('');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getInputLock(input) {\r\n        return $(input._e)\r\n            .closest('._field')\r\n            .find('._lock');\r\n    }\r\n\r\n    isInputLocked(input) {\r\n        return this.getInputLock(input).is(':checked');\r\n    }\r\n\r\n    getLockedFields() {\r\n        const lockedFields = {};\r\n\r\n        this.inputs.forEach(input => {\r\n            if (this.isInputLocked(input)) {\r\n                lockedFields[input._kosmosField] = input.text;\r\n            }\r\n        });\r\n\r\n        return lockedFields;\r\n    }\r\n\r\n    getDataPointFromForm() {\r\n        // Get point.\r\n        const dataPoint = {};\r\n        this.inputs.forEach(input => {\r\n            if (input._kosmosField === 'value') {\r\n                dataPoint[input._kosmosField] = input.value;\r\n            } else {\r\n                dataPoint[input._kosmosField] = input.text;\r\n            }\r\n        });\r\n        dataPoint.value = parseFloat(dataPoint.value);\r\n        dataPoint.scale = parseInt(dataPoint.scale);\r\n\r\n        return dataPoint;\r\n    }\r\n\r\n    addDataPoint() {\r\n        const dataPoint = this.getDataPointFromForm();\r\n\r\n        const validation = storageService.getCurrentProject().validateDataPoint(dataPoint);\r\n        if (validation.success === false) {\r\n            alert(validation.error);\r\n\r\n            return;\r\n        }\r\n\r\n        addManualTable.tableSource.push(dataPoint);\r\n\r\n        addManualTable.sync();\r\n        this.setSelectedItem(null);\r\n    }\r\n\r\n    saveChanges() {\r\n        const dataPoint = this.getDataPointFromForm();\r\n\r\n        const validation = storageService.getCurrentProject().validateDataPoint(dataPoint);\r\n        if (validation.success === false) {\r\n            alert(validation.error);\r\n\r\n            return;\r\n        }\r\n\r\n        const row = addManualTable.flexgrid.selection.row;\r\n        addManualTable.tableSource[row] = dataPoint;\r\n        this.setSelectedItem(null);\r\n        addManualTable.sync();\r\n    }\r\n\r\n    deleteDataPoint() {\r\n        const row = addManualTable.flexgrid.selection.row;\r\n        addManualTable.tableSource.splice(row, 1);\r\n\r\n        addManualTable.sync();\r\n    }\r\n\r\n    clearAllFields() {\r\n        this.form.find('._lock').prop('checked', false);\r\n        addManualTable.flexgrid.select(-1, -1);\r\n        this.setSelectedItem(null);\r\n    }\r\n\r\n    setSelectedItem(item) {\r\n        this.selectedItem = item;\r\n\r\n        if (!item) {\r\n            item = this.getLockedFields();\r\n        }\r\n\r\n        // Set fields.\r\n        this.inputs.forEach(input => {\r\n            const field = input._kosmosField;\r\n\r\n            if (item && field in item) {\r\n                if (field === 'value') {\r\n                    input.value = parseFloat(item[field]);\r\n                } else {\r\n                    input._setText(item[field]);\r\n                }\r\n            } else {\r\n                if (field === 'value') {\r\n                    input.value = null;\r\n                } else {\r\n                    input._setText('');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    addManualPrevStep() {\r\n        if (this.ingestionStep === 1) {\r\n            return;\r\n        }\r\n        this.ingestionStep--;\r\n        addManualTable.manualWorkflowContent();\r\n        this.syncDimensionsContainer();\r\n    }\r\n\r\n    addManualNextStep() {\r\n        if (this.ingestionStep === 3) {\r\n            this.finishStep();\r\n\r\n            return;\r\n        }\r\n\r\n        this.ingestionStep++;\r\n\r\n        if (this.ingestionStep === 2) {\r\n            this.secondStep();\r\n        }\r\n\r\n        addManualTable.manualWorkflowContent();\r\n        this.syncDimensionsContainer();\r\n    }\r\n\r\n    secondStep() {\r\n        // Remove unselected dimensions from table source.\r\n        this.columnDefs.map(dimension => {\r\n            if (!dimension.selected) {\r\n                addManualTable.tableSource.map(dataPoint => {\r\n                    dataPoint[dimension.slug] = '';\r\n                });\r\n            }\r\n        });\r\n\r\n        // Load data structures.\r\n        const project = storageService.getCurrentProject();\r\n\r\n        // Copy current project and add new data points into it.\r\n        /** @type {Project} */\r\n        this.project = cloneDeep(project);\r\n        this.project.dataPoints = this.project.dataPoints.concat(addManualTable.tableSource);\r\n\r\n        // Use new project for data-structures screen.\r\n        this.sourceDataStructures.setProject(this.project);\r\n        this.sourceDataStructures.sync();\r\n\r\n        // Refresh FlexGrid.\r\n        window.dispatchEvent(new Event('resize'));\r\n    }\r\n\r\n    finishStep() {\r\n        // Add new Data Points.\r\n        let dataPoints = _.concat([], addManualTable.tableSource);\r\n        let success = true;\r\n        let successCount = 0;\r\n        let errors = '';\r\n        let totalInitialDataPoints = dataPoints.length;\r\n\r\n        for (let i = 0; i < dataPoints.length; i++) {\r\n            let dataPoint = dataPoints[i];\r\n            dataPoint.source = 'manual';\r\n            const result = storageService.getCurrentProject().addDataPoint(dataPoint);\r\n\r\n            if (!result.success) {\r\n                success = false;\r\n                errors += 'Error for data-point with the value = ' + dataPoint.value + ': ' + result.error + '\\n';\r\n            } else {\r\n                successCount++;\r\n                dataPoints.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        addManualTable.tableSource = _.concat([], dataPoints);\r\n\r\n        // Add data structures.\r\n        addManualSidebar.sourceDataStructures.addDataStructuresFromProject(this.project);\r\n\r\n        storageService.saveCurrentProject();\r\n        storageService.syncViews();\r\n\r\n        this.ingestionStep = 1;\r\n        addManualTable.manualWorkflowContent();\r\n\r\n        if (success) {\r\n            alert('Your changes have been saved successfully.');\r\n\r\n            addManualTable.flexgrid.itemsSource = addManualTable.tableSource;\r\n            addManualTable.flexgrid.collectionView.refresh();\r\n\r\n            $(\"input[name=source_data_mode][value='data_points']\").prop('checked', true);\r\n            $(\"input[name=source_data_mode][value='data_points']\")\r\n                .parent()\r\n                .addClass('active');\r\n            $(\"input[name=source_data_mode][value='manual_workflow']\")\r\n                .parent()\r\n                .removeClass('active');\r\n            $('.main-options-container input[name=source_data_mode]').change();\r\n        } else {\r\n            alert(\r\n                successCount +\r\n                    '/' +\r\n                    totalInitialDataPoints +\r\n                    ' data-points were saved. The following errors have occurred: ' +\r\n                    '\\n' +\r\n                    errors\r\n            );\r\n\r\n            addManualTable.flexgrid.itemsSource = addManualTable.tableSource;\r\n            addManualTable.flexgrid.collectionView.refresh();\r\n        }\r\n    }\r\n\r\n    cancelWorkflow() {\r\n        const confirmation = confirm('Are you sure you want to cancel? You will lose all your progress.');\r\n\r\n        if (!confirmation) {\r\n            return;\r\n        }\r\n\r\n        sourceData.endWorkflow();\r\n        addManualTable.tableSource = [];\r\n        this.ingestionStep = 1;\r\n        this.setSelectedItem(null);\r\n        addManualTable.sync();\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.displayForm();\r\n\r\n        let itemsSource = [\r\n            {\r\n                slug: '__normalized_value',\r\n                label: 'Normalized Value',\r\n                selected: true,\r\n                isReadOnly: true\r\n            },\r\n            {\r\n                slug: 'value',\r\n                label: 'Value',\r\n                selected: true\r\n            }\r\n        ];\r\n        itemsSource = _.concat([], itemsSource, this.columnDefs);\r\n        this.tableColumns = itemsSource;\r\n        addManualTable.sync();\r\n    }\r\n\r\n    syncDimensionsContainer() {\r\n        $('#add_manual_sidebar ._dimensions-section ._add-custom-dimension').prop('disabled', this.ingestionStep !== 1);\r\n    }\r\n}\r\n\r\nexport const addManualSidebar = new AddManualSidebar();\r\n","import { cloneDeep } from 'lodash';\r\nimport { common } from '../../../Common';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { addFileSteps } from '../../../tabs/source-data/add-file-workflow/AddFileSteps';\r\nimport { sourceDataFilesSidebar } from '../../../tabs/source-data/add-file-workflow/SourceDataFilesSidebar';\r\nimport { addManualSidebar } from '../../../tabs/source-data/add-manual-workflow/AddManualSidebar';\r\nimport { sourceDataService } from '../../../tabs/source-data/SourceDataService';\r\n\r\nclass AddManualTable {\r\n    constructor() {\r\n        this.tableSource = [];\r\n        this.columnDefs = [];\r\n        this.scale = 1;\r\n        this.inUpdatedLayout = false;\r\n    }\r\n\r\n    init() {\r\n        addManualSidebar.init();\r\n\r\n        this.flexgrid = new wijmo.grid.FlexGrid('#add_manual_workflow ._table', {\r\n            isReadOnly: false,\r\n            selectionMode: 'Row',\r\n            itemsSource: this.tableSource,\r\n            autoGenerateColumns: false,\r\n            formatItem: (s, e) => {\r\n                if (e.panel === s.cells) {\r\n                    let item = s.rows[e.row].dataItem;\r\n\r\n                    switch (s.columns[e.col].binding) {\r\n                        case 'value':\r\n                            e.cell.childNodes[0].nodeValue = common.formatNumber(item.value);\r\n                            break;\r\n\r\n                        case '__normalized_value':\r\n                            e.cell.innerHTML = common.formatNumber(item['__normalized_value'] / this.scale);\r\n                            break;\r\n\r\n                        case 'scale':\r\n                            // e.cell.innerHTML = item.scale;\r\n                            break;\r\n                    }\r\n                }\r\n            },\r\n            selectionChanged: (s, e) => {\r\n                const selection = this.flexgrid.selection;\r\n                let item;\r\n\r\n                if (selection._row in s.rows) {\r\n                    item = s.rows[selection._row].dataItem;\r\n                } else {\r\n                    item = null;\r\n                }\r\n\r\n                addManualSidebar.setSelectedItem(item);\r\n            },\r\n            updatedLayout: () => {\r\n                if (this.inUpdatedLayout) {\r\n                    this.inUpdatedLayout = false;\r\n                } else {\r\n                    this.inUpdatedLayout = true;\r\n                    this.flexgrid.autoSizeRow(0, true);\r\n                }\r\n            },\r\n            beginningEdit: (s, e) => {\r\n                const col = s.columns[e.col];\r\n\r\n                // User is allowed to edit?\r\n                if (addManualSidebar.ingestionStep !== 1) {\r\n                    e.cancel = true;\r\n                    return;\r\n                }\r\n\r\n                // if (col.binding === 'value') {\r\n                //     e.cancel = true;\r\n                //     return;\r\n                // }\r\n\r\n                // Get column definition.\r\n                const columnDef = this.columnDefs.find(column => {\r\n                    return column.slug === col.binding;\r\n                });\r\n\r\n                // Update data map.\r\n                if (col.dataMap) {\r\n                    col.dataMap = sourceDataService.getDataMapForDimension(\r\n                        columnDef.dimension,\r\n                        addManualSidebar.project\r\n                    );\r\n                }\r\n\r\n                // Always format as general cell, not as number.\r\n                col.format = 'g';\r\n            },\r\n            cellEditEnding: (s, e) => {\r\n                // Check if value has been changed.\r\n                const oldVal = s.getCellData(e.row, e.col);\r\n                const newVal = s.activeEditor.value;\r\n                if ((typeof oldVal === 'string' && oldVal === newVal) || common.isDeltaZero(oldVal - newVal)) {\r\n                    e.cancel = true;\r\n                }\r\n\r\n                // Validate.\r\n                const col = s.columns[e.col];\r\n                const dataPoint = Object.assign({}, s.rows[e.row].dataItem);\r\n                dataPoint[col.binding] = newVal;\r\n                const validation = storageService.getCurrentProject().validateDataPoint(dataPoint);\r\n                if (validation.success === false) {\r\n                    e.cancel = true;\r\n                    alert(validation.error);\r\n                }\r\n            },\r\n            cellEditEnded: (s, e) => {\r\n                // Edit was cancelled?\r\n                if (e.cancel) {\r\n                    return;\r\n                }\r\n\r\n                // TODO: Show loading screen.\r\n                const dataPoint = s.rows[e.row].dataItem;\r\n                const row = addManualTable.flexgrid.selection.row;\r\n                this.tableSource[row] = dataPoint;\r\n\r\n                addManualTable.sync();\r\n                addManualSidebar.setSelectedItem(dataPoint);\r\n            }\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        this.manualWorkflowContent();\r\n\r\n        // Columns\r\n        if (addManualSidebar.tableColumns.length) {\r\n            this.columnDefs = addManualSidebar.tableColumns;\r\n        } else {\r\n            this.columnDefs = sourceDataFilesSidebar.getAvailableColumns(true, true);\r\n        }\r\n        this.updateColumns();\r\n\r\n        // Data points\r\n        let dataPoints = this.tableSource;\r\n        this.setData(dataPoints);\r\n    }\r\n\r\n    manualWorkflowContent() {\r\n        // Hightlight selected step in ingestion header.\r\n        $('#add_manual_workflow ._manual-ingestion-steps-display ._step').removeClass('highlight-step');\r\n        $(\r\n            '#add_manual_workflow ._manual-ingestion-steps-display ._step[data-step=' +\r\n                addManualSidebar.ingestionStep +\r\n                ']'\r\n        ).addClass('highlight-step');\r\n\r\n        // Prev and next buttons\r\n        $('#add_manual_sidebar ._ingestion-steps ._next').text(addFileSteps.ingestionStep < 3 ? 'Next' : 'Finish');\r\n        $('#add_manual_sidebar ._ingestion-steps ._back').css(\r\n            'display',\r\n            addManualSidebar.ingestionStep === 1 ? 'none' : ''\r\n        );\r\n\r\n        // Misc\r\n        $('#add_manual_sidebar #add_manual_form').css('display', addManualSidebar.ingestionStep === 1 ? '' : 'none');\r\n        $('#add_manual_workflow ._data-structures').css('display', addManualSidebar.ingestionStep === 2 ? '' : 'none');\r\n    }\r\n\r\n    updateColumns() {\r\n        this.flexgrid.columns.length = 0;\r\n        this.columnDefs.forEach(column => {\r\n            if (!column.selected) {\r\n                return;\r\n            }\r\n\r\n            // Add column to grid.\r\n            const gridCol = new wijmo.grid.Column();\r\n            gridCol.binding = column.slug;\r\n            gridCol.header = column.label;\r\n            gridCol.dataMap = column.dataMap;\r\n            gridCol.isReadOnly = column.isReadOnly;\r\n            this.flexgrid.columns.push(gridCol);\r\n        });\r\n    }\r\n\r\n    setData(dataset) {\r\n        dataset = cloneDeep(dataset);\r\n\r\n        const project = storageService.getCurrentProject();\r\n        // const sourceFiles = project.sourceFiles;\r\n\r\n        dataset = dataset.map(item => {\r\n            // Normalize values.\r\n            item['__normalized_value'] = item.value * common.parseScale(item.scale) * common.parseInverse(item.inverse);\r\n\r\n            // Process dimensions.\r\n            item = project.addDataStructuresToDataPoint(item);\r\n\r\n            return item;\r\n        });\r\n\r\n        // Save view.\r\n        const sortDescriptions = this.flexgrid.collectionView.sortDescriptions;\r\n        const scrollPosition = this.flexgrid.scrollPosition;\r\n        const selection = this.flexgrid.selection;\r\n\r\n        // Update data source.\r\n        this.flexgrid.itemsSource = dataset;\r\n        this.flexgrid.collectionView.refresh();\r\n        this.updateColumns();\r\n\r\n        // Load view.\r\n        if (sortDescriptions.length > 0) {\r\n            this.flexgrid.collectionView.sortDescriptions.push(sortDescriptions[0]);\r\n        }\r\n        this.flexgrid.scrollPosition = scrollPosition;\r\n        this.flexgrid.select(selection);\r\n    }\r\n}\r\n\r\nexport const addManualTable = new AddManualTable();\r\n","import { cloneDeep } from 'lodash';\r\nimport { common } from '../../../Common';\r\nimport { Dimension } from '../../../entities/Dimension';\r\nimport { SourceDataStructureValidator } from '../../../tabs/source-data/source-data-structures/SourceDataStructureValidator';\r\n\r\nexport class SourceDataStructureSets {\r\n    constructor(container, saveHandler) {\r\n        this.container = container;\r\n        /** @type {Function} */\r\n        this.saveHandler = saveHandler;\r\n        /** @type {Project} */\r\n        this.project = null;\r\n        this.validFilterSelect = this.container.find('._filterByState select');\r\n        this.autoReconcileButton = this.container.find('._auto-reconcile');\r\n        this.setsTable = this.container.find('._setsTable');\r\n        this.modal = this.container.find('.modal');\r\n        this.sourceDataStructureValidator = new SourceDataStructureValidator();\r\n        this.dataset = null;\r\n        this.validFilter = 'invalid';\r\n        /** @type {Dimension} */\r\n        this.dimension = null;\r\n        this.inUpdatedLayout = false;\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            this.flexgrid = new wijmo.grid.FlexGrid(this.setsTable, {\r\n                isReadOnly: true,\r\n                allowSorting: false,\r\n                selectionMode: 'None',\r\n                itemsSource: [],\r\n                autoGenerateColumns: false,\r\n                childItemsPath: 'children',\r\n                formatItem: (s, e) => {\r\n                    // Row headers\r\n                    if (e.panel.cellType === wijmo.grid.CellType.RowHeader) {\r\n                        const item = s.rows[e.row].dataItem;\r\n                        if (item.children && !item.valid) {\r\n                            // Create checkbox.\r\n                            e.cell.innerHTML = '<input type=\"checkbox\">';\r\n                            const checkbox = e.cell.firstChild;\r\n                            checkbox.checked = item.selected ? true : false;\r\n\r\n                            // On click, update selection for this row and all children as well.\r\n                            checkbox.addEventListener('change', () => {\r\n                                this.flexgrid.beginUpdate();\r\n                                item.selected = checkbox.checked;\r\n                                item.children.forEach(child => {\r\n                                    child.selected = checkbox.checked;\r\n                                });\r\n                                this.flexgrid.endUpdate();\r\n                                this.updateAutoReconcileButton();\r\n                            });\r\n                        } else {\r\n                            e.cell.innerHTML = '';\r\n                        }\r\n                    }\r\n\r\n                    // Top-left cell\r\n                    if (e.panel.cellType === wijmo.grid.CellType.TopLeft) {\r\n                        // Count selected items.\r\n                        let selected = 0,\r\n                            total = 0;\r\n                        this.flexgrid.rows.forEach(row => {\r\n                            const item = row.dataItem;\r\n                            if (!item.children || item.valid) {\r\n                                return;\r\n                            }\r\n                            if (item.selected) {\r\n                                selected++;\r\n                            }\r\n                            total++;\r\n                        });\r\n\r\n                        // Create checkbox.\r\n                        e.cell.innerHTML = '<input type=\"checkbox\">';\r\n                        const checkbox = e.cell.firstChild;\r\n                        checkbox.checked = selected > 0 && selected === total;\r\n                        checkbox.indeterminate = selected > 0 && selected !== total;\r\n\r\n                        // On click, update selection for all rows.\r\n                        checkbox.addEventListener('change', () => {\r\n                            this.flexgrid.beginUpdate();\r\n                            this.flexgrid.rows.forEach(row => {\r\n                                const item = row.dataItem;\r\n                                if (!item.children || item.valid) {\r\n                                    return;\r\n                                }\r\n                                item.selected = checkbox.checked;\r\n                                item.children.forEach(child => {\r\n                                    child.selected = checkbox.checked;\r\n                                });\r\n                            });\r\n                            this.flexgrid.endUpdate();\r\n                            this.updateAutoReconcileButton();\r\n                        });\r\n                    }\r\n\r\n                    // Regular cells\r\n                    if (e.panel === s.cells) {\r\n                        const sourceFiles = this.project.sourceFiles;\r\n                        const item = s.rows[e.row].dataItem;\r\n                        const binding = s.columns[e.col].binding;\r\n\r\n                        // Update \"source\" column.\r\n                        switch (binding) {\r\n                            case 'source':\r\n                                // Get name.\r\n                                if (item.source === 'manual') {\r\n                                    e.cell.innerHTML = 'Manual';\r\n                                } else if (item.source in sourceFiles) {\r\n                                    e.cell.innerHTML = sourceFiles[item.source].name;\r\n                                }\r\n                                break;\r\n\r\n                            case 'value':\r\n                                if (!item.children && !item.isDelta) {\r\n                                    e.cell.innerHTML = common.formatNumber(item.value);\r\n                                }\r\n                                break;\r\n\r\n                            case '__normalized_value':\r\n                                if (!item.children) {\r\n                                    e.cell.innerHTML = common.formatNumber(item['__normalized_value']);\r\n                                }\r\n                                break;\r\n\r\n                            case 'scale':\r\n                                if (item.scale) {\r\n                                    e.cell.innerHTML = item.scale;\r\n                                }\r\n                                break;\r\n                        }\r\n\r\n                        // Make parents bold.\r\n                        if (item.children) {\r\n                            e.cell.style.fontWeight = 'bold';\r\n                        } else {\r\n                            e.cell.style.fontWeight = '';\r\n                        }\r\n\r\n                        if (item.isDelta) {\r\n                            if (common.isDeltaZero(item['__normalized_value'])) {\r\n                                e.cell.style.color = 'green';\r\n                            } else {\r\n                                e.cell.style.color = 'red';\r\n                            }\r\n                        } else {\r\n                            // Apply selection.\r\n                            e.cell.style.color = item.selected ? 'white' : '';\r\n                        }\r\n\r\n                        // Parent or last in set?\r\n                        if (\r\n                            (binding === '__normalized_value' || binding === this.dimension.slug) &&\r\n                            (item._isLastParent || item._isLast)\r\n                        ) {\r\n                            e.cell.style.borderBottom = '2px solid #aaa';\r\n                        } else {\r\n                            e.cell.style.borderBottom = '';\r\n                        }\r\n\r\n                        // Apply selection.\r\n                        e.cell.style.background = item.selected ? '#80adbf' : '';\r\n                    }\r\n                },\r\n                updatedLayout: () => {\r\n                    if (this.inUpdatedLayout) {\r\n                        this.inUpdatedLayout = false;\r\n                    } else {\r\n                        this.inUpdatedLayout = true;\r\n                        this.flexgrid.autoSizeRow(0, true);\r\n                    }\r\n                }\r\n            });\r\n\r\n        // Filter\r\n        this.validFilterSelect.on('change', () => {\r\n            this.validFilter = this.validFilterSelect.val();\r\n            this.flexgrid.collectionView.refresh();\r\n        });\r\n\r\n        // Show auto-reconcile modal.\r\n        this.autoReconcileButton.on('click', () => {\r\n            // Populate values.\r\n            const list = this.container.find('._list-of-inputs');\r\n            list.html('');\r\n            list.append(\r\n                '<div><label><input type=\"radio\" value=\"' +\r\n                    this.dataset.value +\r\n                    '\" name=\"attribute\"> ' +\r\n                    this.dataset.value +\r\n                    ' (parent)</label></div>'\r\n            );\r\n            this.dataset.childValues.forEach(child => {\r\n                list.append(\r\n                    '<div><label><input type=\"radio\" value=\"' +\r\n                        child +\r\n                        '\" name=\"attribute\"> ' +\r\n                        child +\r\n                        '</label></div>'\r\n                );\r\n            });\r\n\r\n            this.modal.modal('show');\r\n        });\r\n\r\n        // Apply auto-reconciliation.\r\n        this.modal.find('._apply').on('click', () => {\r\n            const dfar = this.project.getDimensionForAutoReconciliations();\r\n\r\n            // Get selected options.\r\n            let value = this.modal.find('input[name=attribute]:checked').attr('value');\r\n            if (value === '_new') {\r\n                value = this.modal.find('input[name=new_attribute]').val();\r\n\r\n                if (value) {\r\n                    this.project.addDataStructure(\r\n                        this.dimension.slug,\r\n                        value,\r\n                        this.dataset.value,\r\n                        this.dataset.group,\r\n                        ''\r\n                    );\r\n                    this.dataset.childValues.push(value);\r\n                }\r\n            }\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            // Take each selected group.\r\n            this.flexgrid.rows.forEach(row => {\r\n                const group = row.dataItem;\r\n\r\n                if (group.valid || !group.selected) {\r\n                    return;\r\n                }\r\n\r\n                // Get delta.\r\n                let delta = 0;\r\n                if (value === this.dataset.value) {\r\n                    delta = -group.delta;\r\n                } else {\r\n                    delta = group.delta;\r\n                }\r\n\r\n                // Get data-point that needs to be adjusted.\r\n                let dataPoint = Object.assign({}, group.dimensions);\r\n                dataPoint[dfar.dimension] = dfar.value;\r\n                dataPoint.source = 'manual';\r\n                dataPoint[this.dimension.slug] = value;\r\n                let matchingDataPoint = this.project.getMatchingDataPoint(dataPoint);\r\n                if (matchingDataPoint) {\r\n                    dataPoint = Object.assign({}, matchingDataPoint);\r\n                } else {\r\n                    dataPoint.value = 0;\r\n                    dataPoint.scale = 1;\r\n                }\r\n                dataPoint.value += delta / dataPoint.scale;\r\n\r\n                // Persist changes.\r\n                this.project.addDataPoint(dataPoint);\r\n            });\r\n\r\n            // Force update of sets.\r\n            delete this.dataset.groups;\r\n            this.saveHandler();\r\n\r\n            // Close modal.\r\n            this.modal.modal('hide');\r\n        });\r\n    }\r\n\r\n    setProject(project) {\r\n        this.project = project;\r\n        this.sourceDataStructureValidator.setProject(project);\r\n    }\r\n\r\n    sync() {\r\n        this.setData(this.dataset);\r\n    }\r\n\r\n    setData(dataset) {\r\n        dataset = cloneDeep(dataset);\r\n        this.dataset = dataset;\r\n        if (!dataset) {\r\n            return;\r\n        }\r\n        this.dimension = dataset.dimension;\r\n\r\n        if (!dataset.groups) {\r\n            const result = this.sourceDataStructureValidator.validateParentAndChildren(\r\n                this.dimension.slug,\r\n                dataset.value,\r\n                dataset.childValues\r\n            );\r\n            Object.assign(dataset, result);\r\n        }\r\n\r\n        const items = [];\r\n        dataset.groups.forEach(row => {\r\n            const children = [];\r\n\r\n            // Add child data-points.\r\n            for (const i in row.dataPoints) {\r\n                const dataPoint = row.dataPoints[i];\r\n                dataPoint['__normalized_value'] =\r\n                    dataPoint.value * common.parseScale(dataPoint.scale) * common.parseInverse(dataPoint.inverse);\r\n                children.push(dataPoint);\r\n            }\r\n\r\n            // Add child for delta value.\r\n            const child = {};\r\n            child['__normalized_value'] = row.delta;\r\n            child[this.dimension.slug] = 'Delta';\r\n            child.isDelta = true;\r\n            children.push(child);\r\n\r\n            // Add parent.\r\n            const item = Object.assign({}, row, {\r\n                attribute: 'Set #' + (items.length + 1),\r\n                valid: row.valid,\r\n                children: children\r\n            });\r\n\r\n            items.push(item);\r\n        });\r\n        this.flexgrid.itemsSource = items;\r\n\r\n        // Get columns.\r\n        let dimensions = this.project.getDimensions();\r\n        {\r\n            dimensions.push(\r\n                new Dimension({\r\n                    slug: 'source',\r\n                    label: 'Source'\r\n                })\r\n            );\r\n\r\n            dimensions.unshift(\r\n                new Dimension({\r\n                    slug: '__normalized_value',\r\n                    label: 'Normalized Value',\r\n                    dataType: wijmo.DataType.Number\r\n                })\r\n            );\r\n\r\n            // Always put the selected dimension on the 1st column.\r\n            let selectedDimension;\r\n            for (let i = 0; i < dimensions.length; i++) {\r\n                if (dimensions[i].slug === this.dimension.slug) {\r\n                    selectedDimension = dimensions[i];\r\n                    dimensions.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n            dimensions.splice(0, 0, selectedDimension);\r\n        }\r\n\r\n        // Add columns in flexgrid.\r\n        this.flexgrid.columns.length = 0;\r\n        dimensions.forEach(dimension => {\r\n            const col = new wijmo.grid.Column();\r\n            col.binding = dimension.slug;\r\n            col.header = dimension.label;\r\n            if (dimension.dataType) {\r\n                col.dataType = dimension.dataType;\r\n            }\r\n            this.flexgrid.columns.push(col);\r\n        });\r\n\r\n        // Filter\r\n        this.flexgrid.collectionView.filter = item => {\r\n            if (this.validFilter === 'valid') {\r\n                return item.valid;\r\n            }\r\n\r\n            if (this.validFilter === 'invalid') {\r\n                return !item.valid;\r\n            }\r\n\r\n            return true;\r\n        };\r\n        if (!dataset.invalid && this.validFilter === 'invalid') {\r\n            this.validFilterSelect.val('all').trigger('change');\r\n        }\r\n        this.updateAutoReconcileButton();\r\n    }\r\n\r\n    updateAutoReconcileButton() {\r\n        const selected = this.flexgrid.rows.reduce((selected, row) => {\r\n            if (row.dataItem.selected) {\r\n                selected++;\r\n            }\r\n\r\n            return selected;\r\n        }, 0);\r\n\r\n        this.autoReconcileButton.attr('disabled', selected === 0);\r\n    }\r\n}\r\n","import { common } from '../../../Common';\r\nimport { Project } from '../../../entities/Project';\r\nimport { MultiLevelHashMap } from '../../../MultiLevelHashMap';\r\n\r\nexport class SourceDataStructureValidator {\r\n    constructor() {\r\n        /** @type {Project} */\r\n        this.project = null;\r\n    }\r\n\r\n    setProject(project) {\r\n        this.project = project;\r\n    }\r\n\r\n    /**\r\n     * Validate a value (e.g. Gross Profit). Optionally provide a group (e.g. the Countries group for Net Revenue).\r\n     *\r\n     * @param dimension\r\n     * @param parent\r\n     * @param group\r\n     * @returns {*}\r\n     */\r\n    validateValue(dimension, parent, group) {\r\n        const dataStructures = this.project.getDataStructuresForDimension(dimension);\r\n\r\n        // Get children.\r\n        const children = [];\r\n        for (let value in dataStructures) {\r\n            /** @type {DataStructure} */\r\n            const thisDataStructure = dataStructures[value];\r\n            if (thisDataStructure.parentAttribute !== parent) {\r\n                continue;\r\n            }\r\n\r\n            // Add child.\r\n            if (!group || thisDataStructure.group === group) {\r\n                children.push(thisDataStructure.attribute);\r\n            }\r\n\r\n            // Abort if value has groups, but no group was specified.\r\n            if (!group && thisDataStructure.group) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        if (children.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this.validateParentAndChildren(dimension, parent, children);\r\n    }\r\n\r\n    /**\r\n     * Validate a given parent value and children values.\r\n     *\r\n     * @param dimension\r\n     * @param parent\r\n     * @param children\r\n     * @returns {{groups: *, valid, invalid: number}}\r\n     */\r\n    validateParentAndChildren(dimension, parent, children) {\r\n        let dimensions = this.project.getDimensionsForDataStructureValidation(dimension);\r\n\r\n        // Group values by unique dimension-combinations.\r\n        let map = new MultiLevelHashMap(dimensions.length + 1);\r\n        this.project.dataPoints.forEach((dataPoint, index) => {\r\n            // Is the dimension used?\r\n            if (parent !== dataPoint[dimension] && children.indexOf(dataPoint[dimension]) === -1) {\r\n                return;\r\n            }\r\n\r\n            const key = [];\r\n            dimensions.forEach(dimension => {\r\n                // Undefined or an empty string must count as the same thing.\r\n                let value = dataPoint[dimension.slug];\r\n                if (typeof value === 'undefined') {\r\n                    value = '';\r\n                }\r\n\r\n                key.push(value);\r\n            });\r\n\r\n            // Add copy of data-point to map.\r\n            map.set(key.concat([dataPoint.id]), Object.assign({}, dataPoint));\r\n        });\r\n        let groups = map.getUniqueGroups();\r\n\r\n        // Validate each group.\r\n        groups = groups.map(group => {\r\n            let data = {\r\n                dimensions: {},\r\n                dataPoints: Object.values(group),\r\n                delta: 0,\r\n                valid: true\r\n            };\r\n\r\n            // Reorder data-points within group.\r\n            let parents = 0;\r\n            data.dataPoints = data.dataPoints.reduce((a, dataPoint) => {\r\n                if (dataPoint[dimension] === parent) {\r\n                    // The parent dimension goes first.\r\n                    a.unshift(dataPoint);\r\n                    parents++;\r\n                } else {\r\n                    a.push(dataPoint);\r\n                }\r\n\r\n                return a;\r\n            }, []);\r\n            if (parents) {\r\n                data.dataPoints[parents - 1]._isLastParent = true;\r\n            }\r\n            data.dataPoints[data.dataPoints.length - 1]._isLast = true;\r\n\r\n            // Extract the group's common dimensions.\r\n            dimensions.forEach(dimension => {\r\n                data.dimensions[dimension.slug] = data.dataPoints[0][dimension.slug];\r\n            });\r\n\r\n            // Calculate sum of children.\r\n            let sumOfChildren = 0;\r\n            children.forEach(child => {\r\n                sumOfChildren += data.dataPoints.reduce((sum, dataPoint) => {\r\n                    if (dataPoint[dimension] === child) {\r\n                        sum +=\r\n                            dataPoint.value *\r\n                            common.parseScale(dataPoint.scale) *\r\n                            common.parseInverse(dataPoint.inverse);\r\n                    }\r\n                    return sum;\r\n                }, 0);\r\n            });\r\n\r\n            // Calculate sum of parent.\r\n            let sumOfParent = data.dataPoints.reduce((sum, dataPoint) => {\r\n                if (dataPoint[dimension] === parent) {\r\n                    sum +=\r\n                        dataPoint.value * common.parseScale(dataPoint.scale) * common.parseInverse(dataPoint.inverse);\r\n                }\r\n                return sum;\r\n            }, 0);\r\n\r\n            // Calculate delta.\r\n            if (this.project.calculateDeltaByAddingChildren) {\r\n                data.delta = sumOfParent + sumOfChildren;\r\n            } else {\r\n                data.delta = sumOfParent - sumOfChildren;\r\n            }\r\n\r\n            // Is it valid?\r\n            data.valid = common.isDeltaZero(data.delta);\r\n\r\n            return data;\r\n        });\r\n\r\n        // Count valid groups.\r\n        const valid = groups.reduce((total, group) => {\r\n            return total + (group.valid ? 1 : 0);\r\n        }, 0);\r\n\r\n        return {\r\n            groups: groups,\r\n            valid: valid,\r\n            invalid: groups.length - valid\r\n        };\r\n    }\r\n}\r\n","import { cloneDeep } from 'lodash';\r\nimport { common } from '../../../Common';\r\nimport { constants } from '../../../Constants';\r\nimport { storageService } from '../../../services/StorageService';\r\nimport { SourceDataStructureSets } from '../../../tabs/source-data/source-data-structures/SourceDataStructureSets';\r\nimport { SourceDataStructureValidator } from '../../../tabs/source-data/source-data-structures/SourceDataStructureValidator';\r\nimport { sourceDataService } from '../../../tabs/source-data/SourceDataService';\r\n\r\nexport class SourceDataStructures {\r\n    constructor(container, saveHandler, highlightChanges = false, sidebarDimensionSelector = false) {\r\n        this.container = container;\r\n        /** @type {Function} */\r\n        this.saveHandler = saveHandler;\r\n        /** @type {Project} */\r\n        this.project = null;\r\n        this.structuresTable = this.container.find('._dataStructuresTable');\r\n        this.setsTable = this.container.find('._setsTable');\r\n        this.filterByState = this.container.find('._filterByState');\r\n        this.sourceDataStructureValidator = new SourceDataStructureValidator();\r\n        this.sourceDataStructureSets = new SourceDataStructureSets(this.container, this.saveHandler);\r\n        this.isSyncing = false;\r\n        this.inUpdatedLayout = false;\r\n        let dimensionSelectorLocation = '';\r\n        if (sidebarDimensionSelector) {\r\n            dimensionSelectorLocation = this.container\r\n                .closest('._content')\r\n                .siblings('.main-sidebar')\r\n                .find('#source_data_files_sidebar ._top')\r\n                .append('<section class=\"_sidebar-dimension-selector\"></section>');\r\n\r\n            this.container.find('._submenu').appendTo(dimensionSelectorLocation.find('._sidebar-dimension-selector'));\r\n            dimensionSelectorLocation = dimensionSelectorLocation.find('._sidebar-dimension-selector');\r\n        } else {\r\n            dimensionSelectorLocation = this.container.find('._dimension-selector')[0];\r\n        }\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            this.dimensionSelect = new wijmo.input.ComboBox(dimensionSelectorLocation, {\r\n                placeholder: 'Select Dimension',\r\n                itemsSource: [],\r\n                displayMemberPath: 'label',\r\n                onSelectedIndexChanged: () => {\r\n                    if (!this.isSyncing) {\r\n                        this.syncFlexGrid();\r\n                    }\r\n                }\r\n            });\r\n        if (!localStorage.getItem('blobExcelData'))\r\n            this.flexgrid = new wijmo.grid.FlexGrid(this.structuresTable[0], {\r\n                isReadOnly: false,\r\n                selectionMode: 'Cell',\r\n                itemsSource: [],\r\n                autoGenerateColumns: false,\r\n                childItemsPath: 'children',\r\n                columns: [],\r\n                formatItem: (s, e) => {\r\n                    if (e.panel === s.cells) {\r\n                        let color = '';\r\n                        let backgroundColor = '';\r\n                        const item = s.rows[e.row].dataItem;\r\n\r\n                        if (highlightChanges && item.dataStructure) {\r\n                            const dimension = this.getSelectedDimension();\r\n                            const ds = this.project.getDataStructuresForDimension(dimension.slug)[\r\n                                item.dataStructure.attribute\r\n                            ];\r\n\r\n                            if (ds && ds.changed) {\r\n                                backgroundColor = '#49CAAE';\r\n                                color = '#333';\r\n                            }\r\n                        }\r\n                        // All rows must be editable, except for Groups.\r\n                        // This is necessary to set for hierarchical flexgrids.\r\n                        // See https://www.grapecity.com/en/forums/wijmo/flexgrid---hierarchical-vi\r\n                        s.rows[e.row].isReadOnly = !!item.group;\r\n\r\n                        switch (s.columns[e.col].binding) {\r\n                            case 'title':\r\n                                // Add invisible arrow to have all rows properly aligned.\r\n                                if (e.cell.innerHTML.indexOf('wj-elem-collapse') === -1) {\r\n                                    e.cell.innerHTML =\r\n                                        '<span class=\"wj-elem-collapse wj-glyph-down-right _hidden\"></span>' +\r\n                                        e.cell.innerHTML;\r\n                                }\r\n                                break;\r\n\r\n                            case 'validation':\r\n                                // Button\r\n                                if (item.validation) {\r\n                                    e.cell.innerHTML +=\r\n                                        '<button class=\"_view-sets btn btn-sm btn-default\">More</button>';\r\n                                }\r\n\r\n                                // Color\r\n                                if (item.invalid === 0) {\r\n                                    color = 'green';\r\n                                } else {\r\n                                    color = 'red';\r\n                                }\r\n                                break;\r\n                        }\r\n                        e.cell.style.color = color;\r\n                        e.cell.style.backgroundColor = backgroundColor;\r\n                    }\r\n                },\r\n                updatedView: () => {\r\n                    if (this.inUpdatedLayout) {\r\n                        this.inUpdatedLayout = false;\r\n                    } else {\r\n                        this.inUpdatedLayout = true;\r\n                        this.flexgrid.autoSizeRow(0, true);\r\n                    }\r\n                },\r\n                beginningEdit: (s, e) => {\r\n                    const col = s.columns[e.col];\r\n                    const dataPoint = s.rows[e.row].dataItem;\r\n\r\n                    // User is allowed to edit?\r\n                    if (col.binding === 'dataStructure.group') {\r\n                        const parent = dataPoint.dataStructure.parentAttribute;\r\n                        if (!parent) {\r\n                            alert(constants.CANNOT_SET_GROUP_IF_NO_PARENT);\r\n                            e.cancel = true;\r\n                            return;\r\n                        }\r\n                    }\r\n                },\r\n                cellEditEnding: (s, e) => {\r\n                    const oldVal = s.getCellData(e.row, e.col);\r\n                    const newVal = s.activeEditor.value;\r\n                    const dataType = s.columns[e.col].dataType;\r\n                    e.cancel = common.checkIfCellHasChanged(oldVal, newVal, dataType);\r\n                },\r\n                cellEditEnded: (s, e) => {\r\n                    // Edit was cancelled?\r\n                    if (e.cancel) {\r\n                        return;\r\n                    }\r\n\r\n                    // TODO: Show loading screen.\r\n                    const dataItem = s.rows[e.row].dataItem;\r\n                    /** @type {DataStructure} */\r\n                    const dataStructure = dataItem.dataStructure;\r\n                    const ds = this.project.addDataStructure(\r\n                        this.dimensionSelect.selectedItem.slug,\r\n                        dataItem.value,\r\n                        dataStructure.parentAttribute,\r\n                        dataStructure.group,\r\n                        dataStructure.globalTerm,\r\n                        dataStructure.timeIntervalBegin,\r\n                        dataStructure.timeIntervalEnd\r\n                    );\r\n\r\n                    if (highlightChanges) {\r\n                        ds.changed = true;\r\n                    }\r\n\r\n                    this.saveHandler();\r\n                }\r\n            });\r\n\r\n        this.container.on('click', '._view-sets', e => {\r\n            const ht = this.flexgrid.hitTest(e);\r\n            if (!ht) {\r\n                return;\r\n            }\r\n\r\n            let dataItem = this.flexgrid.rows[ht._row].dataItem;\r\n            if (!dataItem.groups) {\r\n                return;\r\n            }\r\n            dataItem = Object.assign({}, dataItem);\r\n            dataItem.dimension = this.getSelectedDimension();\r\n\r\n            this.container.find('._back').show();\r\n            this.container.find('._auto-reconcile').show();\r\n            this.setsTable.show();\r\n            this.filterByState.show();\r\n            this.structuresTable.hide();\r\n            this.container.find('._dimension-selector').hide();\r\n\r\n            this.sourceDataStructureSets.setData(dataItem);\r\n        });\r\n\r\n        this.container.find('._back').on('click', () => {\r\n            this.container.find('._back').hide();\r\n            this.container.find('._auto-reconcile').hide();\r\n            this.setsTable.hide();\r\n            this.filterByState.hide();\r\n            this.structuresTable.show();\r\n            this.container.find('._dimension-selector').show();\r\n\r\n            this.sync();\r\n\r\n            // Force flexgrid to refresh.\r\n            window.dispatchEvent(new Event('resize'));\r\n        });\r\n\r\n        this.container.find('._back-source-data-main').on('click', () => {\r\n            this.container.find('._back-source-data-main').hide();\r\n            this.structuresTable.show();\r\n\r\n            // Force flexgrid to refresh.\r\n            window.dispatchEvent(new Event('resize'));\r\n        });\r\n    }\r\n\r\n    setProject(project) {\r\n        this.project = project;\r\n        this.sourceDataStructureSets.setProject(project);\r\n        this.sourceDataStructureValidator.setProject(project);\r\n    }\r\n\r\n    sync() {\r\n        // Prevent multiple runs.\r\n        if (this.isSyncing) {\r\n            return;\r\n        }\r\n        this.isSyncing = true;\r\n\r\n        this.sourceDataStructureSets.sync();\r\n\r\n        // Get dimensions that have data structures or global terms.\r\n        let selectedDimension = this.getSelectedDimension() || null;\r\n        let dimensions = this.project.getDimensions();\r\n        dimensions = dimensions.filter(dimension => {\r\n            return dimension.hasDataStructures || dimension.hasGlobalTerms || dimension.hasTimeIntervals;\r\n        });\r\n        this.dimensionSelect.itemsSource = dimensions;\r\n        this.dimensionSelect.selectedItem = selectedDimension;\r\n\r\n        this.syncFlexGrid();\r\n\r\n        this.isSyncing = false;\r\n    }\r\n\r\n    syncFlexGrid() {\r\n        let gridCol;\r\n        this.flexgrid.columns.length = 0;\r\n        const selectedItem = this.dimensionSelect.selectedItem || {};\r\n        // Value\r\n        gridCol = new wijmo.grid.Column();\r\n        gridCol.header = 'Value';\r\n        gridCol.binding = 'title';\r\n        gridCol.width = '*';\r\n        gridCol.isReadOnly = true;\r\n        this.flexgrid.columns.push(gridCol);\r\n\r\n        if (selectedItem.hasDataStructures) {\r\n            // Parent\r\n            {\r\n                gridCol = new wijmo.grid.Column();\r\n                gridCol.header = 'Parent';\r\n                gridCol.binding = 'dataStructure.parentAttribute';\r\n                gridCol.width = '*';\r\n\r\n                // Get dataMap.\r\n                const dimension = Object.assign({}, selectedItem);\r\n                dimension.isParent = true;\r\n                dimension.attribute = selectedItem.slug;\r\n                gridCol.dataMap = sourceDataService.getDataMapForDimension(dimension, this.project);\r\n\r\n                this.flexgrid.columns.push(gridCol);\r\n            }\r\n\r\n            // Group\r\n            {\r\n                gridCol = new wijmo.grid.Column();\r\n                gridCol.header = 'Group';\r\n                gridCol.binding = 'dataStructure.group';\r\n                gridCol.width = '*';\r\n\r\n                // Get dataMap.\r\n                const dimension = Object.assign({}, selectedItem);\r\n                dimension.isGroup = true;\r\n                dimension.attribute = selectedItem.slug;\r\n                gridCol.dataMap = sourceDataService.getDataMapForDimension(dimension, this.project);\r\n\r\n                this.flexgrid.columns.push(gridCol);\r\n            }\r\n        }\r\n\r\n        // Global term\r\n        if (selectedItem.hasGlobalTerms) {\r\n            gridCol = new wijmo.grid.Column();\r\n            gridCol.header = 'Global Term';\r\n            gridCol.binding = 'dataStructure.globalTerm';\r\n            gridCol.width = '*';\r\n\r\n            // Get dataMap.\r\n            const dimension = Object.assign({}, selectedItem);\r\n            dimension.isGlobalTerm = true;\r\n            gridCol.dataMap = sourceDataService.getDataMapForDimension(dimension, this.project);\r\n\r\n            this.flexgrid.columns.push(gridCol);\r\n        }\r\n\r\n        // Time interval\r\n        if (selectedItem.hasTimeIntervals) {\r\n            gridCol = new wijmo.grid.Column();\r\n            gridCol.header = 'Begin';\r\n            gridCol.binding = 'dataStructure.timeIntervalBegin';\r\n            gridCol.width = '*';\r\n            gridCol.dataType = wijmo.DataType.Date;\r\n            gridCol.format = 'yyyy-MM-dd';\r\n            this.flexgrid.columns.push(gridCol);\r\n            common.createDatePickerEditor(this.flexgrid.columns.getColumn(gridCol.binding));\r\n\r\n            gridCol = new wijmo.grid.Column();\r\n            gridCol.header = 'End';\r\n            gridCol.binding = 'dataStructure.timeIntervalEnd';\r\n            gridCol.width = '*';\r\n            gridCol.dataType = wijmo.DataType.Date;\r\n            gridCol.format = 'yyyy-MM-dd';\r\n            this.flexgrid.columns.push(gridCol);\r\n            common.createDatePickerEditor(this.flexgrid.columns.getColumn(gridCol.binding));\r\n        }\r\n\r\n        // Validation\r\n        if (selectedItem.hasDataStructures) {\r\n            gridCol = new wijmo.grid.Column();\r\n            gridCol.header = 'Validation';\r\n            gridCol.binding = 'validation';\r\n            gridCol.width = 210;\r\n            gridCol.isReadOnly = true;\r\n            this.flexgrid.columns.push(gridCol);\r\n        }\r\n\r\n        this.flexgrid.itemsSource = this.getDataStructuresTree('');\r\n    }\r\n\r\n    /** @type {Dimension} */\r\n    getSelectedDimension() {\r\n        return this.dimensionSelect.selectedItem;\r\n    }\r\n\r\n    getDataStructuresTree(parent, group) {\r\n        const dimension = this.getSelectedDimension();\r\n        if (!dimension) {\r\n            return;\r\n        }\r\n        const dataStructures = cloneDeep(this.project.getDataStructuresForDimension(dimension.slug));\r\n        let values = common.getUniqueValues(this.project.dataPoints, dimension.slug);\r\n        const tree = [];\r\n\r\n        // Filter.\r\n        let hasGroups = false;\r\n        values = values.filter(value => {\r\n            const ds = dataStructures[value];\r\n            const dsParentAttribute = !ds ? '' : ds.parentAttribute;\r\n            const dsGroup = !ds ? '' : ds.group;\r\n\r\n            // Check parent. Special case if parent doesn't exist - put it in the root.\r\n            if (parent !== dsParentAttribute && !(parent === '' && values.indexOf(dsParentAttribute) === -1)) {\r\n                return false;\r\n            }\r\n\r\n            // Check group. Special case if group is missing - put into \"Others\".\r\n            if (group && group !== dsGroup && !(group === 'Others' && dsGroup === '')) {\r\n                return false;\r\n            }\r\n\r\n            // Do we have groups?\r\n            if (!group && dsGroup) {\r\n                hasGroups = true;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        // Do we have at least one group?\r\n        if (hasGroups) {\r\n            // Make groups.\r\n            const groups = [];\r\n            values.forEach(value => {\r\n                const ds = dataStructures[value];\r\n                let dsGroup = !ds ? '' : ds.group;\r\n                dsGroup = dsGroup ? dsGroup : 'Others';\r\n                groups[dsGroup] = true;\r\n            });\r\n\r\n            // Create nodes for groups.\r\n            for (const groupTitle in groups) {\r\n                const node = {\r\n                    title: groupTitle,\r\n                    value: parent, // Required for validation and auto-reconciliation.\r\n                    group: groupTitle,\r\n                    children: this.getDataStructuresTree(parent, groupTitle)\r\n                };\r\n                this.validateNode(node);\r\n                tree.push(node);\r\n            }\r\n        } else {\r\n            values.forEach(value => {\r\n                const ds = dataStructures[value];\r\n                const node = {\r\n                    title: value,\r\n                    value: value,\r\n                    dataStructure: ds || {},\r\n                    children: this.getDataStructuresTree(value)\r\n                };\r\n                this.validateNode(node);\r\n                tree.push(node);\r\n            });\r\n        }\r\n\r\n        return tree;\r\n    }\r\n\r\n    validateNode(node) {\r\n        const dimension = this.getSelectedDimension();\r\n        let hasGroups = false;\r\n        node.childValues = node.children.map(child => {\r\n            if (child.group) {\r\n                hasGroups = true;\r\n            }\r\n            return child.value;\r\n        });\r\n\r\n        if (!hasGroups && node.children.length > 0) {\r\n            const result = this.sourceDataStructureValidator.validateParentAndChildren(\r\n                dimension.slug,\r\n                node.value,\r\n                node.childValues\r\n            );\r\n            Object.assign(node, result);\r\n            if (result.invalid === 0) {\r\n                node.validation = 'All ' + result.valid + ' sets valid';\r\n            } else {\r\n                node.validation = result.invalid + '/' + result.groups.length + ' sets invalid';\r\n            }\r\n        }\r\n    }\r\n\r\n    addDataStructuresFromProject(project) {\r\n        if (!project) {\r\n            return;\r\n        }\r\n\r\n        const currentProject = storageService.getCurrentProject();\r\n\r\n        for (let dimension in project.dataStructuresPerDimension) {\r\n            const dataStructures = project.dataStructuresPerDimension[dimension];\r\n            for (let value in dataStructures) {\r\n                /** @type {DataStructure} */\r\n                const dataStructure = dataStructures[value];\r\n\r\n                if (!dataStructure.changed) {\r\n                    continue;\r\n                }\r\n\r\n                currentProject.addDataStructure(\r\n                    dimension,\r\n                    value,\r\n                    dataStructure.parentAttribute,\r\n                    dataStructure.group,\r\n                    dataStructure.globalTerm,\r\n                    dataStructure.timeIntervalBegin,\r\n                    dataStructure.timeIntervalEnd\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}