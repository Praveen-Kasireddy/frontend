/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 95);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__entities_Project__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tabs_data_explorer_DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabs_data_explorer_DataExplorerStorage__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_DatabaseView__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__tabs_dropbox_Dropbox__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__tabs_project_setup_ProjectSetup__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceData__ = __webpack_require__(21);









class StorageService {
    constructor() {
        this.CURRENT_PROJECT_KEY = 'current_project_key';
        this.CURRENT_TAB_KEY = 'current_tab';
        this.DATA_COCKPIT_COLUMNS_KEY = 'data_cockpit_columns';

        this.keyPrefix = 'project_';

        /** @type {Project} */
        this.currentProject = null;

        this.currentProjectKey = null;
    }

    getDefaultProjectKey() {
        return localStorage.getItem(this.CURRENT_PROJECT_KEY);
    }

    setDefaultProjectKey(key) {
        localStorage.setItem(this.CURRENT_PROJECT_KEY, key);
    }

    /** @type {Project} */
    getCurrentProject() {
        return this.currentProject;
    }

    getCurrentDataPoints() {
        return this.currentProject.dataPoints;
    }

    /**
     * Get projects as key-name pairs.
     * @returns {Object}
     */
    getAllProjects() {
        let keys = Object.keys(localStorage);
        let dbs = {};

        for (let i = 0; i < keys.length; i++) {
            let key = keys[i];

            // Check if prefix matches.
            if (typeof key !== 'string' || key.indexOf(this.keyPrefix) !== 0) {
                continue;
            }

            let db = this.getProject(key);

            dbs[key] = db.name;
        }

        return dbs;
    }

    getAllProjectsSorted() {
        let dbs = this.getAllProjects();
        let sorted = [];

        for (let i in dbs) {
            sorted.push({
                key: i,
                name: dbs[i]
            });
        }

        sorted.sort((a, b) => {
            if (a.name < b.name) {
                return -1;
            }
            if (a.name > b.name) {
                return 1;
            }
            return 0;
        });

        return sorted;
    }

    /**
     * Create a new project and return its key.
     */
    addProject(project) {
        let key = this.keyPrefix + __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getNextUuid();
        localStorage.setItem(key, JSON.stringify(project));

        return key;
    }

    getProject(key) {
        let data = localStorage.getItem(key);

        if (data) {
            data = JSON.parse(data);
        }

        return new __WEBPACK_IMPORTED_MODULE_1__entities_Project__["a" /* Project */](data);
    }

    setProject(key, project) {
        localStorage.setItem(key, JSON.stringify(project));
    }

    setCurrentProject(key) {
        let project = this.getProject(key);

        if (project) {
            localStorage.setItem('currentProject', JSON.stringify(project));
            this.currentProject = project;
            this.currentProjectKey = key;
            this.setDefaultProjectKey(key);
            this.syncViews();
        }
    }

    syncViews(onlyIfDirty) {
        console.log('syncViews');
        __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceData__["a" /* sourceData */].syncIfVisible(onlyIfDirty);
        __WEBPACK_IMPORTED_MODULE_2__tabs_data_explorer_DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].syncIfVisible(onlyIfDirty);
        __WEBPACK_IMPORTED_MODULE_6__tabs_project_setup_ProjectSetup__["a" /* projectSetup */].syncIfVisible(onlyIfDirty);
        __WEBPACK_IMPORTED_MODULE_5__tabs_dropbox_Dropbox__["a" /* dropbox */].syncIfVisible(onlyIfDirty);
        __WEBPACK_IMPORTED_MODULE_4__tabs_DatabaseView__["a" /* databaseView */].syncWithDatabase();
        __WEBPACK_IMPORTED_MODULE_3__tabs_data_explorer_DataExplorerStorage__["a" /* dataExplorerStorage */].load();
    }

    loadDefaultProjects() {
        let key = this.getDefaultProjectKey();

        if (!key) {
            // this.addProject(sampleProject.getNewProject());

            //key = this.addProject(maxGroupProject.getNewProject());
            this.setDefaultProjectKey(key);
        }

        this.setCurrentProject(key);
    }

    saveCurrentProject(projectKey, project) {
        this.setProject(projectKey, project);
    }
    saveCurrentProject() {
        this.setProject(this.currentProjectKey, this.currentProject);
    }

    removeCurrentProject() {
        localStorage.removeItem(this.currentProjectKey);

        // Set another project as default.
        let dbs = this.getAllProjects();
        for (let key in dbs) {
            this.setCurrentProject(key);
            return;
        }

        // No other project? Load the default one.
        localStorage.removeItem(this.CURRENT_PROJECT_KEY);
        this.loadDefaultProjects();
    }

    setCurrentTab(tab) {
        localStorage.setItem(this.CURRENT_TAB_KEY, tab);
    }

    getCurrentTab() {
        return localStorage.getItem(this.CURRENT_TAB_KEY);
    }

    get(key) {
        try {
            return JSON.parse(localStorage.getItem(key));
        } catch (e) {}

        return null;
    }

    set(key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    }
}

const storageService = new StorageService();
/* harmony export (immutable) */ __webpack_exports__["a"] = storageService;



/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__datasets_global_terms__ = __webpack_require__(96);



class Common {
    constructor() {
        this.formatter = new Intl.NumberFormat('en-US', {
            minimumFractionDigits: 1,
            maximumFractionDigits: 1
        });
    }

    formatNumber(value) {
        // If the number is zero, avoid showing "(0.0)" due to rounding errors.
        if (common.isDeltaZero(value)) {
            value = 0;
        }

        if (value < 0) {
            value = '(' + common.formatter.format(-value) + ')';
        } else {
            value = common.formatter.format(value);
        }

        return value;
    }

    formatPercent(value) {
        return this.formatNumber(value * 100) + ' %';
    }

    parseScale(scale) {
        if (!scale) {
            scale = 1;
        }

        if (typeof scale === 'string' && parseInt(scale) === 0) {
            scale = '1' + scale;
        }

        scale = parseInt(scale);

        return scale;
    }

    parseInverse(inverse) {
        if (inverse === 'No' || inverse === undefined || inverse === '') {
            inverse = 1;
        } else if (inverse === 'Yes') {
            inverse = -1;
        }

        return inverse;
    }

    getUniqueValues(data, property) {
        let names = {};
        let a = [];

        // Get all possible names.
        for (let i = 0; i < data.length; i++) {
            if (property in data[i] && data[i][property]) {
                names[data[i][property]] = true;
            }
        }

        // Convert to array.
        for (let j in names) {
            a.push(j);
        }

        return a;
    }

    getSlugFromName(name) {
        // Replace non-alphanumeric with underline.
        name = name.replace(/[^A-Za-z0-9]/g, '_');

        // Replace successive underlines with a single underline.
        name = name.replace(/[_]+/g, '_');

        // Lower case everything.
        name = name.toLowerCase();

        return name;
    }

    // https://stackoverflow.com/a/13542669
    shadeColor2(color, percent) {
        let f = parseInt(color.slice(1), 16),
            t = percent < 0 ? 0 : 255,
            p = percent < 0 ? percent * -1 : percent,
            R = f >> 16,
            G = (f >> 8) & 0x00ff,
            B = f & 0x0000ff;
        return (
            '#' +
            (
                0x1000000 +
                (Math.round((t - R) * p) + R) * 0x10000 +
                (Math.round((t - G) * p) + G) * 0x100 +
                (Math.round((t - B) * p) + B)
            )
                .toString(16)
                .slice(1)
        );
    }

    // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
    getNextUuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            let r = (Math.random() * 16) | 0,
                v = c === 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    }

    getGlobalTerms() {
        let globalTermsValues = [];

        __WEBPACK_IMPORTED_MODULE_1__datasets_global_terms__["a" /* globalTerms */].map(term => {
            globalTermsValues.push(term.name);
        });

        return globalTermsValues;
    }

    getGlobalTermsDictionaries() {
        let dictionaries = [];

        __WEBPACK_IMPORTED_MODULE_1__datasets_global_terms__["a" /* globalTerms */].map(term => {
            dictionaries = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(dictionaries, term.dictionaries);
        });

        return dictionaries;
    }

    getGlobalTermsByDictionary(dictionary) {
        let globalTermsValues = [];

        __WEBPACK_IMPORTED_MODULE_1__datasets_global_terms__["a" /* globalTerms */].map(term => {
            if ($.inArray(dictionary, term.dictionaries) !== -1) {
                globalTermsValues.push(term.name);
            }
        });

        return globalTermsValues;
    }

    async showFakeLoading(callback) {
        await this.showLoading();

        setTimeout(() => {
            if (callback) {
                callback();
            }
            this.hideLoading();
        }, Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["random"])(250, 500));
    }

    async showLoading() {
        $('._show-loading').css('display', 'block');

        // Wait 50ms, otherwise the UI won't render and the user won't see any loading screen while other heavy code is running.
        await this.wait(50);
    }

    hideLoading() {
        $('._show-loading').css('display', 'none');
    }

    areIdentical(a, b) {
        if (a === b) {
            return true;
        }

        const fa = parseFloat(a);
        const fb = parseFloat(b);
        if (!Number.isNaN(fa) && !Number.isNaN(fb) && this.isDeltaZero(fa - fb)) {
            return true;
        }

        return false;
    }

    isDeltaZero(delta) {
        return Math.abs(delta) < 0.00000001;
    }

    // https://www.grapecity.com/en/forums/wijmo/want-to-add-wijmo-5-input-_1
    // http://jsfiddle.net/ezk43f9d/102/
    createDatePickerEditor(editColumn) {
        const grid = editColumn.grid;
        grid.formatItem.addHandler(function(s, e) {
            const editRange = grid.editRange,
                column = e.panel.columns[e.col];

            // check whether this is an editing cell of the wanted column
            if (
                !(
                    e.panel.cellType === wijmo.grid.CellType.Cell &&
                    column === editColumn &&
                    editRange &&
                    editRange.row === e.row &&
                    editRange.col === e.col
                )
            ) {
                return;
            }

            // hide standard editor (don't remove!)
            if (e.cell.firstChild) {
                e.cell.firstChild.style.display = 'none';
            }

            // add custom InputNumber editor
            const editorRoot = document.createElement('div'),
                inputDate = new wijmo.input.InputDate(editorRoot, {
                    format: 'yyyy-MM-dd'
                });

            // inputDate.format = editColumn.format;
            e.cell.appendChild(editorRoot);
            const value = grid.getCellData(e.row, e.col, false);
            if (typeof value === 'string' && value) {
                inputDate.value = value;
            }

            const editEnding1 = (s, e) => {
                if (!e.cancel) {
                    // Update editor value.
                    const value = common.dateToString(inputDate.value);
                    s.activeEditor.value = value;
                }
            };

            const editEnding2 = (s, e) => {
                if (!e.cancel) {
                    // We use "_.set" because the binding can be something like "dataStructures.timeIntervalBegin".
                    // const value = s.activeEditor.value;
                    // set(s.rows[e.row].dataItem, column.binding, value);
                }

                // Remove events. We use a second event that fires only after all other events, otherwise => bugs.
                grid.cellEditEnding.removeHandler(editEnding1);
                grid.cellEditEnding.removeHandler(editEnding2);

                inputDate.dispose();
            };

            // Add handlers as first and last events. Order is important.
            const handlers = grid.cellEditEnding._handlers.slice(0);
            grid.cellEditEnding.removeAllHandlers();
            grid.cellEditEnding.addHandler(editEnding1);
            handlers.forEach(handler => {
                grid.cellEditEnding.addHandler(handler.handler);
            });
            grid.cellEditEnding.addHandler(editEnding2);
        });
    }

    checkIfCellHasChanged(oldVal, newVal, dataType) {
        // Check if value has been changed.
        if (dataType === wijmo.DataType.Date) {
            const oldValString = common.dateToString(oldVal);
            if (oldValString === newVal) {
                return true;
            }
        } else if ((typeof oldVal === 'string' && oldVal === newVal) || common.isDeltaZero(oldVal - newVal)) {
            return true;
        }

        return false;
    }

    removeTimeZoneFromDate(s) {
        return common.stringToDate(common.dateToString(s));
    }

    stringToDate(s) {
        if (typeof s === 'string') {
            // Create moment object without timezone.
            s = s.split('-');
            const m = moment.utc({
                year: s[0],
                month: s[1] - 1,
                day: s[2]
            });

            // Convert to date object.
            return m.toDate();
        }

        return s;
    }

    dateToString(s) {
        if (typeof s === 'object') {
            // Get date with timezone.
            const m1 = moment(s);

            // Recreate date without timezone.
            const m2 = moment.utc({
                year: m1.year(),
                month: m1.month(),
                day: m1.date()
            });

            return m2.format('YYYY-MM-DD');
        }

        return s;
    }

    // This is something that Wijmo should have out-of-the-box.
    setSelectedValue(wijmoComponent, selectedValue) {
        for (let i = 0; i < wijmoComponent.itemsSource.length; i++) {
            const item = wijmoComponent.itemsSource[i];

            if (item[wijmoComponent.selectedValuePath] === selectedValue) {
                wijmoComponent.selectedItem = item;
                return;
            }
        }

        wijmoComponent.selectedItem = null;
    }

    // https://stackoverflow.com/a/39027151/148388
    wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

const common = new Common();
/* harmony export (immutable) */ __webpack_exports__["a"] = common;



/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.11';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(60), __webpack_require__(25)(module)))

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__entities_DataExplorerAnalysis__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ResizableDivider__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Tab__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__DataExplorer__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__DataExplorerStorage__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__table_DataExplorerRenderTable__ = __webpack_require__(35);











class DataExplorerAnalyses extends __WEBPACK_IMPORTED_MODULE_5__Tab__["a" /* Tab */] {
    constructor() {
        super();
        this.tabHref = '#output_table';
        this.currentAnalysisId = 0;
    }

    init() {
        __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].init();

        // Hide single analysis div.
        $('#single_analysis').css('display', 'none');

        // Display all analyses.
        this.displayAnalyses();
        $(document).on('click', '#analyses_list ._analyses-list ._analysis', e => this.loadAnalysis(e));

        $('#single_analysis ._back-to-list').on('click', () => this.backToList());

        $('#analyses_list ._add-analysis').on('click', () => this.addNewAnalysis());

        $('#single_analysis ._edit-mode-switch input').on('change', () => this.toggleEditMode());
        $('#single_analysis ._split-screen-mode-switch input').on('change', () => this.toggleSplitScreenMode());

        $(document).on('click', '#data_explorer_imported_table ._file-tab ', e => this.switchTab(e));
    }

    sync() {
        this.displayAnalyses();
    }

    switchTab(e) {
        const uuid = $(e.target).data('uuid');
        if (uuid === __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].uuid) {
            return;
        }

        __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].uuid = uuid;
        $('.main-content #data_explorer_imported_table').remove();
        __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].splitScreen();
        __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].createRightTable(uuid);
        __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].refreshFilesTabs();
    }

    toggleSplitScreenMode() {
        const checked = $('#single_analysis ._split-screen-mode-switch input').is(':checked');
        if (checked) {
            __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].splitScreen();

            __WEBPACK_IMPORTED_MODULE_3__ResizableDivider__["a" /* resizableDivider */].enableResizable(
                '.main-content > .tab-content',
                '#data_explorer_imported_table',
                'width',
                { handles: 'e' },
                { minWidth: 700, maxWidth: 1200 },
                () => {
                    __WEBPACK_IMPORTED_MODULE_9__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].updateTable();
                }
            );

            const dataExplorerAnalysis = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject().analyses[
                dataExplorerAnalyses.currentAnalysisId
            ];
            if (dataExplorerAnalysis.dropboxFiles.length) {
                const uuid = dataExplorerAnalysis.dropboxFiles[0];
                __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].uuid = uuid;
                __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].createRightTable(uuid);
            }

            __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].refreshFilesTabs();
        } else {
            __WEBPACK_IMPORTED_MODULE_3__ResizableDivider__["a" /* resizableDivider */].resetResizable('.main-content > .tab-content', () => {
                __WEBPACK_IMPORTED_MODULE_9__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].updateTable();
            });

            __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].cancelImport();
        }
    }

    toggleEditMode() {
        if (!localStorage.getItem('blobExcelData'))
            __WEBPACK_IMPORTED_MODULE_9__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.isReadOnly = !$('#single_analysis ._edit-mode-switch input').is(
                ':checked'
            );
    }

    loadAnalysis(e) {
        $('#analyses_list').css('display', 'none');
        $('#single_analysis').css('display', '');
        this.currentAnalysisId = $(e.currentTarget).data('id');
        $('#single_analysis ._analysis-title h3').text(
            __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject().analyses[this.currentAnalysisId].name
        );

        $('._outputMode input[value=table]')
            .prop('checked', true)
            .trigger('change');
        __WEBPACK_IMPORTED_MODULE_8__DataExplorerStorage__["a" /* dataExplorerStorage */].load();
    }

    addNewAnalysis() {
        const analysisName = prompt('Please enter the name of the analysis: ');
        if (analysisName === null) {
            return;
        }

        const analysisId = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject().analyses.length;
        const newAnalysis = new __WEBPACK_IMPORTED_MODULE_2__entities_DataExplorerAnalysis__["a" /* DataExplorerAnalysis */]({
            id: analysisId,
            name: analysisName
        });
        __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject().analyses.push(newAnalysis);

        // Save project.
        __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].syncViews();
    }

    backToList() {
        $('#analyses_list').css('display', '');
        $('#single_analysis').css('display', 'none');

        $('#single_analysis ._edit-mode-switch input').prop('checked', false);
        $('#single_analysis ._split-screen-mode-switch input').prop('checked', false);
        if (!localStorage.getItem('blobExcelData')) __WEBPACK_IMPORTED_MODULE_9__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.isReadOnly = true;

        __WEBPACK_IMPORTED_MODULE_7__DataExplorerImport__["a" /* dataExplorerImport */].cancelImport();
    }

    displayAnalyses() {
        __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].showFakeLoading(() => {
            const project = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject();
            const analyses = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(project, 'analyses', false);
            if (!analyses) {
                return;
            }

            $('#analyses_list ._analyses-list').empty();
            analyses.map(analysis => {
                $('#analyses_list ._analyses-list').append(
                    '<div class="_analysis" data-id="' + analysis.id + '">' + analysis.name + '</div>'
                );
            });
        });
    }
}

const dataExplorerAnalyses = new DataExplorerAnalyses();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerAnalyses;



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__source_data_structures_SourceDataStructures__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__SourceData__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__SourceDataPointsSidebar__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__FileWorkflowLegend__ = __webpack_require__(209);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__SourceDataEditTableCell__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__SourceDataFilesReviewTable__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__SourceDataTableCellModal__ = __webpack_require__(92);














class SourceDataFilesSidebar {
    constructor() {
        this.selectedItem = null;
        this.container = $('#source_data_files_pre_ingestion');
        this.dataStructuresContainer = this.container.find('._data-structures');
        this.sourceDataStructures = new __WEBPACK_IMPORTED_MODULE_4__source_data_structures_SourceDataStructures__["a" /* SourceDataStructures */](
            this.dataStructuresContainer,
            () => {
                this.sourceDataStructures.sync();
            },
            true,
            true
        );
        this.columnDefs = [];
        this.fileWorkflowLegend = new __WEBPACK_IMPORTED_MODULE_9__FileWorkflowLegend__["a" /* FileWorkflowLegend */]($('#source_data_files_sidebar .legend-section ._colors'));
        this.hiddenCols = [];
        this.hiddenRows = [];
    }

    init() {
        __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].init();

        $('#source_data_files_sidebar ._dimensions-section ._column-selector').on('click', () => {
            this.updateDimensionsDropdown();
        });

        $('#source_data_files_sidebar ._ingestion-steps ._cancel').on('click', () => {
            __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].cancelWorkflow();
        });

        this.columnsSelect = new wijmo.input.MultiSelect(
            $('#source_data_files_sidebar ._dimensions-section ._column-selector')[0],
            {
                placeholder: 'Select Columns',
                itemsSource: [],
                headerFormat: '{count} columns selected',
                displayMemberPath: 'label',
                checkedMemberPath: 'selected',
                onCheckedItemsChanged: () => {
                    this.updateDimensions();
                }
            }
        );
        $('#source_data_files_sidebar ._dimensions-section ._add-custom-dimension').on('click', () => {
            __WEBPACK_IMPORTED_MODULE_7__SourceDataPointsSidebar__["a" /* sourceDataPointsSidebar */].addCustomDimension();
        });

        $('._hide-cells').on('change', function() {
            if ($(this).is(':checked')) {
                sourceDataFilesSidebar.hideCells();
            } else {
                sourceDataFilesSidebar.showHiddenCells();
            }
        });

        $('._dimensions-cog, ._range-global-visibility').on('click', e => {
            let $this;
            if ($(e.target).hasClass('_dimensions-cog')) {
                $this = $('._dimensions-section');
                this.toggleClassAndShowHide(e.target);
            } else {
                $this = $('._brush-container');
                this.toggleClassAndShowHide(e.target);
            }

            const visible = !$this.hasClass('_visible');
            $this.toggleClass('_visible', visible);
        });

        $(document.body).on('click', '._label-brush-range', e => {
            const cell = $(e.currentTarget);

            if (cell.attr('data-active') == null || cell.attr('data-active') === 'false') {
                __WEBPACK_IMPORTED_MODULE_10__SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].resetGridBorders();
                $('._label-brush-range').attr('data-active', false);
                $('._label-brush-range').removeClass('_active');

                cell.attr('data-active', true);
                cell.addClass('_active');
                let rangeText = cell.text();

                if (rangeText) {
                    let ranges = rangeText.split(',');
                    ranges.map(range => {
                        range = range.replace(/\s/g, '');
                        __WEBPACK_IMPORTED_MODULE_12__SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].highlightRangeCells(range);
                    });
                }
            } else {
                $('._label-brush-range').removeClass('_active');
                cell.attr('data-active', false);
                __WEBPACK_IMPORTED_MODULE_10__SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].resetGridBorders();
            }
        });

        __WEBPACK_IMPORTED_MODULE_11__SourceDataFilesReviewTable__["a" /* sourceDataFilesReviewTable */].init();
    }

    toggleClassAndShowHide(element) {
        const active = !$(element).hasClass('_active');
        $(element).toggleClass('_active', active);
    }

    showHiddenCells() {
        $('.hide-cells-container').css('background-color', '');

        const columnNumber = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().itemsSource[0].length;

        this.hiddenRows.map(row => {
            let minHeight = true;

            for (let col = 0; col < columnNumber; col++) {
                if (__WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.getCellData(row, col, true)) {
                    minHeight = false;
                    break;
                }
            }

            if (minHeight) {
                __WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.autoSizeRow(row, false, 20);
            } else {
                __WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.autoSizeRow(row);
            }
        });
        this.hiddenCols.map(col => __WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.autoSizeColumn(col));
    }

    hideCells() {
        $('.hide-cells-container').css('background-color', '#6e707d');
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const fileCellProperties = file.cellProperties;
        const tableSource = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], file.itemsSource);
        let hiddenRows = [],
            hiddenCols = [];

        // Check what rows to hide.
        tableSource.map((row, rowNumber) => {
            let hideRow = true;

            row.map((cell, colNumber) => {
                if (fileCellProperties.hasOwnProperty(colNumber)) {
                    if (fileCellProperties[colNumber].hasOwnProperty(rowNumber)) {
                        if (
                            fileCellProperties[colNumber][rowNumber].cellType === 'data' ||
                            fileCellProperties[colNumber][rowNumber].cellType === 'label'
                        ) {
                            hideRow = false;
                        } else {
                            delete fileCellProperties[colNumber][rowNumber];
                        }
                    }
                }
            });

            if (hideRow) {
                hiddenRows = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], hiddenRows, rowNumber);
            }
        });

        // Check what cols to hide.
        tableSource[0].map((col, colNumber) => {
            let hideCol = true;

            if (fileCellProperties.hasOwnProperty(colNumber)) {
                const columnArray = fileCellProperties[colNumber];
                Object.keys(columnArray).forEach(key => {
                    if (columnArray[key].cellType === 'data' || columnArray[key].cellType === 'label') {
                        hideCol = false;
                    } else {
                        delete columnArray[key];
                    }
                });
            }

            if (hideCol) {
                hiddenCols = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], hiddenCols, colNumber);
            }
        });
        hiddenCols.sort(function(a, b) {
            return b - a;
        });
        this.hiddenCols = hiddenCols;
        this.hiddenRows = hiddenRows;

        hiddenRows.map(row => (__WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.rows[row].height = 0));
        hiddenCols.map(col => (__WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.columns[col].width = 0));
    }

    sync() {
        // Last step table.
        __WEBPACK_IMPORTED_MODULE_11__SourceDataFilesReviewTable__["a" /* sourceDataFilesReviewTable */].sync();

        this.syncDimensionsColumns();
        this.fileWorkflowLegend.sync(this.columnDefs);
    }

    syncDimensionsColumns() {
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();

        this.columnDefs = this.getAvailableColumns();
        if (file) {
            if (file.formDimensions.length) {
                this.columnDefs.forEach(column => {
                    if (!__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.includes(file.formDimensions, column.slug)) {
                        column.selected = false;
                    }
                });
            }
        }

        this.columnsSelect.itemsSource = this.columnDefs;
        this.fileWorkflowLegend.sync(this.columnDefs);
        this.updateDimensionsDropdown();
    }

    getAvailableColumns(manual = false, table = false) {
        const cols = [];
        const project = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject();
        const dimensions = project.getDimensions();

        if (manual && table) {
            cols.push({
                slug: '__normalized_value',
                label: 'Normalized Value',
                selected: true,
                isReadOnly: true
            });
        }

        dimensions.forEach(dimension => {
            if (manual) {
                cols.push({
                    slug: dimension.slug,
                    label: dimension.label,
                    selected: true
                });
            } else if (dimension.slug !== 'value') {
                cols.push({
                    slug: dimension.slug,
                    label: dimension.label,
                    selected: true
                });
            }
        });

        return cols;
    }

    syncDimensionsContainer() {
        $('#source_data_files_sidebar ._dimensions-section ._add-custom-dimension').prop(
            'disabled',
            __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep > __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].DEFINE_DATA_STEP
        );
    }

    startWorkflow() {
        __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].setStep(__WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].DEFINE_DATA_STEP);

        // Copy current project and add new data points into it.
        const project = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject();
        __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].project = __WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep___default()(project);

        __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].defineLabelsStep();

        __WEBPACK_IMPORTED_MODULE_5__SourceData__["a" /* sourceData */].beginWorkflow();
    }

    displayLoadedFileSidebar() {
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();

        this.dataStructuresContainer.css(
            'display',
            __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep === __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].STRUCTURE_DATA_STEP ? '' : 'none'
        );
        if ($('.tab-pane.active').find('._sidebar-dimension-selector').length > 0) {
            $('.tab-pane.active ._sidebar-dimension-selector').css(
                'display',
                __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep === __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].STRUCTURE_DATA_STEP ? '' : 'none'
            );
        }

        if (__WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep !== __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].REVIEW_STEP) {
            $('#source_data_files_pre_ingestion ._review-table').hide();
            $('#source_data_files_pre_ingestion ._table').css('display', '');
        } else {
            $('#source_data_files_pre_ingestion ._review-table').css('display', '');
            $('#source_data_files_pre_ingestion ._table').hide();

            __WEBPACK_IMPORTED_MODULE_11__SourceDataFilesReviewTable__["a" /* sourceDataFilesReviewTable */].flexgrid.itemsSource = file.dataPoints;
            __WEBPACK_IMPORTED_MODULE_11__SourceDataFilesReviewTable__["a" /* sourceDataFilesReviewTable */].flexgrid.refresh();
        }

        // Hightlight selected step in ingestion header.
        $('#source_data_files_pre_ingestion ._ingestion-steps-display ._step').removeClass('highlight-step');
        $(
            '#source_data_files_pre_ingestion ._ingestion-steps-display ._step[data-step=' +
                __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep +
                ']'
        ).addClass('highlight-step');

        // Prev and next buttons
        $('#source_data_files_sidebar ._ingestion-steps ._next').text(
            __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep < 4 ? 'Next' : 'Finish'
        );
        switch (__WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep) {
            case 1:
                if ($('.brush-section > h4.hide').length) {
                    $('.brush-section > h4').removeClass('hide');
                }
                break;
        }

        $('#source_data_files_sidebar').css('display', '');

        // Refresh FlexGrid.
        window.dispatchEvent(new Event('resize'));

        this.syncDimensionsContainer();
        this.syncDimensionsColumns();

        // Display the Brushes list of dimensions.
        $('._label-brush-range').html('');
        const tableSource = __WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource;
        const dimensions = sourceDataFilesSidebar.columnDefs;
        dimensions.map((dimension, index) => {
            if (dimension.selected) {
                const div = $($('._brush._label-brush')[index]);
                const rangeDiv = $($('._label-brush-range')[index]);

                // Define range for each dimension.
                __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].defineRangeForEachDimension(tableSource, rangeDiv, div, file, dimension);
            }
        });

        $('#source_data_files_sidebar ._zoom-slider-container').css(
            'display',
            __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep > 2 ? 'none' : 'block'
        );
    }

    updateDimensions() {
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        file.formDimensions = [];
        this.columnDefs.forEach(column => {
            if (column.selected) {
                file.formDimensions = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], file.formDimensions, column.slug);
            }
        });
        this.fileWorkflowLegend.sync(this.columnDefs);
        // file.formDimensions = _.concat([], this.columnDefs);
        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].syncViews();
        __WEBPACK_IMPORTED_MODULE_6__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
    }

    updateDimensionsDropdown() {
        $('.wj-listbox-item input').prop('disabled', __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].ingestionStep > __WEBPACK_IMPORTED_MODULE_8__AddFileSteps__["a" /* addFileSteps */].DEFINE_DATA_STEP);
        $('.wj-listbox-item label').each(function() {
            if (
                $(this)
                    .text()
                    .replace(/\s/g, '') === 'Scale'
            ) {
                $(this)
                    .find('input')
                    .prop('disabled', true);
            }
        });
    }
}

const sourceDataFilesSidebar = new SourceDataFilesSidebar();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataFilesSidebar;



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__entities_VirtualTableCell__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorer__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DataExplorerSections__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__DataExplorerStorage__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__DataExplorerVirtualTable__ = __webpack_require__(8);









class DataExplorerHelper {
    constructor() {
        const dataExplorerHelper = this;

        String.prototype.replaceBetween = function(start, end, what) {
            return this.substring(0, start) + what + this.substring(end);
        };

        this.onStart = function(evt) {
            let s = '.item-group:not(._filters)';

            $(s).each(function() {
                if (!dataExplorerHelper.doTypesMatch(evt.item, this)) {
                    $(this).addClass('_disabled');
                } else {
                    $(this).removeClass('_disabled');
                }
            });
        };

        this.onEnd = function(evt) {
            $('.item-group').removeClass('_disabled');
            dataExplorerHelper.saveAndUpdate();
        };

        this.onMove = function(evt, originalEvent) {
            // Check for matching box types.
            if (!dataExplorerHelper.doTypesMatch(evt.dragged, evt.to)) {
                return false;
            }

            // Check for duplicates in other filter sections.
            if (
                evt.to !== evt.from &&
                $(evt.to).hasClass('_filters') &&
                dataExplorerHelper.getMatchingFilters(evt.dragged, evt.to) > 0
            ) {
                return false;
            }
            return true;
        };

        this.onSort = function(evt) {
            let container = $(evt.to);

            if (container.attr('data-rows') === '') {
                dataExplorerHelper.resetRowIds();
            } else if (container.attr('data-columns') === '') {
                dataExplorerHelper.resetColumnIds();
            }

            __WEBPACK_IMPORTED_MODULE_5__DataExplorerSections__["a" /* dataExplorerSections */].syncTitle($(evt.to).closest('.row-or-column-card'));
        };

        this.onAdd = function(evt) {
            __WEBPACK_IMPORTED_MODULE_5__DataExplorerSections__["a" /* dataExplorerSections */].syncTitle($(evt.from).closest('.row-or-column-card'));
            __WEBPACK_IMPORTED_MODULE_5__DataExplorerSections__["a" /* dataExplorerSections */].syncTitle($(evt.to).closest('.row-or-column-card'));
        };

        this.sortableArgs = {
            animation: 200,
            group: 'attributes',
            filter: '._filters, input, .modal, .remove-filter',
            preventOnFilter: false,
            onStart: this.onStart,
            onEnd: this.onEnd,
            onMove: this.onMove,
            onSort: this.onSort,
            onAdd: this.onAdd
        };

        this.sortableArgsForAttrs = $.extend({}, this.sortableArgs, {
            group: {
                name: 'attributes',
                pull: 'clone',
                put: true,
                revertClone: true
            },
            animation: 0,
            sort: false,
            onAdd: function(evt) {
                // Remove everything dropped here.
                $(evt.item).remove();
            },
            filter: '.remove-filter'
        });
    }

    isChartEnabledForItem(item) {
        return (
            $(item)
                .find('._chart')
                .attr('data-checked') === 'true'
        );
    }

    isChartEnabledForColumn(index) {
        return this.isChartEnabledForItem($('#column_box > .item:nth-child(' + index + ') '));
    }

    isChartEnabledForRow(index) {
        return this.isChartEnabledForItem($('#row_box > .item:nth-child(' + index + ') '));
    }

    getFiltersFromDom(domFilters) {
        let filtersByType = {};

        // Group filters by type.
        for (let i = 0; i < domFilters.length; i++) {
            let element = $(domFilters[i]);
            let value = element.attr('data-value');
            let type = element.attr('data-filter-type');

            if (!(type in filtersByType)) {
                filtersByType[type] = [];
            }

            filtersByType[type].push(value);
        }

        return filtersByType;
    }

    checkFilters(dataPoint, filters) {
        // Match filters.
        for (let dimension in filters) {
            let dimensionFilters = filters[dimension];
            let matches = false;

            if (typeof dimensionFilters === 'undefined') {
                continue;
            } else if (!Array.isArray(dimensionFilters)) {
                dimensionFilters = [dimensionFilters];
            }

            // Match at least one filter per type.
            for (let j = 0; j < dimensionFilters.length; j++) {
                let value = dimensionFilters[j];

                if (dataPoint[dimension] == value) {
                    matches = true;
                    break;
                }
            }

            if (!matches) {
                return false;
            }
        }

        return true;
    }

    getMatchingDataPoints(dataset, filters) {
        let dataPoints = [];

        dataset.forEach(dataPoint => {
            // Check if filters match.
            if (!this.checkFilters(dataPoint, filters)) {
                return;
            }

            dataPoints.push(dataPoint);
        });

        return dataPoints;
    }

    /**
     * Sum up values of all data points.
     *
     * @param {Array} dataPoints
     * @param {boolean} sumOfMultiple If true, return a VirtualTableCell object;
     * @returns {number|VirtualTableCell}
     */
    getSumOfDataPoints(dataPoints, sumOfMultiple = false) {
        if (dataPoints.length === 0) {
            return 0;
        }

        let total = 0;
        let dataPointIds = [];

        // Group all data-points by non-empty dimensions.
        const dimensions = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().getIdentityDimensions();
        let sets = {};
        dataPoints.forEach(dataPoint => {
            // Get the set "ID". We use "T" (true) for each non-empty dimension, and "F" (false) for each empty dimesnsion.
            let setId = '';
            dimensions.forEach(dimension => {
                if (dimension.slug in dataPoint && dataPoint[dimension.slug]) {
                    setId += 'T';
                } else {
                    setId += 'F';
                }
            });

            // Create set if it doesn't already exist.
            if (!(setId in sets)) {
                sets[setId] = [];
            }

            // Add data point to set.
            sets[setId].push(dataPoint);
        });

        // Use the set with the smallest number of non-empty dimensions.
        let setIds = Object.keys(sets);
        setIds = setIds.sort((a, b) => {
            return a.split('T').length - b.split('T').length;
        });
        dataPoints = sets[setIds[0]];

        // Sum up data-points.
        dataPoints.forEach(dataPoint => {
            // Get scale.
            let value = dataPoint['value'];
            if ('scale' in dataPoint) {
                value *= __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseScale(dataPoint['scale']);
            }

            // Add value.
            total += value;
            dataPointIds.push(dataPoint.id);
        });

        // Save data about each particular data-point.
        if (sumOfMultiple === true) {
            const cellData = new __WEBPACK_IMPORTED_MODULE_1__entities_VirtualTableCell__["a" /* VirtualTableCell */]();
            cellData.value = total;
            cellData.dataPointIds = dataPointIds;
            cellData.numberOfDataPoints = dataPointIds.length;

            return cellData;
        }

        return total;
    }

    getMatchingFilters(item, container) {
        let value = $(item).attr('data-value');
        let matches = $(container).find('[data-value="' + value + '"]');

        return matches.length;
    }

    resetColumnIds() {
        __WEBPACK_IMPORTED_MODULE_3__DataExplorer__["a" /* dataExplorer */].columnSequence = dataExplorerHelper.resetBoxIds($('#column_box'), 'C');
    }

    resetRowIds() {
        __WEBPACK_IMPORTED_MODULE_3__DataExplorer__["a" /* dataExplorer */].rowSequence = dataExplorerHelper.resetBoxIds($('#row_box'), 'R');
    }

    resetBoxIds(container, prefix) {
        let swapPrefix = '_tempswap';
        let idElements = container.find('._id');
        let originalIds = [];
        let swapIds = [];
        let newIds = [];
        let counter = 1;

        // Get IDs.
        idElements.each(function() {
            originalIds.push($(this).text());
            swapIds.push(swapPrefix + counter);
            newIds.push(prefix + counter);
            counter++;
        });

        // Replace formulas.
        this.replaceBoxFormulas(container, originalIds, swapIds);
        this.replaceBoxFormulas(container, swapIds, newIds);

        // Replace IDs.
        for (let i = 0; i < newIds.length; i++) {
            $(idElements[i]).text(newIds[i]);
        }

        return counter;
    }

    replaceBoxFormulas(container, needle, replacement) {
        container.find('._formula').each(function() {
            let $this = $(this);
            let formula = $this.val();

            for (let i = 0; i < needle.length; i++) {
                formula = dataExplorerHelper.replaceFullWord(formula, needle[i], replacement[i]);
            }

            $this.val(formula);
        });
    }

    // https://stackoverflow.com/a/27472191
    replaceFullWord(haystack, needle, replacement) {
        let regex = new RegExp('\\b' + needle + '\\b', 'g');

        return haystack.replace(regex, replacement);
    }

    createId(id) {
        let span = $('<span class="_button _id" name="id">' + id + '</span>');
        //
        // span.on('mousedown', function (e) {
        //     // Is there a formula in focus?
        //     let focused = $('._formula:focus');
        //
        //     if (focused.length > 0) {
        //         focused.val(focused.val() + $(this).text());
        //         dataExplorerHelper.saveAndUpdateDelayed();
        //     }
        //
        //     e.preventDefault();
        // });

        return span;
    }

    createItem(id, dataType, value, filterName) {
        let li = $('<li class="item" data-type="' + dataType + '" data-value="' + value + '">' + value + '</li>');

        if (id) {
            li.append(dataExplorerHelper.createId(id));
        }

        if (typeof filterName !== 'undefined') {
            li.attr('data-filter-type', filterName);
        }

        return li;
    }

    doTypesMatch(element, box) {
        let elementType = $(element).attr('data-type');
        let boxType = $(box).attr('data-type');

        if (!elementType && ($(box).attr('data-columns') === '' || $(box).attr('data-rows') === '')) {
            return true;
        }

        if (elementType === 'kpi' && boxType === 'filter') {
            return true;
        }

        if (!(boxType === 'all' || elementType === boxType)) {
            return false;
        }

        return true;
    }

    saveAndUpdate() {
        dataExplorerHelper.addFilterRemoveButton();
        __WEBPACK_IMPORTED_MODULE_6__DataExplorerStorage__["a" /* dataExplorerStorage */].save(__WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId);
        __WEBPACK_IMPORTED_MODULE_7__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].updateTable();
    }

    saveAndUpdateDelayed() {
        __WEBPACK_IMPORTED_MODULE_7__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].updateTableDelayed();
        __WEBPACK_IMPORTED_MODULE_6__DataExplorerStorage__["a" /* dataExplorerStorage */].saveDelayed();
    }

    addFilterRemoveButton() {
        $('.main_sidebar')
            .find('.item-with-filters .item-group .item, .global-filter-container .item[data-type="filter"]')
            .each(function() {
                if ($(this).children('.remove-filter').length === 0) {
                    $(this).append('<i class="fa fa-icon kpmg-icon-close remove-filter"></i>');
                }
            });
    }
}

const dataExplorerHelper = new DataExplorerHelper();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerHelper;



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__StorageService__ = __webpack_require__(0);



class SourceFilesService {
    constructor() {
        this.currentUuid = null;
    }

    /**
     * @returns {SourceFile}
     */
    getCurrentSourceFile() {
        return __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(__WEBPACK_IMPORTED_MODULE_1__StorageService__["a" /* storageService */], `currentProject.sourceFiles[${this.currentUuid}]`);
    }

    applyDimensionToRange(range, dimension, value, columnDefs) {
        if (!range || !dimension) {
            return;
        }
        const dimensionObject = columnDefs.filter(obj => {
            return obj.label === dimension;
        });

        const sourceFile = this.getCurrentSourceFile();
        const rangeObject = XLSX.utils.decode_range(range);

        // Apply new value to each cell in range.
        for (let row = rangeObject.s.r; row <= rangeObject.e.r; row++) {
            for (let col = rangeObject.s.c; col <= rangeObject.e.c; col++) {
                const properties = sourceFile.getSingleCellProperties(row, col);
                properties[dimensionObject[0].slug] = value;
            }
        }
    }

    applyDimensions(properties, columnDefs) {
        if (!(properties && properties.labelDimension)) {
            return;
        }

        properties.labelDimension.map((dimension, index) => {
            const overwrittenValue = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(properties, `overwriteValue[${index}]`, '');
            const value = overwrittenValue !== '' ? overwrittenValue : properties.value;

            sourceFilesService.applyDimensionToRange(properties.range, dimension, value, columnDefs);
        });
    }
}

const sourceFilesService = new SourceFilesService();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceFilesService;



/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(66);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__entities_DataExplorerDrillDownStatus__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__entities_VirtualTableCell__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__DataExplorerEval__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__DataExplorerRenderChart__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__table_DataExplorerDrillDown__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__table_DataExplorerRenderTable__ = __webpack_require__(35);













/**
 * Class responsible for generating the underlying virtual table of the analysis, based on the columns, rows, and all the other settings provided.
 */
class DataExplorerVirtualTable {
    constructor() {
        /** @type {VirtualTableCell[][]} */
        this.tableData = null;
        this.formattedTableData = null;
        this.tableIdsToColumns = null;
        this.tableIdsToRows = null;
        this.previousTableData = null;
        this.updateTableDelayed = _.debounce(this.updateTable, 500);

        this._currentTableRow = null;
    }

    updateTable() {
        this._updateMapping();

        // Update table until nothing changes anymore. Slow but working approach for formulas.
        // Limit to 100 updates so it doesn't freeze.
        this.previousTableData = null;
        for (let i = 0; i < 20; i++) {
            this._updateData();

            // Check if anything has changed.
            let changed = false;
            if (!this.previousTableData) {
                changed = true;
            } else {
                for (let j = 0; j < this.tableData.length; j++) {
                    const row = this.tableData[j];

                    for (let k = 0; k < row.length; k++) {
                        if (!_.isEqual(row[k].value, this.previousTableData[j][k].value)) {
                            changed = true;
                            break;
                        }
                    }
                }
            }
            if (!changed) {
                break;
            }

            this.previousTableData = this.tableData;
        }

        // Format values.
        let scale = $('#scale').val();
        this.formattedTableData = [];
        for (let i = 0; i < this.tableData.length; i++) {
            let row = [this.tableData[i][0].value];
            let rowElement = $('#row_box > .item:nth-child(' + (i + 1) + ')');
            let rowSectionType = __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].getSectionType(rowElement);

            for (let j = 1; j < this.tableData[i].length; j++) {
                let value = this.tableData[i][j].value;
                let colElement = $('#column_box > .item:nth-child(' + j + ')');
                let columnSectionType = __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].getSectionType(colElement);

                if (value === null || typeof value === 'undefined' || Number.isNaN(value)) {
                    value = '-';
                } else {
                    value = this.tableData[i][j].value;

                    if (rowSectionType === 'margin' || columnSectionType === 'cagr' || columnSectionType === 'yoy') {
                        value = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatPercent(value);
                    } else if ($.isNumeric(value)) {
                        value /= scale;
                        value = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(value);
                    }
                }

                row.push(value);
            }

            this.formattedTableData.push(row);
        }

        if (__WEBPACK_IMPORTED_MODULE_8__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].outputMode === 'table') {
            __WEBPACK_IMPORTED_MODULE_11__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].updateTable();
        }
        if (__WEBPACK_IMPORTED_MODULE_8__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].outputMode === 'chart') {
        }

        dataExplorerVirtualTable.renderOutputTableOrChart();
    }

    // Render the output table or chart, depending on what the user chose.
    renderOutputTableOrChart() {
        if (__WEBPACK_IMPORTED_MODULE_8__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].outputMode === 'table') {
            $('._data-explorer-template-content').css('display', '');
            $('._data-explorer-chart').css('display', 'none');
            __WEBPACK_IMPORTED_MODULE_11__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].updateTable();
            __WEBPACK_IMPORTED_MODULE_11__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.collectionView.refresh();
        }
        if (__WEBPACK_IMPORTED_MODULE_8__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].outputMode === 'chart') {
            __WEBPACK_IMPORTED_MODULE_8__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].renderChart();
            $('._data-explorer-template-content').css('display', 'none');
            $('._data-explorer-chart').css('display', '');
        }
    }

    _updateMapping() {
        let rows = $('#row_box > .item');
        let cols = $('#column_box > .item');

        // Take each row.
        this.tableIdsToRows = {};
        for (let i = 0; i < rows.length; i++) {
            this.tableIdsToRows[
                $(rows[i])
                    .find('._id')
                    .text()
            ] = i;
        }

        // Take each column.
        this.tableIdsToColumns = {};
        for (let j = 0; j < cols.length; j++) {
            this.tableIdsToColumns[
                $(cols[j])
                    .find('._id')
                    .text()
            ] = j + 1;
        }
    }

    _updateData() {
        let rows = $('#row_box > .item');
        let cols = $('#column_box > .item');
        let globalFilters = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getFiltersFromDom(
            $('#filter_box_a1 > .item, #filter_box_headline > .item, #filter_box_hidden > .item')
        );
        let dataset = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentDataPoints();
        const analysis = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_5__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId];
        analysis.tableRowLevel = {};
        analysis.tableRowToCardNo = {};
        this.tableData = [];
        this._currentTableRow = 1;

        // Take each row.
        for (let i = 0; i < rows.length; i++) {
            const rowCard = analysis.rows[i];
            let row = $(rows[i]);
            // TODO: Use analysis data instead of DOM.
            let rowFilters = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getFiltersFromDom(row.find('._filters [data-value]'));
            let isRowFormula = row.hasClass('item-with-formula');

            // Add row cells.
            let rowData = this._getColumns(i, row, cols, rowFilters, isRowFormula, dataset, globalFilters);

            // Add row title.
            let rowTitle = row.find('._title').val();
            let rowVirtualTableCell = new __WEBPACK_IMPORTED_MODULE_3__entities_VirtualTableCell__["a" /* VirtualTableCell */]();
            rowVirtualTableCell.value = rowTitle;
            rowData.unshift(rowVirtualTableCell);

            // Add row.
            this.tableData.push(rowData);

            // Save row data.
            analysis.tableRowLevel[this._currentTableRow] = 0;
            analysis.tableRowToCardNo[this._currentTableRow] = i;
            analysis.tableRowToPath[this._currentTableRow] = [];
            this._currentTableRow++;

            // Update drill-down status.
            rowCard.drillDownStatus.filters = rowCard.filters;
            rowCard.drillDownStatus.expandable = __WEBPACK_IMPORTED_MODULE_10__table_DataExplorerDrillDown__["a" /* dataExplorerDrillDown */].canBeExpanded(rowFilters);

            // Add child rows.
            if (rowCard.drillDownStatus.expanded) {
                this._addChildRows(
                    rowCard.drillDownStatus,
                    i,
                    row,
                    cols,
                    rowFilters,
                    analysis,
                    dataset,
                    globalFilters,
                    []
                );
            }
        }
    }

    /**
     *
     * @param drillDownStatus {DataExplorerDrillDownStatus}
     * @param i
     * @param row
     * @param cols
     * @param rowFilters
     * @param analysis
     * @param dataset
     * @param globalFilters
     * @param path {array}
     * @private
     */
    _addChildRows(drillDownStatus, i, row, cols, rowFilters, analysis, dataset, globalFilters, path) {
        const dimension = drillDownStatus.dimension;

        let children;
        if (dimension in rowFilters) {
            // Drill-down by data-structures.
            const value = rowFilters[dimension][0];
            children = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].currentProject.getChildren(dimension, value);
        } else {
            // Drill-down by another dimension.
            const matchingDataPoints = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(
                __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].currentProject.dataPoints,
                rowFilters
            );

            // Add children.
            children = matchingDataPoints.reduce((result, dataPoint) => {
                const value = dataPoint[dimension];

                if (value) {
                    result[dataPoint[dimension]] = true;
                }

                return result;
            }, {});
            children = Object.keys(children);
        }

        children.forEach(child => {
            const childPath = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["concat"])([], path, child);

            // Prepare row filters.
            const childRowFilters = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"])(rowFilters);
            childRowFilters[dimension] = [child];

            // Add child row cells.
            const rowData = this._getColumns(i, row, cols, childRowFilters, false, dataset, globalFilters);

            // Add title.
            let rowVirtualTableCell = new __WEBPACK_IMPORTED_MODULE_3__entities_VirtualTableCell__["a" /* VirtualTableCell */]();
            rowVirtualTableCell.value = child;
            rowData.unshift(rowVirtualTableCell);

            // Add row.
            this.tableData.push(rowData);

            // Save row data.
            analysis.tableRowLevel[this._currentTableRow] = childPath.length;
            analysis.tableRowToCardNo[this._currentTableRow] = i;
            analysis.tableRowToPath[this._currentTableRow] = childPath;
            this._currentTableRow++;

            // Update drill-down status.
            if (!(child in drillDownStatus.childStatuses)) {
                drillDownStatus.childStatuses[child] = new __WEBPACK_IMPORTED_MODULE_2__entities_DataExplorerDrillDownStatus__["a" /* DataExplorerDrillDownStatus */]();
            }
            const childDrillDownStatus = drillDownStatus.childStatuses[child];
            childDrillDownStatus.filters = childRowFilters;
            childDrillDownStatus.expandable = __WEBPACK_IMPORTED_MODULE_10__table_DataExplorerDrillDown__["a" /* dataExplorerDrillDown */].canBeExpanded(childRowFilters);

            // Add child rows.
            if (childDrillDownStatus.expanded) {
                this._addChildRows(
                    childDrillDownStatus,
                    i,
                    row,
                    cols,
                    childRowFilters,
                    analysis,
                    dataset,
                    globalFilters,
                    childPath
                );
            }
        });
    }

    _getColumns(i, row, cols, rowFilters, isRowFormula, dataset, globalFilters) {
        const rowData = [];

        // Take each column.
        for (let j = 0; j < cols.length; j++) {
            let col = $(cols[j]);
            let cell = 0;
            let colFilters = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getFiltersFromDom(col.find('[data-value]'));
            let isColFormula = col.hasClass('item-with-formula');
            let rowSectionType = __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].getSectionType(row);
            let columnSectionType = __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].getSectionType(col);
            let filters = Object.assign({}, globalFilters, rowFilters, colFilters);
            let cellData = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_5__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId].getCellData(
                i,
                j
            );

            // Use custom formula, if any.
            if (cellData.customFormula) {
                if (cellData.customFormula.slice(0, 1) === '=') {
                    const customFormula = cellData.customFormula.slice(1);
                    cell = __WEBPACK_IMPORTED_MODULE_6__DataExplorerEval__["a" /* dataExplorerEval */].evalFormula(this, customFormula, filters, null, null);
                } else {
                    cell = cellData.customFormula;
                }
            } else {
                switch (rowSectionType) {
                    case 'margin':
                        if (columnSectionType === 'yoy' || columnSectionType === 'cagr' || isColFormula) {
                            cell = null;
                        } else {
                            const filters1 = Object.assign({}, filters, {
                                attribute: row.find('._year1 option:selected').text()
                            });
                            const filters2 = Object.assign({}, filters, {
                                attribute: row.find('._year2 option:selected').text()
                            });
                            let gp = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getSumOfDataPoints(
                                __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(dataset, filters1)
                            );
                            let rev = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getSumOfDataPoints(
                                __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(dataset, filters2)
                            );
                            cell = gp / rev;
                        }
                        break;

                    default:
                        if (row.attr('data-value') === 'Blank') {
                            cell = null;
                            break;
                        }

                        switch (columnSectionType) {
                            case 'yoy':
                            case 'delta':
                            case 'cagr':
                                {
                                    let y1 = col.find('._year1').val();
                                    let y2 = col.find('._year2').val();
                                    let y1item = $(
                                        '#attr_dim_list .item[data-filter-type=time][data-value="' + y1 + '"]'
                                    );
                                    let y2item = $(
                                        '#attr_dim_list .item[data-filter-type=time][data-value="' + y2 + '"]'
                                    );
                                    const filters1 = Object.assign({}, filters, { time: y1item.text() });
                                    const filters2 = Object.assign({}, filters, { time: y2item.text() });
                                    let y1value = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getSumOfDataPoints(
                                        __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(dataset, filters1)
                                    );
                                    let y2value = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getSumOfDataPoints(
                                        __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(dataset, filters2)
                                    );

                                    switch (columnSectionType) {
                                        case 'yoy':
                                            cell = y2value / y1value - 1;
                                            break;

                                        case 'delta':
                                            cell = y2value - y1value;
                                            break;

                                        case 'cagr':
                                            cell = Math.pow(y2value / y1value, 1 / (y2 - y1)) - 1;
                                            break;
                                    }
                                }
                                break;

                            default: {
                                if (col.attr('data-value') === 'Blank') {
                                    cell = null;
                                    break;
                                }

                                if (!isRowFormula && !isColFormula) {
                                    // Process multiple datapoint values if appropriate.
                                    cell = __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getSumOfDataPoints(
                                        __WEBPACK_IMPORTED_MODULE_7__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(dataset, filters),
                                        true
                                    );
                                } else if (isRowFormula) {
                                    cell = __WEBPACK_IMPORTED_MODULE_6__DataExplorerEval__["a" /* dataExplorerEval */].evalRowFormula(
                                        this,
                                        row.find('._formula').attr('data-formula'),
                                        filters,
                                        j + 1
                                    );
                                } else if (isColFormula) {
                                    cell = __WEBPACK_IMPORTED_MODULE_6__DataExplorerEval__["a" /* dataExplorerEval */].evalColumnFormula(
                                        this,
                                        col.find('._formula').attr('data-formula'),
                                        filters,
                                        i
                                    );
                                }
                            }
                        }
                        break;
                }
            }

            if (!(cell instanceof __WEBPACK_IMPORTED_MODULE_3__entities_VirtualTableCell__["a" /* VirtualTableCell */])) {
                const value = cell;
                cell = new __WEBPACK_IMPORTED_MODULE_3__entities_VirtualTableCell__["a" /* VirtualTableCell */]();
                cell.value = value;
            }

            rowData.push(cell);
        }

        return rowData;
    }
}

const dataExplorerVirtualTable = new DataExplorerVirtualTable();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerVirtualTable;



/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add_file_workflow_AddFileSteps__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__add_file_workflow_SourceDataEditTableCell__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__add_manual_workflow_AddManualTable__ = __webpack_require__(59);





class SourceDataFiles {
    constructor() {
        this.flexgrid = null;
    }

    init() {
        __WEBPACK_IMPORTED_MODULE_2__add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].init();
        __WEBPACK_IMPORTED_MODULE_1__add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].init();
        __WEBPACK_IMPORTED_MODULE_3__add_manual_workflow_AddManualTable__["a" /* addManualTable */].init();

        this.flexGrid = new wijmo.grid.FlexGrid($('#source_data_files_pre_ingestion ._table')[0], {
            allowDragging: 'None',
            allowSorting: false,
            isReadOnly: true,
            itemsSource: [],
            selectionChanged: (s, e) => __WEBPACK_IMPORTED_MODULE_0__add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.onTableSelectionChanged(s, e),
            formatItem: (s, e) => {
                __WEBPACK_IMPORTED_MODULE_0__add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.itemFormatter.formatItem(s, e);
                __WEBPACK_IMPORTED_MODULE_0__add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.formatTableCell(s, e);
            },
            selectionChanging: (s, e) => __WEBPACK_IMPORTED_MODULE_0__add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.onTableSelectionChanging(s, e),
            updatedView: () => {
                sourceDataFiles.flexGrid.columns.map((column, index) => {
                    sourceDataFiles.flexGrid.columns[index].header = XLSX.utils.encode_col(index);
                });
                $(sourceDataFiles.flexGrid.rowHeaders._e)
                    .find('.wj-row .wj-cell.wj-header')
                    .each(function(index) {
                        $(this).text(index + 1);
                    });
            },
            updatingView: () => {
                __WEBPACK_IMPORTED_MODULE_0__add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.itemFormatter.updatingView();
            }
        });
        this.flexGrid.hostElement.addEventListener('mousedown', () => {
            __WEBPACK_IMPORTED_MODULE_0__add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.onMouseDown();
        });
        $('#source_data_files_pre_ingestion').hide();

        // Initially hide add manual workflow.
        $('#add_manual_workflow').css('display', 'none');
        $('#add_manual_sidebar').css('display', 'none');
    }

    sync() {
        sourceDataFiles.flexGrid.refresh();

        __WEBPACK_IMPORTED_MODULE_2__add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].sync();

        // Edit table cell functionality.
        __WEBPACK_IMPORTED_MODULE_1__add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].sync();
    }
}

const sourceDataFiles = new SourceDataFiles();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataFiles;



/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Constants {
    constructor() {
        // Colors
        this.COLOR_KPMG_BLUE = '#00338d';
        this.COLOR_MEDIUM_BLUE = '#005eb8';
        this.COLOR_LIGHT_BLUE = '#0091da';
        this.COLOR_VIOLET = '#483698';
        this.COLOR_PURPLE = '#470a68';
        this.COLOR_LIGHT_PURPLE = '#6d2077';
        this.COLOR_GREEN = '#00a3a1';
        this.COLOR_DARK_GREEN = '#009a44';
        this.COLOR_LIGHT_GREEN = '#43b02a';
        this.COLOR_YELLOW = '#eaaa00';
        this.COLOR_ORANGE = '#f68d2e';
        this.COLOR_RED = '#bc204b';
        this.COLOR_PINK = '#c6007e';
        this.COLOR_DARK_BROWN = '#753f19';
        this.COLOR_LIGHT_BROWN = '#9b642e';
        this.COLOR_OLIVE = '#9d9375';
        this.COLOR_BEIGE = '#e3bc9f';
        this.COLOR_LIGHT_PINK = '#e36877';

        // Misc
        this.CANNOT_EDIT_NORMALIZED_VALUE = 'You cannot edit the normalized value directly.';
        this.CANNOT_EDIT_VALUE = 'This data point was ingested from a file, therefore you cannot change its value.';
        this.CANNOT_SET_GROUP_IF_NO_PARENT = 'You need to set the parent before setting the group.';
        this.DIMENSION_SUFFIX_GROUP = '__group';
        this.DIMENSION_SUFFIX_PARENT = '__parent';
        this.FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN = '#ed2d2d';
        this.FILE_WORKFLOW_CELL_PROGRESS_COLOR_END = '#49CAAE';
    }

    getAllColors() {
        const colors = [];

        Object.getOwnPropertyNames(this).forEach((property) => {
            if (property.indexOf('COLOR_') === 0) {
                colors.push(this[property]);
            }
        });

        return colors;
    }

    getTextColorForBackground(backgroundColor) {
        // Use white text for dark backgrounds.
        // A minimum contrast of 4.5:1 is recommended to ensure that text is still readable against a background color.
        // http://www.w3.org/TR/WCAG20-TECHS/G18.html
        // http://gka.github.io/chroma.js/#chroma-contrast
        if (chroma.contrast('#111111', backgroundColor) < 4.5) {
            return '#eeeeee';
        }

        return '#111111';
    }
}

const constants = new Constants();
/* harmony export (immutable) */ __webpack_exports__["a"] = constants;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(99);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),
/* 12 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(109),
    getValue = __webpack_require__(112);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),
/* 15 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataExplorerCellFormulas__ = __webpack_require__(129);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DataExplorerRenderChart__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__DataExplorerSecondarySidebar__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__DataExplorerSidebar__ = __webpack_require__(135);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__DataExplorerStorage__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__DataExplorerTemplate__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__DataExplorerVirtualTable__ = __webpack_require__(8);













class DataExplorer {
    constructor() {
        this.table = null;
        this.columnSequence = 1;
        this.rowSequence = 1;
        this.dataExplorerCellFormulas = new __WEBPACK_IMPORTED_MODULE_1__DataExplorerCellFormulas__["a" /* DataExplorerCellFormulas */]();
        this.SET_ROW = 'row';
        this.SET_COLUMN = 'column';
    }

    getNextInSequence(set) {
        switch (set) {
            case this.SET_ROW:
                return 'R' + this.rowSequence++;

            case this.SET_COLUMN:
                return 'C' + this.columnSequence++;
        }
    }

    addFilter(item, set) {
        let section = __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__["a" /* dataExplorerSections */].addFilterSection(
            $('.item-group[data-set="' + set + '"]'),
            item,
            this.getNextInSequence(set)
        );

        if (item instanceof jQuery) {
            // Add item inside the filter section.
            item = item.clone();
            item.find('._id').remove();
            section.find('._filters').append(item);
        }

        return section;
    }

    addFormula(formula, set) {
        return __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__["a" /* dataExplorerFormulas */].addFormulaSection(
            $('.item-group[data-set="' + set + '"]'),
            this.getNextInSequence(set),
            formula
        );
    }

    init() {
        // Create this in order to drag-n-drop items back to the Available box.
        Sortable.create(
            available_box,
            $.extend({}, __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgs, {
                sort: false,
                onAdd: function(evt) {
                    $(evt.item).remove();
                },
                handle: '.non-existent-class',
                filter: '.remove-filter'
            })
        );

        // Global filters.
        Sortable.create(
            filter_box_a1,
            $.extend({}, __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgs, {
                sort: false,
                filter: '.remove-filter'
            })
        );
        Sortable.create(
            filter_box_headline,
            $.extend({}, __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgs, {
                sort: false,
                filter: '.remove-filter'
            })
        );
        Sortable.create(
            filter_box_hidden,
            $.extend({}, __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgs, {
                sort: false,
                filter: '.remove-filter'
            })
        );

        Sortable.create(
            row_box,
            $.extend({}, __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgs, {
                onAdd: evt => {
                    let item = $(evt.item);
                    let section3;

                    switch (evt.item.attributes[2].value) {
                        case 'Margin':
                            section3 = __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__["a" /* dataExplorerSections */].addMarginRow();
                            break;

                        case 'Custom Formula':
                            section3 = dataExplorer.addFormula('', this.SET_ROW);
                            break;

                        case 'Blank':
                            section3 = dataExplorer.addFilter(item, this.SET_ROW);
                            section3.attr('data-value', 'Blank');
                            break;

                        default:
                            section3 = dataExplorer.addFilter(item, this.SET_ROW);
                            break;
                    }

                    section3.insertAfter(item);
                    item.remove();
                },
                filter: '.remove-filter, ._prevent-sort'
            })
        );
        Sortable.create(
            column_box,
            $.extend({}, __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgs, {
                onAdd: evt => {
                    let item = $(evt.item);
                    let section2;

                    switch (evt.item.attributes[2].value) {
                        case 'Delta':
                            section2 = __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__["a" /* dataExplorerSections */].addYoyColumn();
                            break;
                        case 'YoY':
                            section2 = __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__["a" /* dataExplorerSections */].addYoyColumn(null, null, true);
                            break;
                        case 'CAGR':
                            section2 = __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__["a" /* dataExplorerSections */].addCagrColumn();
                            break;
                        case 'Custom Formula':
                            section2 = dataExplorer.addFormula('', this.SET_COLUMN);
                            break;
                        case 'Blank':
                            section2 = dataExplorer.addFilter(item, this.SET_COLUMN);
                            section2.attr('data-value', 'Blank');
                            break;
                        default:
                            section2 = dataExplorer.addFilter(item, this.SET_COLUMN);
                            break;
                    }
                    section2.insertAfter(item);
                    item.remove();
                },
                filter: '.remove-filter, ._prevent-sort'
            })
        );

        __WEBPACK_IMPORTED_MODULE_6__DataExplorerSecondarySidebar__["a" /* dataExplorerSecondarySidebar */].init();

        // Events
        $('#scale').on('change', function() {
            __WEBPACK_IMPORTED_MODULE_9__DataExplorerStorage__["a" /* dataExplorerStorage */].save(__WEBPACK_IMPORTED_MODULE_0__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId);
            __WEBPACK_IMPORTED_MODULE_11__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].updateTable();
        });

        $('._outputMode input').on('change', function() {
            if (!$(this).prop('checked')) {
                return;
            }

            __WEBPACK_IMPORTED_MODULE_5__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].outputMode = $(this).val();

            switch (__WEBPACK_IMPORTED_MODULE_5__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].outputMode) {
                case 'table':
                    $('#pivot_wrapper').show();
                    $('#outputChart').hide();
                    $('.chart-related-data').hide();
                    break;

                case 'chart':
                    $('#pivot_wrapper').hide();
                    $('#outputChart').show();
                    $('.chart-related-data').show();
                    break;
            }

            __WEBPACK_IMPORTED_MODULE_11__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].renderOutputTableOrChart();
        });

        $('._chartMode input').on('change', function() {
            if (!$(this).prop('checked')) {
                return;
            }

            __WEBPACK_IMPORTED_MODULE_5__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].chartMode = $(this).val();

            __WEBPACK_IMPORTED_MODULE_11__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].renderOutputTableOrChart();
        });

        $('._chartStackingMode input').on('change', function() {
            if (!$(this).prop('checked')) {
                return;
            }

            __WEBPACK_IMPORTED_MODULE_5__DataExplorerRenderChart__["a" /* dataExplorerRenderChart */].chartStackingMode = $(this).val();

            __WEBPACK_IMPORTED_MODULE_11__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].renderOutputTableOrChart();
        });

        // Trigger template loading.
        $('#exampleFormControlSelect1').on('change', e => {
            __WEBPACK_IMPORTED_MODULE_10__DataExplorerTemplate__["a" /* dataExplorerTemplate */].loadTemplate(
                parseInt(
                    $(e.target)
                        .find(':selected')
                        .attr('data-source-template')
                ) - 1
            );
        });

        $('.main_sidebar').on('click', e => {
            let target = $(e.target);
            let className = target.attr('class');

            if (className === undefined) {
                return;
            }

            let result = target.hasClass('remove-filter');

            if (result) {
                if (target.parent().hasClass('global-filter')) {
                    target.parent().remove();
                } else {
                    let card = target.closest('.item-with-filters');
                    target.closest('li.item').remove();
                    __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__["a" /* dataExplorerSections */].syncTitle(card);
                }

                __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
            }
        });

        __WEBPACK_IMPORTED_MODULE_7__DataExplorerSections__["a" /* dataExplorerSections */].init();
        __WEBPACK_IMPORTED_MODULE_8__DataExplorerSidebar__["a" /* dataExplorerSidebar */].init();
        __WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__["a" /* dataExplorerImport */].init();
    }
}

const dataExplorer = new DataExplorer();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorer;



/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash_includes__ = __webpack_require__(188);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash_includes___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash_includes__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_setWith__ = __webpack_require__(199);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_setWith___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash_setWith__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Constants__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ResizableDivider__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__tabs_source_data_add_file_workflow_FileWorkflow__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__tabs_source_data_add_file_workflow_FileWorkflowStep1__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__tabs_source_data_add_file_workflow_FileWorkflowStep2__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__tabs_source_data_add_file_workflow_FileWorkflowStep3__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__tabs_source_data_add_file_workflow_FileWorkflowStep4__ = __webpack_require__(207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__tabs_source_data_add_file_workflow_SourceDataEditTableCell__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__tabs_source_data_add_file_workflow_SourceDataFilesReviewTable__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__tabs_source_data_add_manual_workflow_AddManualSidebar__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__tabs_source_data_SourceData__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__tabs_source_data_SourceDataFiles__ = __webpack_require__(9);





















class AddFileSteps {
    constructor() {
        this.ingestionStep = 1;
        this.container = $('#source_data');
        this.fileWorkflow = new __WEBPACK_IMPORTED_MODULE_9__tabs_source_data_add_file_workflow_FileWorkflow__["a" /* FileWorkflow */]();
        this.DEFINE_DATA_STEP = 1;
        this.STRUCTURE_DATA_STEP = 2;
        this.GLOBAL_MAPPING_STEP = 3;
        this.REVIEW_STEP = 4;
        this.FINISH_STEP = 5;
        this.steps = [
            new __WEBPACK_IMPORTED_MODULE_10__tabs_source_data_add_file_workflow_FileWorkflowStep1__["a" /* FileWorkflowStep1 */](this.container, this.fileWorkflow),
            new __WEBPACK_IMPORTED_MODULE_11__tabs_source_data_add_file_workflow_FileWorkflowStep2__["a" /* FileWorkflowStep2 */](this.container, this.fileWorkflow),
            new __WEBPACK_IMPORTED_MODULE_12__tabs_source_data_add_file_workflow_FileWorkflowStep3__["a" /* FileWorkflowStep3 */](this.container, this.fileWorkflow),
            new __WEBPACK_IMPORTED_MODULE_13__tabs_source_data_add_file_workflow_FileWorkflowStep4__["a" /* FileWorkflowStep4 */](this.container, this.fileWorkflow)
        ];

        /** @type {Project} */
        this.project = null;

        this.labelBrushesColors = __WEBPACK_IMPORTED_MODULE_5__Constants__["a" /* constants */].getAllColors();
    }

    init() {
        // Back
        $('#source_data_files_sidebar ._ingestion-steps ._back').on('click', () => {
            this.ingestionPrevStepSwitch();
        });

        // Next
        $('#source_data_files_sidebar ._ingestion-steps ._next').on('click', () => {
            this.ingestionNextStepSwitch();
        });

        // Jump to a specific step.
        $('#source_data_files_pre_ingestion ._ingestion-steps-display ._step').on('click', e => {
            const step = parseInt($(e.currentTarget).attr('data-step'));
            this.headerStepNav(step);
        });

        const mySlider = $('#_zoom-slider')
            .bootstrapSlider({
                min: 25,
                max: 100,
                step: 1,
                value: 100,
                selection: 'before',
                tooltip: 'show',
                formatter: value => {
                    return value + '%';
                }
            })
            .on('slide', function(evt) {
                let zoomValue = mySlider.bootstrapSlider('getValue') / 100;

                $('#source_data_files ._table')
                    .first()
                    .css('zoom', zoomValue);
            });
    }

    sync() {}

    cancelWorkflow() {
        const confirmation = confirm('Are you sure you want to cancel?');
        if (!confirmation) {
            return;
        }

        this.steps[2].inputsValues = {};
        if (this.steps[2].dimensionSelect.selectedItem) {
            this.steps[2].changeDimension();
            this.steps[2].changeDictionary();
        }

        __WEBPACK_IMPORTED_MODULE_18__tabs_source_data_SourceData__["a" /* sourceData */].endWorkflow();
        $('#source_data_files_pre_ingestion').hide();
        $('#source_data_files_sidebar').css('display', 'none');
        $('#source_data_import_table').val('');
        $('ul.nav a[href="#dropbox"]').trigger('click');
        __WEBPACK_IMPORTED_MODULE_14__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].firstCellAutomaticSelectionFinished = false;

        // Unfreeze columns and rows.
        __WEBPACK_IMPORTED_MODULE_19__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.frozenColumns = 0;
        __WEBPACK_IMPORTED_MODULE_19__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.frozenRows = 0;

        __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].syncViews();
    }

    headerStepNav(step) {
        if (step < this.ingestionStep) {
            this.prevStep(step);
        } else {
            switch (step) {
                case 2:
                    this.updateDimensionsForDefDataPointsStep();
                    this.structureDataStep();
                    break;

                case 3:
                    this.globalMappingStep();
                    break;

                case 4:
                    this.updateDimensionsForDefDataPointsStep();
                    this.saveCurrentDataPoints();
                    this.reviewStep();
                    break;

                case 5:
                    this.finishStep();
                    break;
            }
        }
    }

    defineLabelsStep() {
        const file = __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        if (!file) {
            return;
        }

        const tableSource = __WEBPACK_IMPORTED_MODULE_19__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource;

        // Display the Brushes list of dimensions.
        const dimensions = __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs;
        dimensions.map((dimension, index) => {
            if (dimension.selected) {
                const container = $('<div class="_brush-container"></div>');
                const div = $('<div class="_brush _label-brush"></div>');
                const rangeDiv = $('<div class="_label-brush-range"></div>');
                const globalDiv = $('<div class="_label-global"></div>');
                const backgroundColor = this.labelBrushesColors[index];
                const color = __WEBPACK_IMPORTED_MODULE_5__Constants__["a" /* constants */].getTextColorForBackground(backgroundColor);
                div.css('background-color', backgroundColor);
                div.css('color', color);
                div.attr('data-dimension', dimension.label);
                div.html(dimension.label);
                div.prepend('<i class="fa fa-paint-brush" aria-hidden="true"></i> ');
                rangeDiv.css('background-color', backgroundColor);
                rangeDiv.css('color', color);
                globalDiv.css('background-color', backgroundColor);
                globalDiv.css('color', color);
                container
                    .append(div)
                    .append(rangeDiv)
                    .append(globalDiv);
                $('.brush-section').append(container);

                // Define range for each dimension.
                this.defineRangeForEachDimension(tableSource, rangeDiv, div, file, dimension);
            }
        });
    }

    defineRangeForEachDimension(tableSource, rangeDiv, div, file, dimension) {
        const ranges = [];
        const rangeText = [];
        for (let i = 0; i < tableSource.length; i++) {
            ranges[i] = new Array(tableSource[0].length);
            for (let j = 0; j < tableSource[0].length; j++) {
                ranges[i][j] = false;
            }
        }
        tableSource.map((row, r) => {
            row.map((col, c) => {
                const labelDimension = __WEBPACK_IMPORTED_MODULE_1_lodash_get___default()(file.cellProperties, `[${c}][${r}]['labelDimension']`, false);
                const isLabel = __WEBPACK_IMPORTED_MODULE_1_lodash_get___default()(file.cellProperties, `[${c}][${r}]['cellType']`, false);
                if (__WEBPACK_IMPORTED_MODULE_2_lodash_includes___default()(labelDimension, dimension.label) && isLabel === 'label') {
                    let range = __WEBPACK_IMPORTED_MODULE_1_lodash_get___default()(file.cellProperties, `[${c}][${r}]['range']`, false);
                    range = range ? XLSX.utils.decode_range(range) : range;
                    if (range) {
                        for (let r = range.s.r; r <= range.e.r; r++) {
                            for (let c = range.s.c; c <= range.e.c; c++) {
                                ranges[r][c] = true;
                            }
                        }
                    }
                }
            });
        });

        const inRange = {};
        const rows = ranges.length;
        const cols = ranges[0].length;

        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                let lastRow = rows - 1;
                let lastCol = cols - 1;
                if (ranges[r][c] && !__WEBPACK_IMPORTED_MODULE_1_lodash_get___default()(inRange, `[${c}][${r}]`, false)) {
                    for (let i = r; i < rows; i++) {
                        if (!__WEBPACK_IMPORTED_MODULE_1_lodash_get___default()(inRange, `[${c}][${i}]`, false) && ranges[i][c]) {
                            __WEBPACK_IMPORTED_MODULE_3_lodash_setWith___default()(inRange, `${c}.${i}`, true, Object);
                        } else {
                            lastRow = i - 1;
                            break;
                        }
                    }

                    for (let i = c + 1; i < cols; i++) {
                        let isRange = true;
                        for (let j = r; j <= lastRow; j++) {
                            if (ranges[j][i] && !__WEBPACK_IMPORTED_MODULE_1_lodash_get___default()(inRange, `[${i}][${j}]`, false)) {
                                __WEBPACK_IMPORTED_MODULE_3_lodash_setWith___default()(inRange, `${i}.${j}`, true, Object);
                            } else {
                                isRange = false;
                                for (let k = j; k >= r; k--) {
                                    __WEBPACK_IMPORTED_MODULE_3_lodash_setWith___default()(inRange, `${i}.${k}`, false, Object);
                                }
                                i--;

                                break;
                            }
                        }

                        if (!isRange) {
                            lastCol = i;
                            break;
                        }
                    }

                    rangeText.push(XLSX.utils.encode_range({ s: { r: r, c: c }, e: { r: lastRow, c: lastCol } }));
                }
            }
        }

        rangeDiv.html(rangeText.join(', '));
    }

    ingestionPrevStepSwitch() {
        const prevStep = this.ingestionStep - 1;
        __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].syncDimensionsContainer();

        this.prevStep(prevStep);
    }

    prevStep(step) {
        this.setStep(step);

        if (step === this.DEFINE_DATA_STEP) {
            __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].showHiddenCells();
            this.defineTablesStep();
            this.defineLabelsStep();
        }

        // Save new current ingestion step for file.
        __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().ingestionStep = this.ingestionStep;
        __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].saveCurrentProject();

        // Display Sidebar for current step.
        __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();
    }

    ingestionNextStepSwitch() {
        const nextStep = this.ingestionStep + 1;
        __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].syncDimensionsContainer();

        switch (nextStep) {
            case this.STRUCTURE_DATA_STEP:
                this.structureDataStep();
                break;
            case this.GLOBAL_MAPPING_STEP:
                this.globalMappingStep();
                break;
            case this.REVIEW_STEP:
                this.reviewStep();
                break;
            case this.FINISH_STEP:
                this.finishStep();
                break;
        }
    }

    async finishStep() {
        let success = true;
        let projectKey = localStorage.getItem('current_project_key');
        let thisproject = JSON.parse(localStorage.getItem(projectKey));
        localStorage.setItem('currentProject', JSON.stringify(thisproject));
        let currentFileId = localStorage.getItem('currentFileID');
        let file;
        if (!localStorage.getItem('blobExcelData')) file = __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        else file = __WEBPACK_IMPORTED_MODULE_1_lodash_get___default()(thisproject, `sourceFiles[${currentFileId}]`);

        this.ingestionStep--;
        const project = __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].getCurrentProject() || thisproject;

        let fileDataPointsCopyArray = [];
        let successCount = 0;
        let errors = '';

        // Add new Data Points.
        file.dataPoints.map((dataPoint, index) => {
            let dataPointCopy = _.assign({}, dataPoint);

            const col = dataPointCopy.col;
            const row = dataPointCopy.row;

            // delete dataPointCopy.source;
            delete dataPointCopy.col;
            delete dataPointCopy.row;

            const result = __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].getCurrentProject().addDataPoint(dataPointCopy);
            if (result.success) {
                // Save the data point ID for cell.
                file.cellProperties[col][row]['dataPointId'] = result.id;
                file.cellProperties[col][row]['failedSaving'] = false;
                const dpCopy = Object.assign({}, dataPoint);
                dpCopy.id = result.id;
                fileDataPointsCopyArray.push(dpCopy);
                successCount++;
            } else {
                success = false;
                // Here add red warning that it did not get saved successfully.
                file.cellProperties[col][row]['failedSaving'] = true;
                errors += 'Error for data-point with the value = ' + dataPoint.value + ': ' + result.error + '\n';
            }
        });

        // Remove Data Points.
        file.dataPointsCopy.map(dataPoint => {
            let deleteDataPoint = true;

            file.dataPoints.map(dp => {
                if (dp.id === dataPoint.id) {
                    deleteDataPoint = false;
                }
            });

            if (deleteDataPoint) {
                project.dataPoints.splice(_.findIndex(project.dataPoints, dp => dp.id === dataPoint.id), 1);
                file.cellProperties[dataPoint.col][dataPoint.row]['dataPointId'] = 'initial';
            }
        });

        // Add data structures.
        __WEBPACK_IMPORTED_MODULE_17__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].sourceDataStructures.addDataStructuresFromProject(this.project);

        // Add global mapping structures.
        file.globalMappingStructures.map(el => {
            __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].getCurrentProject().addDataStructure(el.dimension, el.value, null, null, el.globalTerm);
        });
        this.steps[2].inputsValues = {};

        try {
            this.steps[2].changeDimension();
            this.steps[2].changeDictionary();
        } catch (err) {
            console.log('will change later changeDimension', err);
        }

        if (success) {
            if (__WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile()) alert('Your changes have been saved successfully.');
        } else {
            alert(
                successCount +
                    '/' +
                    file.dataPoints.length +
                    ' data-points were saved. The following errors have occurred: ' +
                    '\n' +
                    errors
            );
        }

        // If not set to true, first time clicking on a cell will not open the modal.
        __WEBPACK_IMPORTED_MODULE_14__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].firstCellAutomaticSelectionFinished = true;

        // Unfreeze columns and rows.
        //sourceDataFiles.flexGrid.frozenColumns = 0;
        //sourceDataFiles.flexGrid.frozenRows = 0;

        file.dataPointsCopy = fileDataPointsCopyArray;
        file.ingestionStep = 1;
        //sourceDataFiles.flexGrid.refresh();
        __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].syncViews();
        __WEBPACK_IMPORTED_MODULE_18__tabs_source_data_SourceData__["a" /* sourceData */].endWorkflow();
    }

    globalMappingStep() {
        this.nextStep(this.GLOBAL_MAPPING_STEP);
    }

    reviewStep() {
        this.nextStep(this.REVIEW_STEP);

        // Display new table.
        __WEBPACK_IMPORTED_MODULE_15__tabs_source_data_add_file_workflow_SourceDataFilesReviewTable__["a" /* sourceDataFilesReviewTable */].sync();

        // Change Next button to Finish.
        $('#source_data_files_sidebar ._ingestion-steps ._next').text('Finish');
    }

    saveCurrentDataPoints() {
        const file = __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        // file.dataPointsCopy = file.dataPoints;
        file.dataPoints = [];
        const columns = file.cellProperties;

        if (columns) {
            Object.keys(columns).forEach(function(i) {
                const rows = columns[i];
                Object.keys(rows).forEach(function(j) {
                    const cell = rows[j];
                    if (cell.cellType === 'data') {
                        let dataPoint = __WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep___default()(cell);

                        delete dataPoint.cellType;
                        delete dataPoint.appliedLabelWarning;
                        if (dataPoint.dataPointId !== 'noID' && dataPoint.dataPointId !== 'initial') {
                            dataPoint.id = dataPoint.dataPointId;
                        }

                        delete dataPoint.dataPointId;

                        // TODO: temporary solution
                        delete dataPoint.parent_attribute;
                        delete dataPoint.global_term;

                        dataPoint.source = __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].currentUuid;
                        dataPoint.col = i;
                        dataPoint.row = j;

                        file.dataPoints.push(dataPoint);
                    }
                });
            });
        }
    }

    structureDataStep() {
        this.nextStep(this.STRUCTURE_DATA_STEP);

        // Save current data points for file.
        this.saveCurrentDataPoints();

        // Load data structures.
        if (addFileSteps.ingestionStep === this.STRUCTURE_DATA_STEP) {
            // Get new data points.
            const file = __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();

            // Copy new data points into our project, and assign fake IDs to them as its required by the validator.
            addFileSteps.project.dataPoints = __WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep___default()(file.dataPoints);
            addFileSteps.project.dataPoints = addFileSteps.project.dataPoints.reduce((dataPoints, dataPoint) => {
                dataPoint.id = __WEBPACK_IMPORTED_MODULE_4__Common__["a" /* common */].getNextUuid();
                dataPoints.push(dataPoint);

                return dataPoints;
            }, []);

            // Use new project for data-structures screen.
            __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].sourceDataStructures.setProject(addFileSteps.project);
            __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].sourceDataStructures.sync();
        }

        __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].saveCurrentProject();
    }

    updateDimensionsForDefDataPointsStep() {
        // Update dimensions for cell properties.
        const file = __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const cellProperties = file.cellProperties;
        if (cellProperties) {
            Object.keys(cellProperties).forEach(col => {
                if (cellProperties[col]) {
                    Object.keys(cellProperties[col]).forEach(row => {
                        __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs.map(dimension => {
                            if (!dimension.selected) {
                                if (cellProperties[col][row].hasOwnProperty(dimension.slug)) {
                                    cellProperties[col][row][dimension.slug] = '';
                                }
                            }
                        });
                    });
                }
            });
        }
    }

    defineTablesStep() {
        this.updateDimensionsForDefDataPointsStep();
    }

    nextStep(step) {
        this.setStep(step);

        // Save new current ingestion step for file.
        __WEBPACK_IMPORTED_MODULE_7__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().ingestionStep = this.ingestionStep;
        __WEBPACK_IMPORTED_MODULE_8__services_StorageService__["a" /* storageService */].saveCurrentProject();

        // Display Sidebar for current step and disable Data|Label Views switch.
        __WEBPACK_IMPORTED_MODULE_16__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();
    }

    setStep(step) {
        if (this.ingestionStep === 2) {
            __WEBPACK_IMPORTED_MODULE_6__ResizableDivider__["a" /* resizableDivider */].resetResizable('#source_data_files_pre_ingestion ._table', () => {});
        }

        $('._brush-container').remove();
        this.ingestionStep = step;

        // Reset table mode.
        this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;

        // Hide all.
        this.steps.forEach(step => {
            step.hide();
        });

        // Show current step.
        this.steps[this.ingestionStep - 1].show();

        if (this.ingestionStep === 2) {
            __WEBPACK_IMPORTED_MODULE_6__ResizableDivider__["a" /* resizableDivider */].enableResizable(
                '#source_data_files_pre_ingestion ._table',
                '.dataStructuresComponent',
                'height',
                { handles: 's' },
                { minHeight: 200, maxHeight: 800 },
                () => {}
            );
        }
    }
}

const addFileSteps = new AddFileSteps();
/* harmony export (immutable) */ __webpack_exports__["a"] = addFileSteps;



/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(28),
    getRawTag = __webpack_require__(101),
    objectToString = __webpack_require__(102);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_KeyboardService__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorer__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DataExplorerVirtualTable__ = __webpack_require__(8);







class DataExplorerSections {
    init() {
        this.container = $('#output_table_sidebar');

        // Close button
        this.container.on('click', '._button._close', e => {
            $(e.currentTarget)
                .closest('.item')
                .remove();
            __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].resetColumnIds();
            __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
        });

        // Chart button
        this.container.on('click', '._button._chart', e => {
            // Switch state.
            let checked = $(e.currentTarget).attr('data-checked') === 'false';
            $(e.currentTarget).attr('data-checked', checked ? 'true' : 'false');

            // Render.
            __WEBPACK_IMPORTED_MODULE_5__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].renderOutputTableOrChart();

            e.preventDefault();
        });

        // Title
        this.container.on('change', '._title', e => {
            __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
        });
        this.container.on('keydown', '._title', e => {
            if (e.keyCode !== __WEBPACK_IMPORTED_MODULE_1__services_KeyboardService__["a" /* keyboardService */].ctrlKey && e.keyCode !== __WEBPACK_IMPORTED_MODULE_1__services_KeyboardService__["a" /* keyboardService */].shiftKey) {
                e.stopPropagation();
            }
        });
        this.container.on('keyup', '._title', e => {
            __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdateDelayed();

            if (e.keyCode !== __WEBPACK_IMPORTED_MODULE_1__services_KeyboardService__["a" /* keyboardService */].ctrlKey && e.keyCode !== __WEBPACK_IMPORTED_MODULE_1__services_KeyboardService__["a" /* keyboardService */].shiftKey) {
                e.stopPropagation();
            }
        });
    }

    getSectionType(section) {
        return section.attr('data-section-type');
    }

    addSection(sectionType, container, title, id) {
        // Title
        let titleInput = $('<input class="_title" value="' + title + '">');
        let titleContainer = $('<span class="_title-container"></span>').append(titleInput);
        let idElement = __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].createId(id);

        // Close button
        let closeButton = $(
            '<span class="_button _close"><i class="kpmg-icon kpmg-icon-close" aria-hidden="true"></i></span>'
        );

        // Chart button
        let chartElement = $(
            '<span class="_button _chart" data-checked="true"><i class="kpmg-icon kpmg-icon-graph" aria-hidden="true"></i></span>'
        );

        // Setion
        let section = $('<li class="item row-or-column-card"></li>')
            .attr('data-section-type', sectionType)
            .append(titleContainer, idElement, chartElement, closeButton)
            .appendTo(container);

        return section;
    }

    addFilterSection(container, item, id) {
        let value = item && $(item).length ? $(item).attr('data-value') : '';
        let section = this.addSection('filter', container, value, id);
        let filters = $('<span class="item-group item-group-horizontal _filters" data-type="filter">');

        section.addClass('item-with-filters').append(filters);

        Sortable.create(
            filters[0],
            $.extend({}, __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgs, {
                filter: 'input, .remove-filter',
                preventOnFilter: false
            })
        );

        return section;
    }

    addYearOrMarginOptions(select, option) {
        select.find('option').remove();
        let dataset = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentDataPoints();
        let years = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getUniqueValues(dataset, option);

        years.forEach(function(year) {
            select.append('<option value="' + year + '">' + year + '</option>');
        });
    }

    addYearPair(section, y1, y2, option) {
        let year1 = $('<select class="_year _year1"></select>');
        this.addYearOrMarginOptions(year1, option);
        year1.val(y1);
        year1.on('change', function() {
            dataExplorerSections.syncTitle($(this).closest('.row-or-column-card'));
            __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
        });

        let year2 = $('<select class="_year _year2"></select>');
        this.addYearOrMarginOptions(year2, option);
        year2.val(y2);
        year2.on('change', function() {
            dataExplorerSections.syncTitle($(this).closest('.row-or-column-card'));
            __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
        });

        section.append(year1, year2);
    }

    // Add YoY or Delta, depending on modeValue.
    addYoyColumn(y1, y2, modeValue) {
        let title = modeValue ? 'Yoy' : 'Delta';
        let section = this.addSection(
            title.toLowerCase(),
            $('#column_box'),
            title,
            'C' + __WEBPACK_IMPORTED_MODULE_3__DataExplorer__["a" /* dataExplorer */].columnSequence++
        );

        let container = $('<div class="extra-yoy-container">');
        section.append(container);

        this.addYearPair(container, y1, y2, 'time');

        return section;
    }

    addCagrColumn(y1, y2) {
        let section = this.addSection('cagr', $('#column_box'), 'CAGR', 'C' + __WEBPACK_IMPORTED_MODULE_3__DataExplorer__["a" /* dataExplorer */].columnSequence++);
        let container = $('<div class="extra-yoy-container">');

        section.append(container);

        this.addYearPair(container, y1, y2, 'time');
        return section;
    }

    addMarginRow(y1 = null, y2 = null) {
        let section = this.addSection('margin', $('#row_box'), 'Margin', 'R' + __WEBPACK_IMPORTED_MODULE_3__DataExplorer__["a" /* dataExplorer */].rowSequence++);
        let container = $('<div class="extra-yoy-container">');
        section.append(container);

        this.addYearPair(container, y1, y2, 'attribute');
        return section;
    }

    syncTitle(section) {
        let type = this.getSectionType(section);
        let titleElement = section.find('._title');

        switch (type) {
            case 'filter':
            case 'blank':
                let filters = section.find('.item');

                if (filters.length === 1) {
                    titleElement.val(filters.data('value'));
                }
                if (filters.length > 1) {
                    let title = '';
                    filters.each(function() {
                        title += $(this).data('value') + ' - ';
                    });
                    titleElement.val(title.substring(0, title.length - 2));
                }
                break;

            case 'yoy':
                {
                    let y1 = section.find('._year1').val();
                    let y2 = section.find('._year2').val();
                    titleElement.val('YoY ' + y1 + '-' + y2);
                }
                break;

            case 'delta':
                {
                    let y1 = section.find('._year1').val();
                    let y2 = section.find('._year2').val();
                    titleElement.val('Delta ' + y1 + '-' + y2);
                }
                break;

            case 'cagr': {
                let y1 = section.find('._year1').val();
                let y2 = section.find('._year2').val();
                titleElement.val('CAGR ' + y1 + '-' + y2);
            }
        }
    }
}

const dataExplorerSections = new DataExplorerSections();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerSections;



/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__entities_DataExplorerCard__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorer__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DataExplorerSecondarySidebar__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__DataExplorerSections__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__DataExplorerVirtualTable__ = __webpack_require__(8);









class DataExplorerStorage {
    constructor() {
        this.saveDelayed = _.debounce(this.save, 500);
    }

    save(i) {
        console.log('dataExplorerStorage.save');

        let globalFilters = [];
        let columns = dataExplorerStorage.saveRowsOrColumns($('#column_box'));
        let rows = dataExplorerStorage.saveRowsOrColumns($('#row_box'));

        let filterCategories = ['a1', 'headline', 'hidden'];
        for (let i = 0; i < filterCategories.length; i++) {
            let category = filterCategories[i];

            $(`#filter_box_${category} > .item`).each(function() {
                let $this = $(this);

                globalFilters.push({
                    dataFilterType: $this.attr('data-filter-type'),
                    dataValue: $this.attr('data-value'),
                    dataDestination: $this.parent().attr('id')
                });
            });
        }

        __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].currentProject.analyses[i].globalFilters = globalFilters;
        __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].currentProject.analyses[i].columns = columns;
        __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].currentProject.analyses[i].rows = rows;
        __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].currentProject.analyses[i].scale = $('#scale').val();

        __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].saveCurrentProject();
    }

    saveRowsOrColumns(container) {
        let data = [];

        container.find('> .item').each(function() {
            const $this = $(this);
            const sectionType = $this.attr('data-section-type');

            // Create card.
            const card = new __WEBPACK_IMPORTED_MODULE_0__entities_DataExplorerCard__["a" /* DataExplorerCard */]();
            card.sectionType = sectionType;
            card.title = $this.find('input._title').val();
            card.dataValue = $this.attr('data-value');

            switch (sectionType) {
                case 'filter':
                    card.filters = {};

                    if (card.dataValue === 'Blank') {
                        break;
                    }

                    $this.find('.item').each(function() {
                        const dimension = $(this).attr('data-filter-type');
                        const value = $(this).attr('data-value');

                        if (!(dimension in card.filters)) {
                            card.filters[dimension] = [];
                        }
                        card.filters[dimension].push(value);
                    });
                    break;

                case 'formula':
                    card.formula = $this.find('._formula').attr('data-formula');
                    break;

                case 'yoy':
                case 'delta':
                    card.year1 = $this.find('._year1').val();
                    card.year2 = $this.find('._year2').val();
                    break;

                case 'cagr':
                    card.year1 = $this.find('._year1').val();
                    card.year2 = $this.find('._year2').val();
                    break;

                case 'margin':
                    card.attribute1 = $this.find('._year1').val();
                    card.attribute2 = $this.find('._year2').val();
                    break;
            }

            data.push(card);
        });

        return data;
    }

    load() {
        if (__WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentTab() !== '#output_table') {
            return;
        }

        console.log('dataExplorerStorage.load');

        __WEBPACK_IMPORTED_MODULE_5__DataExplorerSecondarySidebar__["a" /* dataExplorerSecondarySidebar */].load();

        // Available fields
        {
            $('#available_box ul.available_box-sub').html('');

            // Filter
            let filterTypes = ['time', 'entity', 'layer', 'quality', 'unit'];
            for (let i = 0; i < filterTypes.length; i++) {
                dataExplorerStorage.addItemsForFilterType(filterTypes[i]);
            }
        }

        const data = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_3__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId];

        // Scale
        $('#scale').val(data.scale);

        // Global filters
        $('#filter_box_headline, #filter_box_a1, #filter_box_hidden').html('');
        for (let i = 0; i < data.globalFilters.length; i++) {
            let filterData = data.globalFilters[i];
            let filter = $(
                '.secondary_sidebar .item[data-filter-type="' +
                    filterData.dataFilterType +
                    '"][data-value="' +
                    filterData.dataValue +
                    '"]'
            );
            $('#' + filterData.dataDestination).append(filter.clone());
        }

        // Columns
        dataExplorerStorage.loadRowsOrColumns($('#column_box'), data.columns);

        // Rows
        dataExplorerStorage.loadRowsOrColumns($('#row_box'), data.rows);

        __WEBPACK_IMPORTED_MODULE_7__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].updateTable();

        __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].addFilterRemoveButton();
    }

    loadRowsOrColumns(container, data) {
        const set = container.attr('data-set');
        let isColumns = container.attr('id') === 'column_box';

        if (isColumns) {
            __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].columnSequence = 1;
        } else {
            __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].rowSequence = 1;
        }

        container.find('> .item').remove();
        for (let i = 0; i < data.length; i++) {
            let itemData = data[i];
            let item = null;

            switch (itemData.sectionType) {
                case 'filter':
                    if (itemData.dataValue === 'Blank') {
                        let id = isColumns ? 'C' + __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].columnSequence : 'R' + __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].rowSequence;
                        item = __WEBPACK_IMPORTED_MODULE_6__DataExplorerSections__["a" /* dataExplorerSections */].addFilterSection(container, itemData, id);
                        item.attr('data-value', 'Blank');
                        break;
                    }

                    item = __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].addFilter('', set);

                    const filters = item.find('._filters');

                    // Add filters one by one, per dimension.
                    for (const dimension in itemData.filters) {
                        itemData.filters[dimension].forEach(value => {
                            const filter = __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].createItem(null, 'filter', value, dimension);
                            filters.append(filter.clone());
                        });
                    }
                    break;

                case 'formula':
                    if (isColumns) {
                        item = __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].addFormula(itemData.formula, __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].SET_COLUMN);
                    } else {
                        item = __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].addFormula(itemData.formula, __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].SET_ROW);
                    }
                    break;

                case 'yoy':
                    item = __WEBPACK_IMPORTED_MODULE_6__DataExplorerSections__["a" /* dataExplorerSections */].addYoyColumn(itemData.year1, itemData.year2, itemData.mode);
                    break;

                case 'delta':
                    item = __WEBPACK_IMPORTED_MODULE_6__DataExplorerSections__["a" /* dataExplorerSections */].addYoyColumn(itemData.year1, itemData.year2, itemData.mode);
                    break;

                case 'cagr':
                    item = __WEBPACK_IMPORTED_MODULE_6__DataExplorerSections__["a" /* dataExplorerSections */].addCagrColumn(itemData.year1, itemData.year2);
                    break;

                case 'margin':
                    item = __WEBPACK_IMPORTED_MODULE_6__DataExplorerSections__["a" /* dataExplorerSections */].addMarginRow();
                    break;
            }

            if (item) {
                item.find('._title').val(itemData.title);
            }
        }
    }

    addItemsForFilterType(filterName) {
        let filter = {};
        let dataset = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentDataPoints();

        for (let i = 0; i < dataset.length; i++) {
            let key = dataset[i][filterName];

            if (!key) {
                return;
            }

            filter[key] = true;
        }

        let container = $('#available_box_' + filterName);
        container.html('');
        for (let i in filter) {
            container.append(__WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].createItem(null, 'filter', i, filterName));
        }

        __WEBPACK_IMPORTED_MODULE_4__DataExplorerHelper__["a" /* dataExplorerHelper */].addFilterRemoveButton();
    }
}

const dataExplorerStorage = new DataExplorerStorage();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerStorage;



/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Tab__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabs_dropbox_Dropbox__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__add_manual_workflow_AddManualSidebar__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__add_manual_workflow_AddManualTable__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__source_data_structures_SourceDataStructures__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__SourceDataFiles__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__SourceDataGraphView__ = __webpack_require__(208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__SourceDataPoints__ = __webpack_require__(36);












class SourceData extends __WEBPACK_IMPORTED_MODULE_2__Tab__["a" /* Tab */] {
    constructor() {
        super();
        this.tabHref = '#source_data';
        this.sourceDataFiles = __WEBPACK_IMPORTED_MODULE_8__SourceDataFiles__["a" /* sourceDataFiles */];
        this.sourceDataPoints = __WEBPACK_IMPORTED_MODULE_10__SourceDataPoints__["a" /* sourceDataPoints */];
        this.sourceDataStructures = new __WEBPACK_IMPORTED_MODULE_7__source_data_structures_SourceDataStructures__["a" /* SourceDataStructures */]($('#source_data_data_structures'), () => {
            __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].saveCurrentProject();
            __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].syncViews();
        });
        this.sourceDataGraphView = __WEBPACK_IMPORTED_MODULE_9__SourceDataGraphView__["a" /* sourceDataGraphView */];
        this.addManualTable = __WEBPACK_IMPORTED_MODULE_6__add_manual_workflow_AddManualTable__["a" /* addManualTable */];

        if (this.sourceDataFilesSidebar) this.sourceDataFilesSidebar = __WEBPACK_IMPORTED_MODULE_4__add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */];
        if (this.dropbox) this.dropbox = __WEBPACK_IMPORTED_MODULE_3__tabs_dropbox_Dropbox__["a" /* dropbox */];
    }

    init() {
        this.sourceDataFiles.init();
        this.sourceDataPoints.init();
        this.sourceDataGraphView.init();

        this.container = $('#source_data');

        $('input[name=source_data_mode][value=files]')
            .parent()
            .css('display', 'none');
        $('input[name=source_data_mode][value=manual_workflow]')
            .parent()
            .css('display', 'none');

        // Mode
        this.container
            .find('input[name=source_data_mode]')
            .on('change', e => {
                __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].showFakeLoading();
                const element = $(e.target);

                if (!element.is(':checked')) {
                    return;
                }

                const value = element.val();
                const importedTableActive = $('#source_data_files_pre_ingestion').data('active');

                $('#source_data_files').css('display', value === 'files' ? '' : 'none');
                $('#source_data_data_points').css('display', value === 'data_points' ? '' : 'none');
                $('#source_data_new_entry').css('display', value === 'data_points' ? '' : 'none');
                $('#source_data_data_structures').css('display', value === 'data_structures' ? '' : 'none');
                $('#graph_view').css('display', value === 'graph_view' ? '' : 'none');
                $('#source_data_files_sidebar').css(
                    'display',
                    importedTableActive === true && value === 'files' ? '' : 'none'
                );
                $('#add_manual_workflow').css('display', value === 'manual_workflow' ? '' : 'none');
                $('#add_manual_sidebar').css('display', value === 'manual_workflow' ? '' : 'none');

                if (value === 'manual_workflow') {
                    __WEBPACK_IMPORTED_MODULE_5__add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].sync();
                }

                if (value === 'graph_view') {
                    __WEBPACK_IMPORTED_MODULE_9__SourceDataGraphView__["a" /* sourceDataGraphView */].syncGraph();
                }

                const header = $('#source_data .container-with-sidebar ._content ._options');
                if (value === 'manual_workflow' || value === 'files') {
                    header.css('display', 'none');
                } else {
                    header.css('display', '');
                }

                // Refresh FlexGrid.
                window.dispatchEvent(new Event('resize'));
            })
            .trigger('change');

        // Add file.
        this.container.find('._add-data-buttons ._add-file').on('click', e => {
            // $('input[name=source_data_mode][value=files]').trigger('click');
            $('#dropbox_data_files ._upload-file').trigger('click');
        });

        // Manual workflow button trigger.
        this.container.find('._add-data-buttons ._add-data-points-manually').on('click', e => {
            $('input[name=source_data_mode][value=manual_workflow]').trigger('click');
        });
    }

    sync() {
        this.sourceDataFiles.sync();
        this.sourceDataPoints.sync();
        this.sourceDataStructures.setProject(__WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentProject());
        this.sourceDataStructures.sync();
        this.sourceDataGraphView.sync();
        this.addManualTable.sync();
        if (this.sourceDataFilesSidebar) this.sourceDataFilesSidebar.sync();
    }

    beginWorkflow() {
        $('.body-container .side-menu').css({ 'pointer-events': 'none', cursor: 'not-allowed' });
    }

    endWorkflow() {
        $('.body-container .side-menu').css({ 'pointer-events': '', cursor: '' });
        $('input[name=source_data_mode][value=data_points]').trigger('click');
    }
}

const sourceData = new SourceData();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceData;



/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__ = __webpack_require__(9);









class SourceDataEditTableCell {
    constructor() {
        this.newCellIsBeingEdited = false;
    }

    init() {
        __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].init();
        this.firstCellAutomaticSelectionFinished = false;

        $('#tableCellModal .modal-footer ._close').on('click', e => {
            $('#tableCellModal').modal('hide');

            this.resetGridBorders();
        });

        $('#tableCellModal ._apply-and-next').on('click', e => this.applyAndNext(e));
    }

    sync() {
        __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].sync();
    }

    resetGridBorders() {
        // Reset borders after highlighting a range.
        $('.wj-cell').css('border-right', '1px solid #d4d4d4');
        $('.wj-cell').css('border-bottom', '1px solid #d4d4d4');
        $('.wj-cell').css('border-top', 'initial');
        $('.wj-cell').css('border-left', 'initial');
    }

    applyAndNext(e) {
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const tableSource = _.concat([], file.itemsSource);
        const fileCellProperties = file.cellProperties;
        const sel = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;

        this.saveProperties(e);

        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.enableModal();

        if (sel.isSingleCell) {
            let col = sel._col;
            let nextCol = col + 1;
            let row = sel._row;
            let newSelection = false;

            const columnsNumber = tableSource[0].length;
            const rowsNumber = tableSource.length;

            if (col < columnsNumber) {
                const cellProperties = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(fileCellProperties, `[${nextCol}][${row}]`);
                if (cellProperties && cellProperties.cellType === 'data') {
                    __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.select(new wijmo.grid.CellRange(row, nextCol, row, nextCol), true);
                } else {
                    while (nextCol < columnsNumber) {
                        nextCol++;
                        const cellProperties = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(fileCellProperties, `[${nextCol}][${row}]`);
                        if (cellProperties && cellProperties.cellType === 'data') {
                            __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.select(new wijmo.grid.CellRange(row, nextCol, row, nextCol), true);
                            newSelection = true;
                            break;
                        }
                    }

                    if (!newSelection) {
                        let nextRow = row + 1;
                        while (nextRow <= rowsNumber) {
                            nextCol = 0;
                            while (nextCol < columnsNumber) {
                                const cellProperties = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(fileCellProperties, `[${nextCol}][${nextRow}]`);
                                if (cellProperties && cellProperties.cellType === 'data') {
                                    __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.select(
                                        new wijmo.grid.CellRange(nextRow, nextCol, nextRow, nextCol),
                                        true
                                    );
                                    newSelection = true;
                                    break;
                                }
                                nextCol++;
                            }
                            if (newSelection) {
                                break;
                            }

                            nextRow++;
                        }
                    }
                }
            }
        } else {
            let newSelection = true;
            if (sel.leftCol < sel.rightCol && sel.topRow === sel.bottomRow) {
                const nextRow = sel.topRow + 1;

                for (let i = sel.leftCol; i <= sel.rightCol; i++) {
                    const cellProperties = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(fileCellProperties, `[${i}][${nextRow}]`);
                    if (!cellProperties || cellProperties.cellType !== 'data') {
                        newSelection = false;
                        break;
                    }
                }
                if (newSelection) {
                    __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.select(
                        new wijmo.grid.CellRange(nextRow, sel.rightCol, nextRow, sel.leftCol),
                        true
                    );
                }
            } else if (sel.topRow < sel.bottomRow && sel.leftCol === sel.rightCol) {
                const nextCol = sel.leftCol + 1;

                for (let i = sel.topRow; i <= sel.bottomRow; i++) {
                    const cellProperties = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(fileCellProperties, `[${nextCol}][${i}]`);
                    if (!cellProperties || cellProperties.cellType !== 'data') {
                        newSelection = false;
                        break;
                    }
                }
                if (newSelection) {
                    __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.select(
                        new wijmo.grid.CellRange(sel.bottomRow, nextCol, sel.topRow, nextCol),
                        true
                    );
                }
            }
        }
    }

    onTableSelectionChanged(s, e) {
        this.resetGridBorders();

        if (__WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].ingestionStep === __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].STRUCTURE_DATA_STEP) {
            return;
        }

        this.newCellIsBeingEdited = true;

        if (!__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource) {
            return;
        }

        const activeCell = $(e._p._activeCell);

        if (!$('#tableCellModal.modal.in').length) {
            $('#tableCellModal .modal-dialog').css({
                top: 0,
                left: 0
            });
        }
        $('#tableCellModal').modal({
            backdrop: false,
            show: true
        });

        $('#tableCellModal .modal-dialog').draggable({
            handle: '.modal-header'
        });
        $('#tableCellModal .modal-dialog').css('margin', 0);
        $('.modal-backdrop').css('background', 'transparent');

        $('#tableCellModal .modal-body').data('cell_type', 'notUsed');

        // Display modal content.
        if (__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isSingleCell) {
            $('#tableCellModal ._label-properties ._range-picker input').prop('readonly', false);
            __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].displayContentForCellModal(activeCell);
        } else {
            $('#tableCellModal ._label-properties ._range-picker input').prop('readonly', true);
            __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].displayContentForCellsModal();
        }

        // Position modal content.
        {
            const modalHeight = $('#tableCellModal .modal-content').height();
            const modalWidth = $('#tableCellModal .modal-content').width();
            const windowHeight = $(window).height();
            const windowWidth = $(window).width();
            const offset = activeCell.offset();
            const lineRangeOffset = $('#tableCellModal .modal-dialog').data('line_range') ? 30 : 0;
            $('#tableCellModal .modal-dialog').data('line_range', false);

            // When selecting a range larger than the screen, offset is not always available.
            if (offset) {
                if (windowHeight - offset.top > modalHeight) {
                    $('#tableCellModal .modal-dialog').css('top', offset.top + lineRangeOffset);
                } else {
                    if (offset.top - modalHeight > 150) {
                        $('#tableCellModal .modal-dialog').css('top', offset.top - modalHeight + lineRangeOffset);
                    } else {
                        $('#tableCellModal .modal-dialog').css(
                            'top',
                            windowHeight - modalHeight - 10 + lineRangeOffset
                        );
                    }
                }

                if (windowWidth - offset.left > 390 + modalWidth) {
                    $('#tableCellModal .modal-dialog').css('left', offset.left + activeCell.width() + 10);
                } else {
                    $('#tableCellModal .modal-dialog').css('left', offset.left - modalWidth - 10);
                }
            }
        }
    }

    saveProperties(e) {
        // We're saving the data, so no more unsaved changes!
        __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].hasUnsavedChanges = false;

        e.preventDefault();
        $('#tableCellModal ._fields input').blur();

        const cellType = $('#tableCellModal input[name=data-label-switch]:checked').val();
        let commonProperties = {};
        commonProperties.labelDimension = [];
        commonProperties.overwriteValue = [];

        // Copy properties depending on cell-type.
        switch (cellType) {
            case 'label':
                $('#tableCellModal ._label-properties ._dimension-picker-container').each(function() {
                    const overwriteValue = $(this)
                        .find('._overwrite-value input')
                        .val();
                    const labelDimension = $(this)
                        .find('._dimension-picker input')
                        .val();
                    if (overwriteValue !== 'Multiple values') {
                        commonProperties.overwriteValue.push(overwriteValue);
                    }
                    if (labelDimension !== 'Multiple values') {
                        commonProperties.labelDimension.push(labelDimension);
                    }
                });

                let range = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].rangeInput.text;
                if (range && !this.isRangeValid(range)) {
                    alert('Invalid range entered!');
                    range = '';
                }

                __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].setCommonProperty(commonProperties, 'range', range);
                break;

            case 'data':
                commonProperties.dataPointId = 'initial';
                commonProperties.failedSaving = false;

                __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].modalInputs.map(input => {
                    __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataTableCellModal__["a" /* sourceDataTableCellModal */].setCommonProperty(
                        commonProperties,
                        input._kosmosField,
                        $(input._elRef).val()
                    );
                });
                break;
        }

        let sel = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        for (let col = sel.leftCol; col <= sel.rightCol; col++) {
            for (let row = sel.topRow; row <= sel.bottomRow; row++) {
                const properties = file.getSingleCellProperties(row, col);
                const val = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellData(row, col, false);

                // Skip empty cells and cells of different types.
                if (val === '' || properties.cellType !== cellType) {
                    continue;
                }

                // Overwrite cell properties.
                Object.assign(properties, commonProperties);
                properties.value = val;

                // Set applied label warning.
                properties.appliedLabelWarning = this.setAppliedLabelWarning(col, row, properties);

                // Apply range.
                if (cellType === 'label') {
                    __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].applyDimensions(properties, __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs);
                }
            }
        }

        // Close modal and refresh.
        $('#tableCellModal').modal('hide');
        __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();
        __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
        __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.select(-1, -1);
        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].syncViews();
    }

    setAppliedLabelWarning(c, r, props) {
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const table = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource;
        const dimensions = __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs;
        let warning = false;

        table_loop: {
            for (let row = 0; row < table.length; row++) {
                for (let col = 0; col < table[row].length; col++) {
                    const cellType = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(file.cellProperties, `[${col}][${row}]['cellType']`, false);

                    if (cellType !== 'label') {
                        continue;
                    }

                    const range = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(file.cellProperties, `[${col}][${row}]['range']`, false);
                    const dimension = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(file.cellProperties, `[${col}][${row}]['labelDimension']`, false);

                    if (!(range && dimension[0])) {
                        continue;
                    }

                    const rangeObject = XLSX.utils.decode_range(range);

                    if (
                        !(c >= rangeObject.s.c && c <= rangeObject.e.c && r >= rangeObject.s.r && r <= rangeObject.e.r)
                    ) {
                        continue;
                    }

                    const cellProperties = file.getSingleCellProperties(row, col);
                    const selectedDimension = dimensions.find(column => {
                        return column.label === dimension[0];
                    });
                    const slug = selectedDimension.slug;

                    if (!__WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].areIdentical(props[slug], cellProperties.value)) {
                        warning = true;

                        break table_loop;
                    }
                }
            }
        }

        return warning;
    }

    /**
     * Checks if the given range is valid.
     *
     * @param range
     * @returns {boolean} True if the range is valid, false otherwise.
     */
    isRangeValid(range) {
        const rangeSeparatorIndex = range.indexOf(':');
        if (rangeSeparatorIndex === -1) {
            return false;
        }

        const newRange = XLSX.utils.decode_range(range);

        const sourceFile = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const fileRowsNumber = sourceFile.getNumberOfRows();
        const fileColsNumber = sourceFile.getNumberOfCols();

        if (newRange.e.r > fileRowsNumber || newRange.e.c > fileColsNumber) {
            return false;
        }

        return true;
    }
}

const sourceDataEditTableCell = new SourceDataEditTableCell();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataEditTableCell;



/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Constants__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_DimensionTypesService__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalysis__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DataStructure__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Dimension__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__SourceFile__ = __webpack_require__(41);









class Project {
    constructor(project) {
        this.name = '';

        this.dataPoints = [];

        /** @type {SourceFile[]} */
        this.sourceFiles = {};

        /** @type {DataStructure[][]} */
        this.dataStructuresPerDimension = {};

        /** @type {Dimension[]} */
        this.dimensions = [];

        /** @type {DataExplorerAnalysis[]} */
        this.analyses = [
            new __WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalysis__["a" /* DataExplorerAnalysis */]({
                id: 0,
                name: 'Example Analysis'
            })
        ];

        this.calculateDeltaByAddingChildren = false;

        // Initialize from simple object.
        if (project) {
            Object.assign(this, project);

            for (const uuid in this.sourceFiles) {
                this.sourceFiles[uuid] = new __WEBPACK_IMPORTED_MODULE_7__SourceFile__["a" /* SourceFile */](this.sourceFiles[uuid]);
            }

            this.dimensions = this.dimensions.map(dimension => {
                return new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */](dimension);
            });

            for (const dimension in this.dataStructuresPerDimension) {
                const dataStructures = this.dataStructuresPerDimension[dimension];
                for (const value in dataStructures) {
                    dataStructures[value] = new __WEBPACK_IMPORTED_MODULE_5__DataStructure__["a" /* DataStructure */](dataStructures[value]);
                }
            }

            this.analyses = this.analyses.map(analysis => {
                return new __WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalysis__["a" /* DataExplorerAnalysis */](analysis);
            });
        }

        // Default dimensions
        if (this.dimensions.length === 0) {
            this.dimensions = [
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'value',
                    label: 'Value',
                    dataType: __WEBPACK_IMPORTED_MODULE_2__services_DimensionTypesService__["a" /* dimensionTypesService */].NUMBER,
                    special: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'attribute',
                    label: 'Attribute',
                    hasDataStructures: true,
                    hasGlobalTerms: true,
                    usedAsIdentifier: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'legal_entity',
                    label: 'Legal Entity',
                    usedAsIdentifier: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'time',
                    label: 'Time',
                    usedAsIdentifier: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'layer',
                    label: 'Layer',
                    usedAsIdentifier: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'quality',
                    label: 'Quality',
                    usedAsIdentifier: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'unit',
                    label: 'Unit',
                    usedAsIdentifier: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'scale',
                    label: 'Scale',
                    dataType: __WEBPACK_IMPORTED_MODULE_2__services_DimensionTypesService__["a" /* dimensionTypesService */].NUMBER,
                    special: true
                }),
                new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
                    slug: 'inverse',
                    label: 'Inverse',
                    special: true
                })
            ];
        }
    }

    addDataPointsWithFile(dataPoints, fileName) {
        // Create source file or set as manual.
        let uuid = '';
        if (fileName) {
            const sourceFile = new __WEBPACK_IMPORTED_MODULE_7__SourceFile__["a" /* SourceFile */]();
            sourceFile.name = fileName;
            sourceFile.hidden = true;
            uuid = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getNextUuid();
            sourceFile.uuid = uuid;
            this.sourceFiles[uuid] = sourceFile;
        } else {
            uuid = 'manual';
        }

        // Add data points.
        dataPoints = dataPoints.map(item => {
            item.id = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getNextUuid();
            item.source = uuid;

            // Fix time.
            if (typeof item.time !== 'undefined') {
                item.time = String(item.time);
            }

            return item;
        });
        this.dataPoints = this.dataPoints.concat(dataPoints);
    }

    /**
     * Validate a data point before adding/saving it.
     */
    validateDataPoint(dataPoint, modifiedFromAnalysis = false) {
        // Validate fields.
        if ((!dataPoint.value && dataPoint.value !== 0) || !dataPoint.attribute || !dataPoint.scale) {
            return {
                success: false,
                error: 'Value, Attribute, and Scale are required.'
            };
        }

        const dimensions = this.getDimensions();

        for (let propertyName in dataPoint) {
            if (dataPoint.hasOwnProperty(propertyName)) {
                if (dataPoint[propertyName] !== '') {
                    for (let i = 0; i < dimensions.length; i++) {
                        let currentDimension = dimensions[i];
                        let currentDimensionSlug = dimensions[i].slug;

                        if (propertyName === currentDimensionSlug) {
                            switch (currentDimension.dataType) {
                                case __WEBPACK_IMPORTED_MODULE_2__services_DimensionTypesService__["a" /* dimensionTypesService */].NUMBER:
                                    if (isNaN(dataPoint[propertyName])) {
                                        return {
                                            success: false,
                                            error: `"${dimensions[i].label}" field must be a number`
                                        };
                                    }
                                    continue;
                                case __WEBPACK_IMPORTED_MODULE_2__services_DimensionTypesService__["a" /* dimensionTypesService */].CURRENCY:
                                    if (/\d/.test(dataPoint[propertyName])) {
                                        return {
                                            success: false,
                                            error: `"${dimensions[i].label}" field must contain only letters`
                                        };
                                    }
                            }
                        }
                    }
                }
            }
        }

        // Check for duplicates.
        let matchingDataPoint = this.getMatchingDataPoint(dataPoint);
        if (matchingDataPoint && dataPoint.id !== matchingDataPoint.id) {
            return {
                success: false,
                error:
                    'This data point already exists (same dimensions and with a value of ' +
                    matchingDataPoint.value +
                    ').'
            };
        }

        // Check for source files.
        if (matchingDataPoint && !modifiedFromAnalysis) {
            dataPoint.source = matchingDataPoint.source;
        }
        if (
            !modifiedFromAnalysis &&
            matchingDataPoint &&
            dataPoint.source !== 'manual' &&
            !__WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].isDeltaZero(dataPoint.value - matchingDataPoint.value)
        ) {
            return {
                success: false,
                error: __WEBPACK_IMPORTED_MODULE_1__Constants__["a" /* constants */].CANNOT_EDIT_VALUE
            };
        }

        return {
            success: true
        };
    }

    /**
     * If no ID is given, a new data-point will be created. Otherwise, the existing data-point will be updated.
     *
     * @param dataPoint
     * @param modifiedFromAnalysis
     * @returns {*} Returns an object with the following properties: success (bool), error (string), id (of data-point).
     */
    addDataPoint(dataPoint, modifiedFromAnalysis = false) {
        const validation = this.validateDataPoint(dataPoint, modifiedFromAnalysis);
        if (validation.success === false) {
            return validation;
        }

        // Parse scale.
        dataPoint.scale = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseScale(dataPoint.scale);

        // Save global stuff.
        const dimensions = this.getDimensions();
        dimensions.forEach(dimension => {
            const parentSlug = dimension.getParentSlug();
            const groupSlug = dimension.getGroupSlug();
            const globalTermSlug = dimension.getGlobalTermSlug();
            const timeIntervalBegin = dimension.getTimeIntervalBeginSlug();
            const timeIntervalEnd = dimension.getTimeIntervalEndSlug();

            // Auto-detect time intervals, if any.
            // TODO: Check project to ensure time intervals aren't already set.
            if (
                dimension.hasTimeIntervals &&
                dataPoint[dimension.slug] &&
                !dataPoint[timeIntervalBegin] &&
                !dataPoint[timeIntervalEnd]
            ) {
                // [4-digit-year]
                const justYear = /^[0-9]{4}$/i;
                // [3-character-month dash 2-digit-year]
                const monthYear = /^([a-zA-Z]{3})-([0-9]{2})$/i;
                // [3-character-month dash 4-digit-year]
                const monthFullYear = /^([a-zA-Z]{3})-([0-9]{4})$/i;

                const months = {
                    jan: '01',
                    feb: '02',
                    mar: '03',
                    apr: '04',
                    may: '05',
                    jun: '06',
                    jul: '07',
                    aug: '08',
                    sep: '09',
                    oct: '10',
                    nov: '11',
                    dec: '12'
                };

                if (justYear.test(dataPoint[dimension.slug])) {
                    dataPoint[timeIntervalBegin] = dataPoint[dimension.slug] + '-01-01';
                    dataPoint[timeIntervalEnd] = dataPoint[dimension.slug] + '-12-31';
                } else if (monthYear.test(dataPoint[dimension.slug])) {
                    const inputData = monthYear.exec(dataPoint[dimension.slug]);
                    inputData[1] = inputData[1].toLowerCase();
                    if (months.hasOwnProperty(inputData[1])) {
                        const month = months[inputData[1]];
                        const year = moment.parseTwoDigitYear(inputData[2]);

                        dataPoint[timeIntervalBegin] = year + '-' + month + '-01';
                        dataPoint[timeIntervalEnd] = moment(
                            new Date(year, parseInt(month.replace(/^0/, '')), 0)
                        ).format('YYYY-MM-DD');
                    }
                } else if (monthFullYear.test(dataPoint[dimension.slug])) {
                    const inputData = monthFullYear.exec(dataPoint[dimension.slug]);
                    inputData[1] = inputData[1].toLowerCase();

                    if (months.hasOwnProperty(inputData[1])) {
                        const month = months[inputData[1]];
                        const year = parseInt(inputData[2]);

                        dataPoint[timeIntervalBegin] = year + '-' + month + '-01';
                        dataPoint[timeIntervalEnd] = moment(
                            new Date(year, parseInt(month.replace(/^0/, '')), 0)
                        ).format('YYYY-MM-DD');
                    }
                }
            }

            this.addDataStructure(
                dimension.slug,
                dataPoint[dimension.slug],
                dataPoint[parentSlug],
                dataPoint[groupSlug],
                dataPoint[globalTermSlug],
                dataPoint[timeIntervalBegin],
                dataPoint[timeIntervalEnd]
            );

            delete dataPoint[parentSlug];
            delete dataPoint[groupSlug];
            delete dataPoint[globalTermSlug];
            delete dataPoint[timeIntervalBegin];
            delete dataPoint[timeIntervalEnd];
        });

        // Add data point.
        const dataPoints = this.dataPoints;
        if (dataPoint.id) {
            const key = this.getKeyForDataPointId(dataPoint.id);
            dataPoints[key] = dataPoint;
        } else {
            dataPoint.id = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getNextUuid();
            dataPoints.unshift(dataPoint);
        }

        // Modify source file.
        {
            const uuid = dataPoint.source;
            const project = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject();
            const file = project.sourceFiles[uuid];
            if (file) {
                file.dataPointsCopy.map(dp => {
                    if (dp.id === dataPoint.id) {
                        const cell = file.cellProperties[dp.col][dp.row];
                        Object.keys(dataPoint).forEach(function(key) {
                            cell[key] = dataPoint[key];
                        });

                        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].saveCurrentProject();
                    }
                });
            }
        }

        return {
            success: true,
            id: dataPoint.id
        };
    }

    /**
     * Get dimension by slug.
     *
     * @param slug
     *
     * @returns Dimension
     */
    getDimensionBySlug(slug) {
        for (let i = 0; i < this.dimensions.length; i++) {
            const dimension = this.dimensions[i];

            if (dimension.slug === slug) {
                return dimension;
            }
        }

        return null;
    }

    /**
     * @returns {Dimension[]}
     */
    getDimensions(showAll) {
        if (!showAll) {
            return this.dimensions.filter(dimension => dimension.isVisible === true).slice();
        }
        return this.dimensions.slice();
    }

    /**
     * @returns {Dimension}
     */
    addDimension(slug, label) {
        // Check if slug is already used.
        const sameSlug = this.dimensions.filter(dimension => {
            return dimension.slug === slug;
        });
        if (sameSlug.length > 0) {
            return null;
        }

        // Add new dimension.
        const dimension = new __WEBPACK_IMPORTED_MODULE_6__Dimension__["a" /* Dimension */]({
            slug: slug,
            label: label
        });
        this.dimensions.push(dimension);

        return dimension;
    }

    /**
     * @returns {Dimension|null}
     */
    addDimensionWithPrompt() {
        let label = prompt('Enter the name of your custom dimension:');
        if (!label) {
            return null;
        }

        let slug = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getSlugFromName(label);

        return this.addDimension(slug, label);
    }

    /**
     * @returns {Dimension[]}
     */
    getFieldsForDimensions() {
        let dimensions = this.getDimensions();

        dimensions = dimensions.reduce((a, dimension) => {
            a.push(dimension);
            if (dimension.hasDataStructures) {
                a.push({
                    slug: dimension.getParentSlug(),
                    label: dimension.label + ' (Parent)',
                    shortLabel: 'Parent',
                    child: true,
                    isParent: true,
                    attribute: dimension.slug
                });
                a.push({
                    slug: dimension.getGroupSlug(),
                    label: dimension.label + ' (Group)',
                    shortLabel: 'Group',
                    child: true,
                    isGroup: true,
                    attribute: dimension.slug
                });
            }

            if (dimension.hasGlobalTerms) {
                a.push({
                    slug: dimension.getGlobalTermSlug(),
                    label: dimension.label + ' (Global Term)',
                    shortLabel: 'Global Term',
                    child: true,
                    isGlobalTerm: true
                });
            }

            if (dimension.hasTimeIntervals) {
                a.push({
                    slug: dimension.getTimeIntervalBeginSlug(),
                    label: dimension.label + ' (Begin)',
                    shortLabel: 'Begin',
                    child: true,
                    isTime: true
                });

                a.push({
                    slug: dimension.getTimeIntervalEndSlug(),
                    label: dimension.label + ' (End)',
                    shortLabel: 'End',
                    child: true,
                    isTime: true
                });
            }

            return a;
        }, []);

        return dimensions;
    }

    /**
     * @returns {Dimension[]}
     */
    getIdentityDimensions() {
        let dimensions = this.getDimensions();

        dimensions = dimensions.filter(dimension => {
            return dimension.usedAsIdentifier;
        });

        return dimensions;
    }

    getDimensionForAutoReconciliations() {
        return {
            dimension: 'quality',
            value: 'Adjusted'
        };
    }

    /**
     * @returns {Dimension[]}
     */
    getDimensionsForDataStructureValidation(dimensionSlugToValidate) {
        let dimensions = this.getIdentityDimensions();
        const dfar = this.getDimensionForAutoReconciliations();

        // Remove dimension-to-validate and dimension used for auto-reconciliation.
        dimensions = dimensions.filter(dimension => {
            return dimension.slug !== dimensionSlugToValidate && dimension.slug !== dfar.dimension;
        });

        return dimensions;
    }

    getMatchingDataPoint(point1) {
        const dimensions = this.getIdentityDimensions();

        for (let i = 0; i < this.dataPoints.length; i++) {
            const point2 = this.dataPoints[i];
            let matching = true;

            for (let j = 0; j < dimensions.length; j++) {
                const d = dimensions[j];
                const a = typeof point1[d.slug] !== 'undefined' ? point1[d.slug] : '';
                const b = typeof point2[d.slug] !== 'undefined' ? point2[d.slug] : '';

                if (a != b) {
                    matching = false;
                    break;
                }
            }

            if (matching) {
                return point2;
            }
        }

        return false;
    }

    getKeyForDataPointId(id) {
        for (let i = 0; i < this.dataPoints.length; i++) {
            const dataPoint = this.dataPoints[i];

            if (dataPoint.id === id) {
                return i;
            }
        }

        return null;
    }

    /**
     * Get data structure objects for a certain dimension.
     *
     * @param dimensionSlug
     *
     * @returns {DataStructure[]}
     */
    getDataStructuresForDimension(dimensionSlug) {
        if (!(dimensionSlug in this.dataStructuresPerDimension)) {
            this.dataStructuresPerDimension[dimensionSlug] = {};
        }

        return this.dataStructuresPerDimension[dimensionSlug];
    }

    /**
     * This will add data-structure fields to a data point. For example, if the data-point has attribute='Net Revenue',
     * it could add 'attribute__parent'='Gross Profit'.
     */
    addDataStructuresToDataPoint(dataPoint) {
        dataPoint = Object.assign({}, dataPoint);
        const dimensions = this.getDimensions();

        dimensions.forEach(dimension => {
            const ds = this.getDataStructuresForDimension(dimension.slug)[dataPoint[dimension.slug]];

            if (ds) {
                if (dimension.hasDataStructures) {
                    dataPoint[dimension.getParentSlug()] = ds.parentAttribute;
                    dataPoint[dimension.getGroupSlug()] = ds.group;
                }

                if (dimension.hasGlobalTerms) {
                    dataPoint[dimension.getGlobalTermSlug()] = ds.globalTerm;
                }

                if (dimension.hasTimeIntervals) {
                    dataPoint[dimension.getTimeIntervalBeginSlug()] = ds.timeIntervalBegin;
                    dataPoint[dimension.getTimeIntervalEndSlug()] = ds.timeIntervalEnd;
                }
            }
        });

        return dataPoint;
    }

    /**
     *
     * @param dimension             Required
     * @param value                 Required
     * @param parent                Optional, can be null
     * @param group                 Optional, can be null
     * @param globalTerm            Optional, can be null
     * @param timeIntervalBegin     Optional, can be null
     * @param timeIntervalEnd       Optional, can be null
     * @returns {DataStructure}
     */
    addDataStructure(dimension, value, parent, group, globalTerm, timeIntervalBegin, timeIntervalEnd) {
        // Check if structure already exists.
        const dataStructures = this.getDataStructuresForDimension(dimension);
        let ds;
        if (value in dataStructures) {
            ds = dataStructures[value];
        } else {
            ds = new __WEBPACK_IMPORTED_MODULE_5__DataStructure__["a" /* DataStructure */]();
            ds.attribute = value;
            dataStructures[value] = ds;
        }

        // Apply parent attribute.
        if (typeof parent !== 'undefined' && !this.isDataStructureLoop(dataStructures, ds, parent)) {
            ds.parentAttribute = parent;
        }

        // Apply group.
        if (typeof group !== 'undefined') {
            ds.group = group;
        }

        // Apply global term.
        if (typeof globalTerm !== 'undefined') {
            ds.globalTerm = globalTerm;
        }

        // Apply time interval.
        if (typeof timeIntervalBegin !== 'undefined') {
            ds.timeIntervalBegin = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].dateToString(timeIntervalBegin);
        }
        if (typeof timeIntervalEnd !== 'undefined') {
            ds.timeIntervalEnd = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].dateToString(timeIntervalEnd);
        }

        // Remove group if parent empty.
        if (!ds.parentAttribute) {
            delete ds.group;
        }

        return ds;
    }

    getDataPointsForSource(uuid) {
        return this.dataPoints.filter(dataPoint => {
            return dataPoint.source === uuid;
        });
    }

    /**
     * Check if this new data structure would result in an endless loop.
     *
     * @param dataStructures {DataStructure[]}
     * @param dataStructure {DataStructure}
     * @param parent
     *
     * @return {boolean}
     */
    isDataStructureLoop(dataStructures, dataStructure, parent) {
        // Fetch parent data-structure.
        let parentStructure = dataStructures[parent];
        if (!parentStructure) {
            return false;
        }

        do {
            // Did we reach a loop?
            if (parentStructure.attribute === dataStructure.attribute) {
                return true;
            }

            // Fetch parent.
            parentStructure = dataStructures[parentStructure.parentAttribute];
        } while (parentStructure);

        // No loop.
        return false;
    }

    getChildren(dimensionSlug, value) {
        const children = [];
        const dimension = this.getDimensionBySlug(dimensionSlug);

        // Abort if dimension does not have data structures.
        if (!dimension || !dimension.hasDataStructures) {
            return children;
        }

        // Search for children.
        const dataStructures = this.getDataStructuresForDimension(dimensionSlug);
        for (const attribute in dataStructures) {
            const dataStructure = dataStructures[attribute];

            if (dataStructure.parentAttribute === value) {
                children.push(dataStructure.attribute);
            }
        }

        return children;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Project;



/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);



class SourceDataService {
    constructor() {}

    /**
     * @param field
     * @param project Project
     * @returns {Array}
     */
    getAvailableValuesForField(field, project) {
        const dataset = project.dataPoints;
        let values = [];

        if (field.isParent) {
            values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(dataset, field.attribute);
        } else if (field.isGroup) {
            const dataStructures = Object.values(project.getDataStructuresForDimension(field.attribute));
            values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(dataStructures, 'group');
        }
        // TODO
        else if (field.isGlobalTerm) {
            values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getGlobalTerms();
        } else if (field.slug !== 'value' && field.slug !== 'inverse') {
            values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(dataset, field.slug);
        } else if (field.slug === 'inverse') {
            values = ['No', 'Yes'];
        }

        return values;
    }

    /**
     *
     * @param dimension
     * @param project Project
     * @returns {wijmo.grid.DataMap}
     */
    getDataMapForDimension(dimension, project) {
        if (dimension.slug === 'value') {
            return null;
        }

        const dictionaries = dimension.dictionaries;
        let vals = [];
        if (dictionaries) {
            dictionaries.map(dictionary => {
                vals = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["concat"])(vals, __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getGlobalTermsByDictionary(dictionary));
            });
        }

        let values = vals.map(value => {
            return {
                value: value
            };
        });

        const dataMap = new wijmo.grid.DataMap(values, 'value', 'value');

        return dataMap;
    }
}

const sourceDataService = new SourceDataService();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataService;



/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class DimensionTypesService {
    constructor() {
        this.STRING = 0;
        this.NUMBER = 1;
        this.CURRENCY = 2;
    }
}

const dimensionTypesService = new DimensionTypesService();
/* harmony export (immutable) */ __webpack_exports__["a"] = dimensionTypesService;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(18),
    isObjectLike = __webpack_require__(13);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(7);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(14);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(117),
    listCacheDelete = __webpack_require__(118),
    listCacheGet = __webpack_require__(119),
    listCacheHas = __webpack_require__(120),
    listCacheSet = __webpack_require__(121);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(70);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(123);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__tabs_data_explorer_DataExplorerAnalyses__ = __webpack_require__(3);



class Tab {
    constructor() {
        this.isDirty = false;
        this.tabHref = null;
    }

    syncIfVisible(onlyIfDirty) {
        if (onlyIfDirty && !this.isDirty) {
            return;
        }
        let currentTab = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentTab();

        // If this tab is not visible, postpone syncing it.
        if (currentTab !== this.tabHref) {
            this.isDirty = true;
            if (__WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentTab() !== '#output_table') {
                __WEBPACK_IMPORTED_MODULE_1__tabs_data_explorer_DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].backToList();
            }
        }
        // Sync now.
        else {
            console.log('Sync Tab "' + this.tabHref + '"');
            this.isDirty = false;
            this.sync();
        }
    }

    sync() {}
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Tab;



/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataExplorerHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataExplorerQueryBuilder__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerSections__ = __webpack_require__(19);




class DataExplorerFormulas {
    addFormulaSection(container, id, formula) {
        // Create generic section.
        let section = __WEBPACK_IMPORTED_MODULE_2__DataExplorerSections__["a" /* dataExplorerSections */].addSection('formula', container, 'Formula', id);
        section.addClass('item-with-formula');

        // Create formula input.
        let input = $(
            '<div contenteditable="true" class="_formula _prevent-sort" name="formula" id="formula_input_' +
                id +
                '" value="">'
        );
        input.html(formula);
        this.initInput(input);
        section.append(input);

        // Create query button.
        let queryElement = $('<span class="_button _query"><i class="fa fa-flask" aria-hidden="true"></i></span>');
        queryElement.on('click', e => {
            this.onBuilderClick(input, e);
        });
        section.append(queryElement);

        return section;
    }

    initInput(input) {
        this.parseFormulaInput(input);

        input.on('blur', e => {
            this.onInputBlur(e);
        });
        input.on('click', 'i', e => {
            this.onInputBuilderClick(e);
        });
        input.on('keydown', e => {
            this.onInputKeyDown(e);
        });
    }

    onInputBlur(e) {
        const input = $(e.target);

        // Skip?
        if (input.prop('data-skip-blur')) {
            input.prop('data-skip-blur', false);
            return;
        }

        this.parseFormulaInput(input);
        __WEBPACK_IMPORTED_MODULE_0__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
    }

    onInputBuilderClick(e) {
        const icon = $(e.target);
        const input = $(e.delegateTarget);
        let filters;
        try {
            filters = JSON.parse(icon.attr('data-args'));
        } catch (e) {
            filters = {};
        }

        // Skip next blur event.
        input.prop('data-skip-blur', true);
        __WEBPACK_IMPORTED_MODULE_1__DataExplorerQueryBuilder__["a" /* dataExplorerQueryBuilder */].open(filters, query => {
            // Update formula.
            query = query.slice(6, -1);
            icon.attr('data-args', query);
            this.parseFormulaInput(input);

            if (!input.attr('data-equality-prefix')) {
                __WEBPACK_IMPORTED_MODULE_0__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
            } else {
                input.trigger('blur');
            }
        });

        e.preventDefault();
    }

    onInputKeyDown(e) {
        if (e.keyCode === 13) {
            $(e.target).blur();
            e.preventDefault();
        }
    }

    onBuilderClick(input, e) {
        __WEBPACK_IMPORTED_MODULE_1__DataExplorerQueryBuilder__["a" /* dataExplorerQueryBuilder */].open({}, query => {
            if (input.attr('data-equality-prefix')) {
                input.html('=' + query);
                this.parseFormulaInput(input);
                input.trigger('blur');
            } else {
                input.html(query);
                this.parseFormulaInput(input);
                __WEBPACK_IMPORTED_MODULE_0__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
            }
        });

        e.preventDefault();
    }

    parseFormulaInput(input) {
        if (input.attr('data-equality-prefix')) {
            // Check if we need and have an equality prefix.
            if (input.html().slice(0, 1) !== '=') {
                return;
            }

            // Remove equality prefix.
            input.html(input.html().slice(1));

            this.parseFormulaInputWithoutPrefix(input);

            // Add back equality prefix.
            input.html('=' + input.html());
        } else {
            this.parseFormulaInputWithoutPrefix(input);
        }
    }

    parseFormulaInputWithoutPrefix(input) {
        // Do all of this twice. E.g. if user entered formula in lower-case,
        // we need to do this twice to that the data-formula is properly converted to uppercase.
        for (let i = 0; i < 2; i++) {
            // Transform images back to formulas.
            const inputClone = input.clone();
            inputClone.find('[data-args]').each((index, element) => {
                // Get original value.
                const value = $(element).attr('data-args');

                // Replace image.
                $(element).replaceWith(value);
            });

            // Get formula.
            let value = inputClone.text();
            value = value.trim();
            inputClone.remove();

            // Parse formula.
            input.attr('data-formula', value);
            const result = this.convertFormulaToHtml(value);
            input.html(result);
        }
    }

    convertFormulaToHtml(formula) {
        let rootNode;

        // Parse using math.js.
        try {
            rootNode = math.parse(formula);
        } catch (e) {
            // Cannot parse, simply return the formula as-is.
            return formula;
        }

        // Turn functions to uppercase.
        rootNode = rootNode.transform(node => {
            if (node.isFunctionNode && node.fn.isSymbolNode) {
                return new math.expression.node.FunctionNode(node.fn.name.toUpperCase(), node.args);
            } else {
                return node;
            }
        });

        // Transform to string.
        const customString = {
            QUERY: function(node, options) {
                // Remove surrounding "QUERY()".
                const args = node.toString().slice(6, -1);

                // Create image.
                const img = $('<i class="fa fa-flask" aria-hidden="true"></i>');
                img.attr('data-args', args);

                // Return string.
                return 'QUERY(' + img[0].outerHTML + ')';
            }
        };
        let newValue = rootNode.toString({
            handler: customString,
            lowerExp: -100,
            upperExp: 100
        });
        if (typeof newValue !== 'string' || newValue === 'undefined') {
            newValue = '';
        }

        return newValue;
    }
}

const dataExplorerFormulas = new DataExplorerFormulas();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerFormulas;



/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorer__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorerVirtualTable__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__table_DataExplorerCellEditing__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__table_DataExplorerCellViewer__ = __webpack_require__(132);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerDrillDown__ = __webpack_require__(74);








/**
 * Class to render a HTML table based on Wijmo's FlexGrid component.
 */
class DataExplorerRenderTable {
    constructor() {
        this._inUpdatedLayout = false;
        this._firstTimeRefreshTable = false;
        this._tableContainer = $('#data-explorer-table');
        if (!localStorage.getItem('blobExcelData'))
            this.flexgrid = new wijmo.grid.FlexGrid(this._tableContainer[0], {
                isReadOnly: true,
                itemsSource: [],
                allowSorting: false,
                allowDragging: 'None',
                updatedLayout: () => {
                    if (this._inUpdatedLayout) {
                        this._inUpdatedLayout = false;
                    } else {
                        this._inUpdatedLayout = true;
                        this.flexgrid.autoSizeColumns(0, this.flexgrid.columns.length);
                    }
                },
                formatItem: (s, e) => {
                    this._formatItem(s, e);
                    __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerDrillDown__["a" /* dataExplorerDrillDown */]._formatItem(s, e);
                },
                updatedView: () => {
                    this.flexgrid.columns.map((column, index) => {
                        this.flexgrid.columns[index].header = XLSX.utils.encode_col(index);
                    });
                    $(this.flexgrid.rowHeaders._e)
                        .find('.wj-row .wj-cell.wj-header')
                        .each(function(index) {
                            $(this).text(index + 1);
                        });
                },
                beginningEdit: (s, e) => {
                    const col = e._rng._col;
                    const row = e._rng._row;

                    // Disable edits for cells matching multiple data-points.
                    let cellData = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(__WEBPACK_IMPORTED_MODULE_3__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */], `tableData[${row - 1}][${col}]`);
                    if (cellData.numberOfDataPoints > 1) {
                        // Open cell-viewer instead.
                        __WEBPACK_IMPORTED_MODULE_5__table_DataExplorerCellViewer__["a" /* dataExplorerCellViewer */].showCellViewer(cellData);

                        e.cancel = true;
                        return;
                    }

                    // Disable edits if cell has custom formula.
                    if (cellData.customFormula) {
                        e.cancel = true;
                        return;
                    }
                },
                cellEditEnding: (s, e) => {
                    __WEBPACK_IMPORTED_MODULE_4__table_DataExplorerCellEditing__["a" /* dataExplorerCellEditing */].cellEditEnding(s, e);
                },
                cellEditEnded: (s, e) => {
                    __WEBPACK_IMPORTED_MODULE_4__table_DataExplorerCellEditing__["a" /* dataExplorerCellEditing */].cellEditEnded(s, e);
                },
                selectionChanged: (s, e) => {
                    __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].dataExplorerCellFormulas.onSelectionChanged(s, e);
                },
                onPastingCell: () => {
                    console.log('Do not do anything here.');
                }
            });

        console.log('this.flexgrid-->', this.flexgrid);
    }

    updateTable() {
        let cols = $('#column_box > .item');

        // Prepare new item source.
        let headerRow = [''];
        for (let i = 0; i < cols.length; i++) {
            headerRow.push(
                $(cols[i])
                    .find('input')
                    .val()
            );
        }
        let itemsSource = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["concat"])([], __WEBPACK_IMPORTED_MODULE_3__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].formattedTableData);
        itemsSource.unshift(headerRow);

        // Change itemSource of Wijmo table, while keeping the same selection.
        const selection = this.flexgrid.selection;
        this.flexgrid.itemsSource = itemsSource;
        this.flexgrid.collectionView.refresh();
        this.flexgrid.selection = selection;

        if (!this._firstTimeRefreshTable) {
            this._firstTimeRefreshTable = true;

            setTimeout(() => {
                this.flexgrid.collectionView.refresh();
            }, 500);
        }
    }

    _formatItem(s, e) {
        if (!__WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentProject()) {
            return;
        }

        // Ignore header cells.
        if (e.panel !== s.cells) {
            return;
        }

        const col = e._rng._col;
        const row = e._rng._row;
        const cellElement = $(e.cell);

        // Cells are reused, so we need to reset styling and attributes.
        {
            cellElement.removeClass('multiple-value-datapoint');
            cellElement.attr('data-toggle', null);
            cellElement.attr('data-placement', null);
            cellElement.attr('data-title', null);
            cellElement.css({
                'padding-left': null
            });

            // Remove tooltip, if any,
            const tooltip = cellElement.data('tooltipInstance');
            if (tooltip) {
                tooltip.dispose();
            }
        }

        if (row === 0) {
            cellElement.css('font-weight', 'bold');
        }

        if (col > 0) {
            cellElement.css('text-align', 'right');
        }

        if (col === 0 && row === 0) {
            const filtersToDisplay = $(`#filter_box_a1 .item`) ? $(`#filter_box_a1 .item`) : '';
            this._displayFiltersWithSeparator(
                filtersToDisplay,
                dataExplorerRenderTable.flexgrid.cells.getCellElement(0, 0)
            );

            const headlineFilter = $(`#filter_box_headline .item`) ? $(`#filter_box_headline .item`) : '';
            this._displayFiltersWithSeparator(
                headlineFilter,
                '._data-explorer-template-content .headline-filter-container'
            );
        }

        // Add tooltip for cells matching multiple data-points.
        // TODO: Keep a reference of these tooltips and properly dispose of them. Memory leak;
        let cellData = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(__WEBPACK_IMPORTED_MODULE_3__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */], `tableData[${row - 1}][${col}]`);
        if (cellData && cellData.numberOfDataPoints > 1) {
            const title = `This value is calculated from ${
                cellData.numberOfDataPoints
            } data points. Click for more info.`;
            cellElement.addClass('multiple-value-datapoint');

            const tooltip = new Tooltip(cellElement, {
                container: document.body,
                boundariesElement: document.body,
                placement: 'bottom',
                title: title
            });
            cellElement.data('tooltipInstance', tooltip);
        }
    }

    _displayFiltersWithSeparator(filters, target) {
        if (!filters) {
            return;
        }

        filters = filters.toArray();
        filters = filters.map(filter => {
            return $(filter).text();
        });

        const title = Object.values(filters).join(' - ');
        $(target).text(title);
        $(target).val(title);
    }
}

const dataExplorerRenderTable = new DataExplorerRenderTable();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerRenderTable;



/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Constants__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_DimensionTypesService__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__SourceDataPointsSidebar__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SourceDataService__ = __webpack_require__(24);








class SourceDataPoints {
    constructor() {
        this.flexgrid = null;
        this.inUpdatedLayout = false;
        this.idFilter = [];
        this.columnDefs = [];
        this.scale = 1;
    }

    init() {
        __WEBPACK_IMPORTED_MODULE_5__SourceDataPointsSidebar__["a" /* sourceDataPointsSidebar */].init();

        this.container = $('#source_data_data_points');
        this.rowCounter = $('#_data-points-counter');

        this.columnsSelect = new wijmo.input.MultiSelect(this.container.find('._column-selector')[0], {
            placeholder: 'Select Columns',
            itemsSource: [],
            headerFormat: '{count} columns selected',
            displayMemberPath: 'label',
            checkedMemberPath: 'selected',
            onCheckedItemsChanged: () => {
                this.updateColumns();

                // Odd, but otherwise the filters aren't updated visually (i.e. the "wj-filter-on" classes aren't added).
                this.flexGridFilter.filterDefinition = this.flexGridFilter.filterDefinition;
            }
        });

        this.collectionView = new wijmo.collections.CollectionView([], {
            filter: item => {
                // Filter by ID.
                const matchesId = this.idFilter.length === 0 || this.idFilter.indexOf(item.id) !== -1;

                return matchesId;
            }
        });

        this.flexgrid = new wijmo.grid.FlexGrid('#source_data_all_data_table', {
            isReadOnly: false,
            selectionMode: 'Row',
            itemsSource: this.collectionView.items,
            autoGenerateColumns: false,
            formatItem: (s, e) => {
                if (e.panel === s.cells) {
                    let item = s.rows[e.row].dataItem;

                    switch (s.columns[e.col].binding) {
                        case 'value':
                            e.cell.childNodes[0].nodeValue = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item.value);
                            break;

                        case '__normalized_value':
                            e.cell.innerHTML = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item['__normalized_value'] / this.scale);
                            break;

                        case 'scale':
                            // e.cell.innerHTML = item.scale;
                            break;
                    }
                }
            },
            selectionChanged: (s, e) => {
                const selection = this.flexgrid.selection;
                let item;

                if (selection._row in s.rows) {
                    item = s.rows[selection._row].dataItem;
                } else {
                    item = null;
                }

                __WEBPACK_IMPORTED_MODULE_5__SourceDataPointsSidebar__["a" /* sourceDataPointsSidebar */].setSelectedItem(item);
            },
            updatedLayout: () => {
                if (this.inUpdatedLayout) {
                    this.inUpdatedLayout = false;
                } else {
                    this.inUpdatedLayout = true;
                    this.flexgrid.autoSizeRow(0, true);
                }
            },
            beginningEdit: (s, e) => {
                const col = s.columns[e.col];

                // User is allowed to edit?
                const dataPoint = s.rows[e.row].dataItem;
                if (col.binding === '__normalized_value') {
                    alert(__WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].CANNOT_EDIT_NORMALIZED_VALUE);
                    e.cancel = true;
                    return;
                }
                if (col.binding === 'value' && dataPoint.source !== 'manual') {
                    alert(__WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].CANNOT_EDIT_VALUE);
                    e.cancel = true;
                    return;
                }
                if (col.binding.endsWith(__WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].DIMENSION_SUFFIX_GROUP)) {
                    const dimensionSlug = col.binding.slice(0, -__WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].DIMENSION_SUFFIX_GROUP.length);
                    const dimensionParent = dataPoint[dimensionSlug + __WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].DIMENSION_SUFFIX_PARENT];
                    if (!dimensionParent) {
                        alert(__WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].CANNOT_SET_GROUP_IF_NO_PARENT);
                        e.cancel = true;
                        return;
                    }
                }

                // Get column definition.
                const columnDef = this.columnDefs.find(column => {
                    return column.slug === col.binding;
                });

                // Update data map.
                if (col.dataMap) {
                    col.dataMap = __WEBPACK_IMPORTED_MODULE_6__SourceDataService__["a" /* sourceDataService */].getDataMapForDimension(
                        columnDef.dimension,
                        __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject()
                    );
                }

                if (col.dataType !== wijmo.DataType.Date) {
                    // Always format as general cell, not as number.
                    col.format = 'g';
                }
            },
            cellEditEnding: (s, e) => {
                const oldVal = s.getCellData(e.row, e.col);
                const newVal = s.activeEditor.value;
                const dataType = s.columns[e.col].dataType;
                e.cancel = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].checkIfCellHasChanged(oldVal, newVal, dataType);

                // Validate.
                const col = s.columns[e.col];
                const dataPoint = Object.assign({}, s.rows[e.row].dataItem);
                dataPoint[col.binding] = s.activeEditor.value;
                const validation = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject().validateDataPoint(dataPoint);
                if (validation.success === false) {
                    e.cancel = true;
                    alert(validation.error);
                }
            },
            cellEditEnded: (s, e) => {
                // Edit was cancelled?
                if (e.cancel) {
                    return;
                }

                // TODO: Show loading screen.
                const dataPoint = s.rows[e.row].dataItem;
                __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject().addDataPoint(dataPoint);

                // Save project.
                __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].saveCurrentProject();
                __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].syncViews();
            }
        });

        // http://jsfiddle.net/Wijmo5/h1njyaez/
        this.flexGridFilter = new wijmo.grid.filter.FlexGridFilter(this.flexgrid, {
            filterApplied: () => {
                this.rowCounter.text(
                    'Showing ' +
                        this.flexgrid.rows.length +
                        ' data-points out of ' +
                        this.collectionView.sourceCollection.length
                );
            }
        });

        // $('#source_data_all_data_filter_by_file')[0].addEventListener('input', (e) => {
        //     this.collectionView.refresh();
        //     this.flexgrid.itemsSource = this.collectionView.items;
        // });

        this.container.find('._scale-selector').on('change', e => {
            this.scale = e.target.value;
            this.flexgrid.collectionView.refresh();
        });

        this.container.find('._clear-filters').on('click', () => {
            this.flexGridFilter.filterDefinition = '';
        });

        // Export Excel.
        this.container.find('._export-excel').on('click', e => {
            wijmo.grid.xlsx.FlexGridXlsxConverter.save(
                this.flexgrid,
                {
                    includeColumnHeaders: true,
                    includeCellStyles: false
                },
                'FlexGrid.xlsx'
            );
        });
    }

    sync() {
        __WEBPACK_IMPORTED_MODULE_5__SourceDataPointsSidebar__["a" /* sourceDataPointsSidebar */].sync();

        // Columns
        {
            // Get all columns.
            this.columnDefs = this.getAvailableColumns();

            // Get selected columns from local storageService.
            const selectedColumns = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].get(__WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].DATA_COCKPIT_COLUMNS_KEY);
            if (Array.isArray(selectedColumns)) {
                this.columnDefs.forEach(columnDef => {
                    columnDef.selected = selectedColumns.indexOf(columnDef.slug) !== -1;
                });
            }

            // Set items in combo-box.
            this.columnsSelect.itemsSource = this.columnDefs;
        }

        // Data points
        let dataPoints = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].currentProject.dataPoints;
        this.setData(dataPoints);
    }

    getAvailableColumns() {
        const cols = [];
        const project = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject();
        const dimensions = project.getFieldsForDimensions();

        cols.push({
            slug: '__normalized_value',
            label: 'Normalized Value',
            selected: true
        });

        dimensions.forEach(dimension => {
            cols.push({
                dimension: dimension,
                slug: dimension.slug,
                label: dimension.label,
                selected: true,
                dataMap: __WEBPACK_IMPORTED_MODULE_6__SourceDataService__["a" /* sourceDataService */].getDataMapForDimension(dimension, project),
                isReadOnly: false
            });
        });

        cols.push({
            slug: 'source__pretty',
            label: 'Source',
            selected: true,
            isReadOnly: true
        });

        return cols;
    }

    updateColumns() {
        // Save selected columns in local storageService.
        const selectedColumns = this.columnDefs.reduce((a, column) => {
            if (column.selected) {
                a.push(column.slug);
            }

            return a;
        }, []);
        __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].set(__WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].DATA_COCKPIT_COLUMNS_KEY, selectedColumns);

        // Create columns.
        this.flexgrid.columns.length = 0;
        this.columnDefs.forEach(column => {
            if (!column.selected) {
                return;
            }

            const isTime = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(column, 'dimension.isTime');

            // Add column to grid.
            const gridCol = new wijmo.grid.Column();
            gridCol.binding = column.slug;
            gridCol.header = column.label;
            if (!isTime) {
                gridCol.dataMap = column.dataMap;

                const dataType = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(column, 'dimension.dataType');
                if (dataType === __WEBPACK_IMPORTED_MODULE_3__services_DimensionTypesService__["a" /* dimensionTypesService */].NUMBER) {
                    gridCol.dataType = wijmo.DataType.Number;
                }
            } else {
                gridCol.dataType = wijmo.DataType.Date;
                gridCol.format = 'yyyy-MM-dd';
            }
            gridCol.isReadOnly = column.isReadOnly;
            this.flexgrid.columns.push(gridCol);

            if (isTime) {
                __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].createDatePickerEditor(this.flexgrid.columns.getColumn(gridCol.binding));
            }
        });
    }

    setData(dataset) {
        dataset = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"])(dataset);

        const project = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject();

        const sourceFiles = project.sourceFiles;
        dataset = dataset.map(item => {
            // Process source files.
            if (item.source === 'manual') {
                item.source__pretty = 'Manual';
            } else if (item.source in sourceFiles) {
                item.source__pretty = sourceFiles[item.source].name;
            }

            // Normalize values.
            item['__normalized_value'] = item.value * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseScale(item.scale) * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseInverse(item.inverse);

            // Process dimensions.
            item = project.addDataStructuresToDataPoint(item);

            return item;
        });

        // Save view.
        const sortDescriptions = this.flexgrid.collectionView.sortDescriptions;
        const scrollPosition = this.flexgrid.scrollPosition;
        const selection = this.flexgrid.selection;
        const filterDefinition = this.flexGridFilter.filterDefinition;

        // Update data source.
        this.collectionView.sourceCollection = dataset;
        this.collectionView.refresh();
        this.flexgrid.itemsSource = this.collectionView.items;
        this.updateColumns();

        // Load view.
        if (sortDescriptions.length > 0) {
            this.flexgrid.collectionView.sortDescriptions.push(sortDescriptions[0]);
        }
        this.flexgrid.scrollPosition = scrollPosition;
        this.flexgrid.select(selection);
        this.flexGridFilter.filterDefinition = filterDefinition;
    }

    setIdFilter(array) {
        this.idFilter = array;
    }
}

const sourceDataPoints = new SourceDataPoints();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataPoints;



/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SourceDataPoints__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SourceDataService__ = __webpack_require__(24);




class SourceDataPointsSidebar {
    constructor() {
        this.selectedItem = null;
        this.inputs = [];
    }

    init() {
        this.form = $('#source_data_new_entry');
        this.fieldsContainer = this.form.find('._fields');
        this.fieldTemplate = this.form
            .find('._template')
            .removeClass('_template')
            .detach();

        this.form.find('._add-data-point').on('click', () => {
            this.addDataPoint();
        });
        this.form.find('._save-data-point').on('click', () => {
            this.addDataPoint(true);
        });
        this.form.find('._delete-data-point').on('click', () => {
            this.deleteDataPoint();
        });
        this.form.find('._clear').on('click', () => {
            this.clearAllFields();
        });
        this.form.find('._add-custom-dimension').on('click', () => {
            this.addCustomDimension();
        });

        this.form.on('click', '._lock-container', e => {
            const $this = $(e.currentTarget);
            const input = $this.find('input');
            const checked = !input.prop('checked');
            input.prop('checked', checked);
            $this.toggleClass('_checked', checked);
        });

        this.form.on('click', '._data-structures-container', e => {
            const $this = $(e.currentTarget);
            const checked = !$this.hasClass('_checked');
            $this.toggleClass('_checked', checked);
            this.updateVisibleFields();
        });
    }

    sync() {
        // Save settings for previous stuff.
        const lockedFields = this.getLockedFields();
        const openDataStructured = this.getOpenFields();

        // Remove previous stuff.
        this.inputs = [];
        this.form.find('._field').remove();

        // Add fields.
        const project = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject();
        const fields = project.getFieldsForDimensions();
        fields.forEach(field => {
            const e = this.fieldTemplate.clone();
            e.find('._name').text(field.shortLabel || field.label);
            this.fieldsContainer.append(e);

            let values = __WEBPACK_IMPORTED_MODULE_2__SourceDataService__["a" /* sourceDataService */].getAvailableValuesForField(field, project);

            // Create input.
            let input;
            if (field.slug === 'value') {
                input = new wijmo.input.InputNumber(e.find('._input')[0], {
                    format: 'g10',
                    isRequired: false,
                    value: null
                });
            } else if (field.isTime) {
                input = new wijmo.input.InputDate(e.find('._input')[0], {
                    format: 'yyyy-MM-dd'
                });
            } else {
                input = new wijmo.input.AutoComplete(e.find('._input')[0], {
                    itemsSource: values
                });
            }
            input._kosmosField = field.slug;
            this.inputs.push(input);

            // Default value and lock
            if (field.slug in lockedFields) {
                input._setText(lockedFields[field.slug]);
                this.getInputLock(input).prop('checked', true);
            } else {
                input._setText('');
            }

            const isChild = typeof field.child !== 'undefined' && field.child;
            e.find('._lock-container').toggleClass('_child', isChild);
            e.find('._data-structures-container').toggleClass(
                '_hidden',
                !field.hasDataStructures && !field.hasGlobalTerms && !field.hasTimeIntervals
            );
            e.find('._data-structures-container').toggleClass('_child', isChild);
            e.find('._data-structures-container').toggleClass('_checked', field.slug in openDataStructured);
        });
        this.updateVisibleFields();
    }

    getLockedFields() {
        const lockedFields = {};

        this.inputs.forEach(input => {
            if (this.isInputLocked(input)) {
                lockedFields[input._kosmosField] = input.text;
            }
        });

        return lockedFields;
    }

    getOpenFields() {
        const openFields = {};

        this.inputs.forEach(input => {
            if (
                $(input._e)
                    .closest('._field')
                    .find('._data-structures-container._checked').length > 0
            ) {
                openFields[input._kosmosField] = true;
            }
        });

        return openFields;
    }

    getDataPointFromForm() {
        // Get point.
        const dataPoint = {};
        this.inputs.forEach(input => {
            if (input._kosmosField === 'value') {
                dataPoint[input._kosmosField] = input.value;
            } else {
                dataPoint[input._kosmosField] = input.text;
            }
        });
        dataPoint.value = parseFloat(dataPoint.value);
        dataPoint.scale = parseInt(dataPoint.scale);
        dataPoint.source = 'manual';

        return dataPoint;
    }

    addDataPoint(saveInsteadOfAdding = false) {
        const dataPoint = this.getDataPointFromForm();

        if (saveInsteadOfAdding) {
            dataPoint.id = this.selectedItem.id;
            dataPoint.source = this.selectedItem.source;
        }

        const result = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject().addDataPoint(dataPoint);

        // Abort.
        if (!result.success) {
            alert(result.error);
            return;
        }

        // Deselect.
        if (!saveInsteadOfAdding) {
            __WEBPACK_IMPORTED_MODULE_1__SourceDataPoints__["a" /* sourceDataPoints */].flexgrid.select(-1, -1);
        }

        // Save project.
        __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].syncViews();
    }

    deleteDataPoint() {
        const dataPoints = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentDataPoints();
        const key = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject().getKeyForDataPointId(this.selectedItem.id);
        dataPoints.splice(key, 1);
        __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].syncViews();
    }

    clearAllFields() {
        this.form.find('._lock').prop('checked', false);
        __WEBPACK_IMPORTED_MODULE_1__SourceDataPoints__["a" /* sourceDataPoints */].flexgrid.select(-1, -1);
        this.setSelectedItem(null);
    }

    addCustomDimension() {
        const project = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject();
        const dimension = project.addDimensionWithPrompt();

        if (dimension) {
            __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].saveCurrentProject();
            __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].syncViews();
        }
    }

    getInputLock(input) {
        return $(input._e)
            .closest('._field')
            .find('._lock');
    }

    isInputLocked(input) {
        return this.getInputLock(input).is(':checked');
    }

    setSelectedItem(item) {
        this.selectedItem = item;

        if (!item) {
            item = this.getLockedFields();
        }

        // Set fields.
        this.inputs.forEach(input => {
            const field = input._kosmosField;

            if (item && field in item) {
                if (field === 'value') {
                    input.value = parseFloat(item[field]);
                } else {
                    input._setText(item[field]);
                }
            } else {
                if (field === 'value') {
                    input.value = null;
                } else {
                    input._setText('');
                }
            }
        });

        // Show/hide buttons.
        this.form.find('._save-data-point').prop('disabled', !(item && item.id));
        this.form.find('._delete-data-point').prop('disabled', item && item.source !== 'manual');
    }

    updateVisibleFields() {
        let previousWasChecked = false;
        this.fieldsContainer.find('._field').each((i, field) => {
            const dataStructureContainer = $(field).find('._data-structures-container');
            const isChecked = dataStructureContainer.hasClass('_checked');
            const isChild = dataStructureContainer.hasClass('_child');

            if (isChild) {
                $(field).css('display', previousWasChecked ? '' : 'none');
            } else {
                previousWasChecked = isChecked;
            }
        });
    }
}

const sourceDataPointsSidebar = new SourceDataPointsSidebar();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataPointsSidebar;



/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(142);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(48),
    baseAssignValue = __webpack_require__(79);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(80),
    baseKeys = __webpack_require__(158),
    isArrayLike = __webpack_require__(52);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Project__ = __webpack_require__(23);



class SourceFile {
    constructor(object) {
        this.uuid = '';
        this.name = '';
        this.itemsSource = [];
        this.cellProperties = {};
        this.ingestionStep = 1;
        this.dataPoints = [];
        this.dataPointsCopy = [];
        this.formDimensions = [];
        this.hidden = false;
        this.globalMappingStructures = [];

        if (object) {
            Object.assign(this, object);

            if (object.project) {
                this.project = new __WEBPACK_IMPORTED_MODULE_1__Project__["a" /* Project */](object.project);
            }
        }
    }

    getNumberOfRows() {
        return this.itemsSource.length;
    }

    getNumberOfCols() {
        return this.itemsSource[0] ? this.itemsSource[0].length : 0;
    }

    getCellValue(row, col) {
        return this.itemsSource[row][col];
    }

    getSingleCellProperties(row, col) {
        if (!this.cellProperties.hasOwnProperty(col)) {
            this.cellProperties[col] = {};
        }

        if (!this.cellProperties[col].hasOwnProperty(row)) {
            this.cellProperties[col][row] = {};
        }

        // Assign defaults.
        // TODO: Performance issue: this is always creating new objects.
        const defaults = {
            cellType: 'none'
        };
        this.cellProperties[col][row] = Object.assign({}, defaults, this.cellProperties[col][row]);
        this.cellProperties[col][row]['value'] = this.getCellValue(row, col);

        return this.cellProperties[col][row];
    }

    getCellCompletionPercentage(row, col) {
        const cellFields = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(this, `cellProperties[${col}][${row}]`);
        const totalFields = this.formDimensions.length;
        const filledFields = this.formDimensions.reduce((count, field) => {
            if (field in cellFields && cellFields[field] !== '') {
                count++;
            }

            return count;
        }, 0);

        return totalFields > 0 ? filledFields / totalFields : 1;
    }

    getTotalCompletionPercentage() {
        let dataCells = 0;
        let progress = 0;

        for (let col in this.cellProperties) {
            for (let row in this.cellProperties[col]) {
                const dataType = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(this, `cellProperties[${col}][${row}].cellType`);

                if (dataType === 'data') {
                    dataCells++;
                    progress += this.getCellCompletionPercentage(row, col);
                }
            }
        }

        return dataCells === 0 ? 0 : progress / dataCells;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SourceFile;



/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(14),
    root = __webpack_require__(7);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class ResizableDivider {
    enableResizable(target, secondaryTarget, direction, handle, dimensions, callback) {
        let windowSize = 0;

        if (direction === 'height') {
            windowSize = $(window).height();
        } else {
            windowSize = $(window).width();
        }

        $(target).css(direction, windowSize / 2 + 'px');

        $(target).resizable(
            {
                classes: {
                    "ui-resizable": "allow-divider"
                }
            },
            handle,
            dimensions,
            "enable",
            {
                alsoResize: secondaryTarget
            },
            {
                stop: callback()
            }
        );
    }

    resetResizable(target, callback) {
        try {
            $(target).resizable("destroy");
            callback();
        }
        catch (e) {
        }
    }
}

const resizableDivider = new ResizableDivider();
/* harmony export (immutable) */ __webpack_exports__["a"] = resizableDivider;


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class VirtualTableCell {
    constructor() {
        // The cell value.
        this.value = null;

        // The total number of data-points.
        this.numberOfDataPoints = 0;

        // The IDs of the matching data-points.
        this.dataPointIds = [];

        // The IDs of the matching data-points, grouped per queries.
        this.dataPointIdsPerQuery = [];

        // A per-cell custom formula, optional.
        this.customFormula = null;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = VirtualTableCell;



/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class KeyboardService {
    constructor() {
        this.ctrlDown = false;
        this.shiftDown = false;
        this.ctrlKey = 17;
        this.shiftKey = 16;
        this.cmdKey = 91;
        this.vKey = 86;
        this.cKey = 67;

        $(document).keydown((e) => {
            if (e.keyCode === this.ctrlKey || e.keyCode === this.cmdKey) {
                this.ctrlDown = true;
            }

            if (e.keyCode === this.shiftKey) {
                this.shiftDown = true;
            }
        });

        $(document).keyup((e) => {
            if (e.keyCode === this.ctrlKey || e.keyCode === this.cmdKey) {
                this.ctrlDown = false;
            }

            if (e.keyCode === this.shiftKey) {
                this.shiftDown = false;
            }
        });
    }
}

const keyboardService = new KeyboardService();
/* harmony export (immutable) */ __webpack_exports__["a"] = keyboardService;


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ResizableDivider__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_ImportXlsxService__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__table_DataExplorerCellEditing__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__ = __webpack_require__(35);








class DataExplorerImport {
    constructor() {
        this.rightTableFocus = false;
        this.rigthTableSelection = {};
        this.copiedFromTable = false;

        $(document).on('paste', '#data-explorer-table .wj-cell', event => {
            let clipboardData, pastedData;

            // Stop data actually being pasted into div
            event.stopPropagation();
            event.preventDefault();

            if (!__WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.selection.isSingleCell) {
                return;
            }

            // Get pasted data via clipboard API
            clipboardData = event.clipboardData || window.clipboardData || event.originalEvent.clipboardData;
            pastedData = clipboardData.getData('Text');

            const rows = pastedData.split('\n');
            let cells = [];
            rows.map(row => {
                if (row) {
                    cells.push(row.split('\t'));
                }
            });
            const col = __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.selection._col;
            const row = __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.selection._row;

            if (row + cells.length > __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.rows.length) {
                alert("Attempted to paste selection that does not fit this table's content.");

                return;
            }

            if (col + cells[0].length > __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.columns.length) {
                alert("Attempted to paste selection that does not fit this table's content.");

                return;
            }

            let rowCounter = -1;
            cells.map((rowCells, rowIndex) => {
                rowCounter++;

                let colCounter = -1;
                rowCells.map((cell, colIndex) => {
                    __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.finishEditing(true);
                    const oldVal = __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.getCellData(row + rowIndex, col + colIndex, false);
                    __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.setCellData(row + rowIndex, col + colIndex, cell);
                    const dataType = __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.columns[col + colIndex].dataType;
                    const cancel = __WEBPACK_IMPORTED_MODULE_5__table_DataExplorerCellEditing__["a" /* dataExplorerCellEditing */].cellEditValidation({
                        oldVal: oldVal,
                        newVal: cell,
                        dataType: dataType,
                        row: row + rowIndex,
                        col: col + colIndex
                    });
                    colCounter++;

                    if (!cancel) {
                        __WEBPACK_IMPORTED_MODULE_5__table_DataExplorerCellEditing__["a" /* dataExplorerCellEditing */].cellEditAddDataPoint({
                            row: row + rowIndex,
                            col: col + colIndex,
                            val: cell,
                            colCounter: colCounter,
                            rowCounter: rowCounter,
                            copiedFromRightTable: this.copiedFromTable
                        });
                    } else {
                        __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.setCellData(row + rowIndex, col + colIndex, oldVal);
                    }
                });
            });
        });

        $(document).on('copy', event => {
            this.copiedFromTable = this.rightTableFocus;
        });
    }

    init() {
        $('#data_explorer_import_table').hide();

        $('#data_explorer_import_table_button').on('click', e => {
            $('#data_explorer_import_table').val('');
            $('#data_explorer_import_table').trigger('click');
        });

        $('#data_explorer_import_table').on('change', e => {
            $('.main-content #data_explorer_imported_table').remove();
            $('#single_analysis ._split-screen-mode-switch input').prop('checked', true);

            this.loadFile(e);
        });
    }

    cancelImport() {
        $('.main-content .tab-content').css('max-width', '100%');
        $('.main-content #data_explorer_imported_table').remove();
        $('#data_explorer_import_table').val('');
    }

    createRightTable(uuid) {
        const rightFlexgrid = new wijmo.grid.FlexGrid($('#data_explorer_imported_table')[0], {
            isReadOnly: true,
            itemsSource: [],
            onGotFocus: () => {
                this.rightTableFocus = true;
            },
            onLostFocus: () => {
                this.rightTableFocus = false;
            },
            onSelectionChanged: () => {
                const selection = rightFlexgrid.selection;
                this.rigthTableSelection = {
                    row1: Math.min(selection._row, selection._row2),
                    row2: Math.max(selection._row, selection._row2),
                    col1: Math.min(selection._col, selection._col2),
                    col2: Math.max(selection._col, selection._col2)
                };
            }
        });

        rightFlexgrid.itemsSource = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject().sourceFiles[uuid].itemsSource;
        rightFlexgrid.collectionView.refresh();
        $('#data_explorer_imported_table > div')
            .not('._files-tabs')
            .css('height', '95%');
    }

    async loadFile(e) {
        this.splitScreen();

        __WEBPACK_IMPORTED_MODULE_1__ResizableDivider__["a" /* resizableDivider */].enableResizable(
            '.main-content > .tab-content',
            '#data_explorer_imported_table',
            'width',
            { handles: 'e' },
            { minWidth: 300, maxWidth: 1000 },
            () => {
                __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].updateTable();
            }
        );

        // Load wijmo grid data.
        this.uuid = await __WEBPACK_IMPORTED_MODULE_2__services_ImportXlsxService__["a" /* importXlsxService */].importXlsx(e.target.files[0]);
        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */]
            .getCurrentProject()
            .analyses[__WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId].dropboxFiles.push(this.uuid);

        $('.allow-divider').on('resize', () => {
            __WEBPACK_IMPORTED_MODULE_6__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].updateTable();
        });

        this.createRightTable(this.uuid);

        // Save project.
        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].syncViews();

        this.refreshFilesTabs();
    }

    refreshFilesTabs() {
        $('._files-tabs').empty();
        const analysis = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject().analyses[__WEBPACK_IMPORTED_MODULE_4__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId];
        analysis.dropboxFiles.map(uuid => {
            const file = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(__WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */], `currentProject.sourceFiles[${uuid}]`);
            const active = this.uuid === uuid ? '_active-tab' : '';
            $('._files-tabs').prepend(
                '<div class="_file-tab ' + active + '" data-uuid="' + uuid + '">' + file.name + '</div>'
            );
        });
    }

    splitScreen() {
        $('.main-content').append('<div id="data_explorer_imported_table"><div class="_files-tabs"></div></div>');
    }
}

const dataExplorerImport = new DataExplorerImport();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerImport;



/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Constants__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_ImportXlsxService__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Tab__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__tabs_source_data_SourceDataFiles__ = __webpack_require__(9);










class Dropbox extends __WEBPACK_IMPORTED_MODULE_6__Tab__["a" /* Tab */] {
    constructor() {
        super();
        this.tabHref = '#dropbox';
    }

    init() {
        this.filesContainer = $('#dropbox_data_files');
        this.fileListContainer = this.filesContainer.find('.file-list');
        this.filesTemplate = this.filesContainer.find('._template').detach();
        this.fileListContainer.find('#source_data_import_table').hide();

        $(document).ready(() => {
            // Upload File

            console.log('click on source_data_import_table_button ');
            $('#source_data_import_table_button').on('click', function() {
                $('#source_data_import_table').trigger('click');
            });
            $('#source_data_import_table').on('change', e => {
                this.loadUploadedFile(e.target.files[0]);
            });

            // Show all data
            $('._submenu [value="data_points"]').on('click', function() {
                $('.extending-sub-menu a[href="#source_data"]').trigger('click');
                $('#source_data input[name="source_data_mode"][value="data_points"]').trigger('click');
            });

            // P/C & Mapping
            $('._submenu [value="data_structures"]').on('click', function() {
                $('.extending-sub-menu a[href="#source_data"]').trigger('click');
                $('#source_data input[name="source_data_mode"][value="data_structures"]').trigger('click');
            });

            dropbox.fileCounter();

            $('#dropbox_file_list').on('change', function() {
                dropbox.fileCounter();
            });
        });
    }

    sync() {
        this.displaySourceFiles();
    }

    fileCounter() {
        let fileNumber = $('#dropbox_file_list ._file').length;
        let pluralIndicator = '';
        if (fileNumber !== 1) {
            pluralIndicator = 's';
        }
        $('._file_counter').html('<strong>' + fileNumber + '</strong>' + ' document' + pluralIndicator);
    }

    displaySourceFiles() {
        let projectKey = localStorage.getItem('current_project_key');
        let thisproject = __WEBPACK_IMPORTED_MODULE_4__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile() || JSON.parse(localStorage.getItem(projectKey));

        let sourceFiles =
            thisproject == null ? __WEBPACK_IMPORTED_MODULE_5__services_StorageService__["a" /* storageService */].currentProject.sourceFiles : __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(thisproject, `sourceFiles`);

        if (!localStorage.getItem('blobExcelData')) this.filesContainer.find('._file:not(._button)').remove();
        for (const uuid in sourceFiles) {
            /** @type {SourceFile} */
            const file = sourceFiles[uuid];

            // Skip hidden files.
            if (file.hidden) {
                continue;
            }

            if (!localStorage.getItem('blobExcelData')) {
                // Create div.
                const div = this.filesTemplate.clone();
                div.removeClass('_template');
                div.find('._name').text(file.name);
                div.attr('data-uuid', uuid);

                // Show progress.
                {
                    const ratio = file.getTotalCompletionPercentage();
                    const color = chroma
                        .mix(
                            __WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN,
                            __WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].FILE_WORKFLOW_CELL_PROGRESS_COLOR_END,
                            ratio,
                            'lab'
                        )
                        .hex();
                    div.find('._percentage')
                        .html(Math.round(ratio * 100) + '%')
                        .css('background-color', color);
                }
                //
                this.fileListContainer.append(div);
            }
        }

        // Load saved files.
        $('#dropbox_file_list')
            .find('._file:not(._button)')
            .on('click', e => {
                const uuid = $(e.currentTarget).data('uuid');
                this.loadFileByUuid(uuid);
            });
    }

    /**
     * Load a file already present in the project, by matching against its UUID. Jump to the File Workflow screen.
     * @param uuid
     */
    async loadFileByUuid(uuid) {
        await __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].showLoading();

        __WEBPACK_IMPORTED_MODULE_4__services_SourceFilesService__["a" /* sourceFilesService */].currentUuid = uuid;
        const sourceFile = __WEBPACK_IMPORTED_MODULE_4__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        __WEBPACK_IMPORTED_MODULE_8__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource = sourceFile.itemsSource;
        __WEBPACK_IMPORTED_MODULE_8__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.collectionView.refresh();

        $('ul.nav a[href="#source_data"]').trigger('click');
        $('input[name=source_data_mode][value=files]').trigger('click');

        $('#source_data_files_pre_ingestion').data('active', true);

        // Show table title.
        $('#source_data_files_sidebar ._table-name').text(sourceFile.name);

        // Hide previous screen.
        $('#source_data_files_file_list').hide();
        $('#source_data_files_pre_ingestion').show();

        __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].startWorkflow();
        __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();

        const columns = __WEBPACK_IMPORTED_MODULE_8__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource[0];
        columns.map((col, colNr) => {
            if (col === '') {
                __WEBPACK_IMPORTED_MODULE_8__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.autoSizeColumn(colNr);
            }
        });

        __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].hideLoading();
    }

    /**
     * Save and load an uploaded file.
     * @param file
     * @returns {Promise<void>}
     */
    async loadUploadedFile(file) {
        await __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].showLoading();

        const uuid = await __WEBPACK_IMPORTED_MODULE_3__services_ImportXlsxService__["a" /* importXlsxService */].importXlsx(file);
        await this.loadFileByUuid(uuid);
    }
}

const dropbox = new Dropbox();
/* harmony export (immutable) */ __webpack_exports__["a"] = dropbox;



/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(79),
    eq = __webpack_require__(70);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),
/* 49 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(66);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)(module)))

/***/ }),
/* 51 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(68),
    isLength = __webpack_require__(83);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(166),
    stubArray = __webpack_require__(86);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(170),
    Map = __webpack_require__(42),
    Promise = __webpack_require__(171),
    Set = __webpack_require__(172),
    WeakMap = __webpack_require__(173),
    baseGetTag = __webpack_require__(18),
    toSource = __webpack_require__(69);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(176);

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Constants__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_source_data_structures_SourceDataStructureSets__ = __webpack_require__(187);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_source_data_structures_SourceDataStructureValidator__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceDataService__ = __webpack_require__(24);








class SourceDataStructures {
    constructor(container, saveHandler, highlightChanges = false, sidebarDimensionSelector = false) {
        this.container = container;
        /** @type {Function} */
        this.saveHandler = saveHandler;
        /** @type {Project} */
        this.project = null;
        this.structuresTable = this.container.find('._dataStructuresTable');
        this.setsTable = this.container.find('._setsTable');
        this.filterByState = this.container.find('._filterByState');
        this.sourceDataStructureValidator = new __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_source_data_structures_SourceDataStructureValidator__["a" /* SourceDataStructureValidator */]();
        this.sourceDataStructureSets = new __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_source_data_structures_SourceDataStructureSets__["a" /* SourceDataStructureSets */](this.container, this.saveHandler);
        this.isSyncing = false;
        this.inUpdatedLayout = false;
        let dimensionSelectorLocation = '';
        if (sidebarDimensionSelector) {
            dimensionSelectorLocation = this.container
                .closest('._content')
                .siblings('.main-sidebar')
                .find('#source_data_files_sidebar ._top')
                .append('<section class="_sidebar-dimension-selector"></section>');

            this.container.find('._submenu').appendTo(dimensionSelectorLocation.find('._sidebar-dimension-selector'));
            dimensionSelectorLocation = dimensionSelectorLocation.find('._sidebar-dimension-selector');
        } else {
            dimensionSelectorLocation = this.container.find('._dimension-selector')[0];
        }
        if (!localStorage.getItem('blobExcelData'))
            this.dimensionSelect = new wijmo.input.ComboBox(dimensionSelectorLocation, {
                placeholder: 'Select Dimension',
                itemsSource: [],
                displayMemberPath: 'label',
                onSelectedIndexChanged: () => {
                    if (!this.isSyncing) {
                        this.syncFlexGrid();
                    }
                }
            });
        if (!localStorage.getItem('blobExcelData'))
            this.flexgrid = new wijmo.grid.FlexGrid(this.structuresTable[0], {
                isReadOnly: false,
                selectionMode: 'Cell',
                itemsSource: [],
                autoGenerateColumns: false,
                childItemsPath: 'children',
                columns: [],
                formatItem: (s, e) => {
                    if (e.panel === s.cells) {
                        let color = '';
                        let backgroundColor = '';
                        const item = s.rows[e.row].dataItem;

                        if (highlightChanges && item.dataStructure) {
                            const dimension = this.getSelectedDimension();
                            const ds = this.project.getDataStructuresForDimension(dimension.slug)[
                                item.dataStructure.attribute
                            ];

                            if (ds && ds.changed) {
                                backgroundColor = '#49CAAE';
                                color = '#333';
                            }
                        }
                        // All rows must be editable, except for Groups.
                        // This is necessary to set for hierarchical flexgrids.
                        // See https://www.grapecity.com/en/forums/wijmo/flexgrid---hierarchical-vi
                        s.rows[e.row].isReadOnly = !!item.group;

                        switch (s.columns[e.col].binding) {
                            case 'title':
                                // Add invisible arrow to have all rows properly aligned.
                                if (e.cell.innerHTML.indexOf('wj-elem-collapse') === -1) {
                                    e.cell.innerHTML =
                                        '<span class="wj-elem-collapse wj-glyph-down-right _hidden"></span>' +
                                        e.cell.innerHTML;
                                }
                                break;

                            case 'validation':
                                // Button
                                if (item.validation) {
                                    e.cell.innerHTML +=
                                        '<button class="_view-sets btn btn-sm btn-default">More</button>';
                                }

                                // Color
                                if (item.invalid === 0) {
                                    color = 'green';
                                } else {
                                    color = 'red';
                                }
                                break;
                        }
                        e.cell.style.color = color;
                        e.cell.style.backgroundColor = backgroundColor;
                    }
                },
                updatedView: () => {
                    if (this.inUpdatedLayout) {
                        this.inUpdatedLayout = false;
                    } else {
                        this.inUpdatedLayout = true;
                        this.flexgrid.autoSizeRow(0, true);
                    }
                },
                beginningEdit: (s, e) => {
                    const col = s.columns[e.col];
                    const dataPoint = s.rows[e.row].dataItem;

                    // User is allowed to edit?
                    if (col.binding === 'dataStructure.group') {
                        const parent = dataPoint.dataStructure.parentAttribute;
                        if (!parent) {
                            alert(__WEBPACK_IMPORTED_MODULE_2__Constants__["a" /* constants */].CANNOT_SET_GROUP_IF_NO_PARENT);
                            e.cancel = true;
                            return;
                        }
                    }
                },
                cellEditEnding: (s, e) => {
                    const oldVal = s.getCellData(e.row, e.col);
                    const newVal = s.activeEditor.value;
                    const dataType = s.columns[e.col].dataType;
                    e.cancel = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].checkIfCellHasChanged(oldVal, newVal, dataType);
                },
                cellEditEnded: (s, e) => {
                    // Edit was cancelled?
                    if (e.cancel) {
                        return;
                    }

                    // TODO: Show loading screen.
                    const dataItem = s.rows[e.row].dataItem;
                    /** @type {DataStructure} */
                    const dataStructure = dataItem.dataStructure;
                    const ds = this.project.addDataStructure(
                        this.dimensionSelect.selectedItem.slug,
                        dataItem.value,
                        dataStructure.parentAttribute,
                        dataStructure.group,
                        dataStructure.globalTerm,
                        dataStructure.timeIntervalBegin,
                        dataStructure.timeIntervalEnd
                    );

                    if (highlightChanges) {
                        ds.changed = true;
                    }

                    this.saveHandler();
                }
            });

        this.container.on('click', '._view-sets', e => {
            const ht = this.flexgrid.hitTest(e);
            if (!ht) {
                return;
            }

            let dataItem = this.flexgrid.rows[ht._row].dataItem;
            if (!dataItem.groups) {
                return;
            }
            dataItem = Object.assign({}, dataItem);
            dataItem.dimension = this.getSelectedDimension();

            this.container.find('._back').show();
            this.container.find('._auto-reconcile').show();
            this.setsTable.show();
            this.filterByState.show();
            this.structuresTable.hide();
            this.container.find('._dimension-selector').hide();

            this.sourceDataStructureSets.setData(dataItem);
        });

        this.container.find('._back').on('click', () => {
            this.container.find('._back').hide();
            this.container.find('._auto-reconcile').hide();
            this.setsTable.hide();
            this.filterByState.hide();
            this.structuresTable.show();
            this.container.find('._dimension-selector').show();

            this.sync();

            // Force flexgrid to refresh.
            window.dispatchEvent(new Event('resize'));
        });

        this.container.find('._back-source-data-main').on('click', () => {
            this.container.find('._back-source-data-main').hide();
            this.structuresTable.show();

            // Force flexgrid to refresh.
            window.dispatchEvent(new Event('resize'));
        });
    }

    setProject(project) {
        this.project = project;
        this.sourceDataStructureSets.setProject(project);
        this.sourceDataStructureValidator.setProject(project);
    }

    sync() {
        // Prevent multiple runs.
        if (this.isSyncing) {
            return;
        }
        this.isSyncing = true;

        this.sourceDataStructureSets.sync();

        // Get dimensions that have data structures or global terms.
        let selectedDimension = this.getSelectedDimension() || null;
        let dimensions = this.project.getDimensions();
        dimensions = dimensions.filter(dimension => {
            return dimension.hasDataStructures || dimension.hasGlobalTerms || dimension.hasTimeIntervals;
        });
        this.dimensionSelect.itemsSource = dimensions;
        this.dimensionSelect.selectedItem = selectedDimension;

        this.syncFlexGrid();

        this.isSyncing = false;
    }

    syncFlexGrid() {
        let gridCol;
        this.flexgrid.columns.length = 0;
        const selectedItem = this.dimensionSelect.selectedItem || {};
        // Value
        gridCol = new wijmo.grid.Column();
        gridCol.header = 'Value';
        gridCol.binding = 'title';
        gridCol.width = '*';
        gridCol.isReadOnly = true;
        this.flexgrid.columns.push(gridCol);

        if (selectedItem.hasDataStructures) {
            // Parent
            {
                gridCol = new wijmo.grid.Column();
                gridCol.header = 'Parent';
                gridCol.binding = 'dataStructure.parentAttribute';
                gridCol.width = '*';

                // Get dataMap.
                const dimension = Object.assign({}, selectedItem);
                dimension.isParent = true;
                dimension.attribute = selectedItem.slug;
                gridCol.dataMap = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceDataService__["a" /* sourceDataService */].getDataMapForDimension(dimension, this.project);

                this.flexgrid.columns.push(gridCol);
            }

            // Group
            {
                gridCol = new wijmo.grid.Column();
                gridCol.header = 'Group';
                gridCol.binding = 'dataStructure.group';
                gridCol.width = '*';

                // Get dataMap.
                const dimension = Object.assign({}, selectedItem);
                dimension.isGroup = true;
                dimension.attribute = selectedItem.slug;
                gridCol.dataMap = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceDataService__["a" /* sourceDataService */].getDataMapForDimension(dimension, this.project);

                this.flexgrid.columns.push(gridCol);
            }
        }

        // Global term
        if (selectedItem.hasGlobalTerms) {
            gridCol = new wijmo.grid.Column();
            gridCol.header = 'Global Term';
            gridCol.binding = 'dataStructure.globalTerm';
            gridCol.width = '*';

            // Get dataMap.
            const dimension = Object.assign({}, selectedItem);
            dimension.isGlobalTerm = true;
            gridCol.dataMap = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceDataService__["a" /* sourceDataService */].getDataMapForDimension(dimension, this.project);

            this.flexgrid.columns.push(gridCol);
        }

        // Time interval
        if (selectedItem.hasTimeIntervals) {
            gridCol = new wijmo.grid.Column();
            gridCol.header = 'Begin';
            gridCol.binding = 'dataStructure.timeIntervalBegin';
            gridCol.width = '*';
            gridCol.dataType = wijmo.DataType.Date;
            gridCol.format = 'yyyy-MM-dd';
            this.flexgrid.columns.push(gridCol);
            __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].createDatePickerEditor(this.flexgrid.columns.getColumn(gridCol.binding));

            gridCol = new wijmo.grid.Column();
            gridCol.header = 'End';
            gridCol.binding = 'dataStructure.timeIntervalEnd';
            gridCol.width = '*';
            gridCol.dataType = wijmo.DataType.Date;
            gridCol.format = 'yyyy-MM-dd';
            this.flexgrid.columns.push(gridCol);
            __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].createDatePickerEditor(this.flexgrid.columns.getColumn(gridCol.binding));
        }

        // Validation
        if (selectedItem.hasDataStructures) {
            gridCol = new wijmo.grid.Column();
            gridCol.header = 'Validation';
            gridCol.binding = 'validation';
            gridCol.width = 210;
            gridCol.isReadOnly = true;
            this.flexgrid.columns.push(gridCol);
        }

        this.flexgrid.itemsSource = this.getDataStructuresTree('');
    }

    /** @type {Dimension} */
    getSelectedDimension() {
        return this.dimensionSelect.selectedItem;
    }

    getDataStructuresTree(parent, group) {
        const dimension = this.getSelectedDimension();
        if (!dimension) {
            return;
        }
        const dataStructures = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"])(this.project.getDataStructuresForDimension(dimension.slug));
        let values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(this.project.dataPoints, dimension.slug);
        const tree = [];

        // Filter.
        let hasGroups = false;
        values = values.filter(value => {
            const ds = dataStructures[value];
            const dsParentAttribute = !ds ? '' : ds.parentAttribute;
            const dsGroup = !ds ? '' : ds.group;

            // Check parent. Special case if parent doesn't exist - put it in the root.
            if (parent !== dsParentAttribute && !(parent === '' && values.indexOf(dsParentAttribute) === -1)) {
                return false;
            }

            // Check group. Special case if group is missing - put into "Others".
            if (group && group !== dsGroup && !(group === 'Others' && dsGroup === '')) {
                return false;
            }

            // Do we have groups?
            if (!group && dsGroup) {
                hasGroups = true;
            }

            return true;
        });

        // Do we have at least one group?
        if (hasGroups) {
            // Make groups.
            const groups = [];
            values.forEach(value => {
                const ds = dataStructures[value];
                let dsGroup = !ds ? '' : ds.group;
                dsGroup = dsGroup ? dsGroup : 'Others';
                groups[dsGroup] = true;
            });

            // Create nodes for groups.
            for (const groupTitle in groups) {
                const node = {
                    title: groupTitle,
                    value: parent, // Required for validation and auto-reconciliation.
                    group: groupTitle,
                    children: this.getDataStructuresTree(parent, groupTitle)
                };
                this.validateNode(node);
                tree.push(node);
            }
        } else {
            values.forEach(value => {
                const ds = dataStructures[value];
                const node = {
                    title: value,
                    value: value,
                    dataStructure: ds || {},
                    children: this.getDataStructuresTree(value)
                };
                this.validateNode(node);
                tree.push(node);
            });
        }

        return tree;
    }

    validateNode(node) {
        const dimension = this.getSelectedDimension();
        let hasGroups = false;
        node.childValues = node.children.map(child => {
            if (child.group) {
                hasGroups = true;
            }
            return child.value;
        });

        if (!hasGroups && node.children.length > 0) {
            const result = this.sourceDataStructureValidator.validateParentAndChildren(
                dimension.slug,
                node.value,
                node.childValues
            );
            Object.assign(node, result);
            if (result.invalid === 0) {
                node.validation = 'All ' + result.valid + ' sets valid';
            } else {
                node.validation = result.invalid + '/' + result.groups.length + ' sets invalid';
            }
        }
    }

    addDataStructuresFromProject(project) {
        if (!project) {
            return;
        }

        const currentProject = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject();

        for (let dimension in project.dataStructuresPerDimension) {
            const dataStructures = project.dataStructuresPerDimension[dimension];
            for (let value in dataStructures) {
                /** @type {DataStructure} */
                const dataStructure = dataStructures[value];

                if (!dataStructure.changed) {
                    continue;
                }

                currentProject.addDataStructure(
                    dimension,
                    value,
                    dataStructure.parentAttribute,
                    dataStructure.group,
                    dataStructure.globalTerm,
                    dataStructure.timeIntervalBegin,
                    dataStructure.timeIntervalEnd
                );
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SourceDataStructures;



/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__entities_Project__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__MultiLevelHashMap__ = __webpack_require__(91);




class SourceDataStructureValidator {
    constructor() {
        /** @type {Project} */
        this.project = null;
    }

    setProject(project) {
        this.project = project;
    }

    /**
     * Validate a value (e.g. Gross Profit). Optionally provide a group (e.g. the Countries group for Net Revenue).
     *
     * @param dimension
     * @param parent
     * @param group
     * @returns {*}
     */
    validateValue(dimension, parent, group) {
        const dataStructures = this.project.getDataStructuresForDimension(dimension);

        // Get children.
        const children = [];
        for (let value in dataStructures) {
            /** @type {DataStructure} */
            const thisDataStructure = dataStructures[value];
            if (thisDataStructure.parentAttribute !== parent) {
                continue;
            }

            // Add child.
            if (!group || thisDataStructure.group === group) {
                children.push(thisDataStructure.attribute);
            }

            // Abort if value has groups, but no group was specified.
            if (!group && thisDataStructure.group) {
                return null;
            }
        }

        if (children.length === 0) {
            return null;
        }

        return this.validateParentAndChildren(dimension, parent, children);
    }

    /**
     * Validate a given parent value and children values.
     *
     * @param dimension
     * @param parent
     * @param children
     * @returns {{groups: *, valid, invalid: number}}
     */
    validateParentAndChildren(dimension, parent, children) {
        let dimensions = this.project.getDimensionsForDataStructureValidation(dimension);

        // Group values by unique dimension-combinations.
        let map = new __WEBPACK_IMPORTED_MODULE_2__MultiLevelHashMap__["a" /* MultiLevelHashMap */](dimensions.length + 1);
        this.project.dataPoints.forEach((dataPoint, index) => {
            // Is the dimension used?
            if (parent !== dataPoint[dimension] && children.indexOf(dataPoint[dimension]) === -1) {
                return;
            }

            const key = [];
            dimensions.forEach(dimension => {
                // Undefined or an empty string must count as the same thing.
                let value = dataPoint[dimension.slug];
                if (typeof value === 'undefined') {
                    value = '';
                }

                key.push(value);
            });

            // Add copy of data-point to map.
            map.set(key.concat([dataPoint.id]), Object.assign({}, dataPoint));
        });
        let groups = map.getUniqueGroups();

        // Validate each group.
        groups = groups.map(group => {
            let data = {
                dimensions: {},
                dataPoints: Object.values(group),
                delta: 0,
                valid: true
            };

            // Reorder data-points within group.
            let parents = 0;
            data.dataPoints = data.dataPoints.reduce((a, dataPoint) => {
                if (dataPoint[dimension] === parent) {
                    // The parent dimension goes first.
                    a.unshift(dataPoint);
                    parents++;
                } else {
                    a.push(dataPoint);
                }

                return a;
            }, []);
            if (parents) {
                data.dataPoints[parents - 1]._isLastParent = true;
            }
            data.dataPoints[data.dataPoints.length - 1]._isLast = true;

            // Extract the group's common dimensions.
            dimensions.forEach(dimension => {
                data.dimensions[dimension.slug] = data.dataPoints[0][dimension.slug];
            });

            // Calculate sum of children.
            let sumOfChildren = 0;
            children.forEach(child => {
                sumOfChildren += data.dataPoints.reduce((sum, dataPoint) => {
                    if (dataPoint[dimension] === child) {
                        sum +=
                            dataPoint.value *
                            __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseScale(dataPoint.scale) *
                            __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseInverse(dataPoint.inverse);
                    }
                    return sum;
                }, 0);
            });

            // Calculate sum of parent.
            let sumOfParent = data.dataPoints.reduce((sum, dataPoint) => {
                if (dataPoint[dimension] === parent) {
                    sum +=
                        dataPoint.value * __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseScale(dataPoint.scale) * __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseInverse(dataPoint.inverse);
                }
                return sum;
            }, 0);

            // Calculate delta.
            if (this.project.calculateDeltaByAddingChildren) {
                data.delta = sumOfParent + sumOfChildren;
            } else {
                data.delta = sumOfParent - sumOfChildren;
            }

            // Is it valid?
            data.valid = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].isDeltaZero(data.delta);

            return data;
        });

        // Count valid groups.
        const valid = groups.reduce((total, group) => {
            return total + (group.valid ? 1 : 0);
        }, 0);

        return {
            groups: groups,
            valid: valid,
            invalid: groups.length - valid
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SourceDataStructureValidator;



/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_source_data_structures_SourceDataStructures__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceData__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataPointsSidebar__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__tabs_source_data_SourceDataService__ = __webpack_require__(24);










class AddManualSidebar {
    constructor() {
        this.ingestionStep = 1;
        this.inputs = [];
        this.container = $('#add_manual_workflow');
        this.dataStructuresContainer = this.container.find('._data-structures');

        this.sourceDataStructures = new __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_source_data_structures_SourceDataStructures__["a" /* SourceDataStructures */](
            this.dataStructuresContainer,
            () => {
                this.sourceDataStructures.sync();
            },
            true
        );
        /** @type {Project} */
        this.project = null;

        this.columnDefs = [];
        this.tableColumns = [];
    }

    init() {
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].manualWorkflowContent();

        $('#add_manual_sidebar ._ingestion-steps ._back').on('click', () => this.addManualPrevStep());
        $('#add_manual_sidebar ._ingestion-steps ._next').on('click', () => this.addManualNextStep());

        this.form = $('#add_manual_form');
        this.fieldsContainer = this.form.find('._fields');
        this.fieldTemplate = this.form
            .find('._template')
            .removeClass('_template')
            .detach();

        $('#add_manual_sidebar ._cancel').on('click', () => {
            this.cancelWorkflow();
        });
        this.form.find('._add-data-point').on('click', () => {
            this.addDataPoint();
        });
        this.form.find('._delete-data-point').on('click', () => {
            this.deleteDataPoint();
        });
        this.form.find('._save-data-point').on('click', () => {
            this.saveChanges(true);
        });
        this.form.find('._clear').on('click', () => {
            this.clearAllFields();
        });
        $('#add_manual_sidebar ._dimensions-section ._add-custom-dimension').on('click', () => {
            __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataPointsSidebar__["a" /* sourceDataPointsSidebar */].addCustomDimension();
            this.sync();
            __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
        });
        this.columnsSelect = new wijmo.input.MultiSelect(
            $('#add_manual_sidebar ._dimensions-section ._column-selector')[0],
            {
                placeholder: 'Select Columns',
                itemsSource: [],
                headerFormat: '{count} columns selected',
                displayMemberPath: 'label',
                checkedMemberPath: 'selected',
                onCheckedItemsChanged: () => {
                    this.updateDimensions();
                }
            }
        );
        $('#add_manual_sidebar ._dimensions-section ._column-selector').on('click', () => {
            $('.wj-listbox-item input').prop('disabled', this.ingestionStep !== 1);
            $('.wj-listbox-item label').each(function() {
                if (
                    $(this)
                        .text()
                        .replace(/\s/g, '') === 'Scale'
                ) {
                    $(this)
                        .find('input')
                        .prop('disabled', true);
                }
            });
        });

        this.form.on('click', '._lock-container', e => {
            const $this = $(e.currentTarget);
            const input = $this.find('input');
            const checked = !input.prop('checked');
            input.prop('checked', checked);
            $this.toggleClass('_checked', checked);
        });
    }

    sync() {
        this.columnDefs = __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].getAvailableColumns();
        this.columnsSelect.itemsSource = this.columnDefs;
        this.displayForm();
    }

    displayForm() {
        // Save settings for previous stuff.
        const lockedFields = this.getLockedFields();

        // Remove previous stuff.
        this.inputs = [];
        this.form.find('._field').remove();

        // Add fields.
        let fields = [
            {
                slug: 'value',
                label: 'Value',
                selected: true
            }
        ];
        fields = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], fields, this.columnDefs);

        fields.forEach(field => {
            if (field.selected || field.slug === 'value') {
                const e = this.fieldTemplate.clone();
                e.find('._name').text(field.label);
                this.fieldsContainer.append(e);

                if (!this.project) {
                    this.project = __WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep___default()(__WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject());
                }
                let values = __WEBPACK_IMPORTED_MODULE_8__tabs_source_data_SourceDataService__["a" /* sourceDataService */].getAvailableValuesForField(field, this.project);

                // Create input.
                let input;
                if (field.slug === 'value') {
                    input = new wijmo.input.InputNumber(e.find('._input')[0], {
                        format: 'g10',
                        isRequired: false,
                        value: null
                    });
                } else {
                    input = new wijmo.input.AutoComplete(e.find('._input')[0], {
                        itemsSource: values
                    });
                }
                input._kosmosField = field.slug;
                this.inputs.push(input);

                // Default value and lock
                if (field.slug in lockedFields) {
                    input._setText(lockedFields[field.slug]);
                    this.getInputLock(input).prop('checked', true);
                } else {
                    input._setText('');
                }
            }
        });
    }

    getInputLock(input) {
        return $(input._e)
            .closest('._field')
            .find('._lock');
    }

    isInputLocked(input) {
        return this.getInputLock(input).is(':checked');
    }

    getLockedFields() {
        const lockedFields = {};

        this.inputs.forEach(input => {
            if (this.isInputLocked(input)) {
                lockedFields[input._kosmosField] = input.text;
            }
        });

        return lockedFields;
    }

    getDataPointFromForm() {
        // Get point.
        const dataPoint = {};
        this.inputs.forEach(input => {
            if (input._kosmosField === 'value') {
                dataPoint[input._kosmosField] = input.value;
            } else {
                dataPoint[input._kosmosField] = input.text;
            }
        });
        dataPoint.value = parseFloat(dataPoint.value);
        dataPoint.scale = parseInt(dataPoint.scale);

        return dataPoint;
    }

    addDataPoint() {
        const dataPoint = this.getDataPointFromForm();

        const validation = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().validateDataPoint(dataPoint);
        if (validation.success === false) {
            alert(validation.error);

            return;
        }

        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource.push(dataPoint);

        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].sync();
        this.setSelectedItem(null);
    }

    saveChanges() {
        const dataPoint = this.getDataPointFromForm();

        const validation = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().validateDataPoint(dataPoint);
        if (validation.success === false) {
            alert(validation.error);

            return;
        }

        const row = __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].flexgrid.selection.row;
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource[row] = dataPoint;
        this.setSelectedItem(null);
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].sync();
    }

    deleteDataPoint() {
        const row = __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].flexgrid.selection.row;
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource.splice(row, 1);

        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].sync();
    }

    clearAllFields() {
        this.form.find('._lock').prop('checked', false);
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].flexgrid.select(-1, -1);
        this.setSelectedItem(null);
    }

    setSelectedItem(item) {
        this.selectedItem = item;

        if (!item) {
            item = this.getLockedFields();
        }

        // Set fields.
        this.inputs.forEach(input => {
            const field = input._kosmosField;

            if (item && field in item) {
                if (field === 'value') {
                    input.value = parseFloat(item[field]);
                } else {
                    input._setText(item[field]);
                }
            } else {
                if (field === 'value') {
                    input.value = null;
                } else {
                    input._setText('');
                }
            }
        });
    }

    addManualPrevStep() {
        if (this.ingestionStep === 1) {
            return;
        }
        this.ingestionStep--;
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].manualWorkflowContent();
        this.syncDimensionsContainer();
    }

    addManualNextStep() {
        if (this.ingestionStep === 3) {
            this.finishStep();

            return;
        }

        this.ingestionStep++;

        if (this.ingestionStep === 2) {
            this.secondStep();
        }

        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].manualWorkflowContent();
        this.syncDimensionsContainer();
    }

    secondStep() {
        // Remove unselected dimensions from table source.
        this.columnDefs.map(dimension => {
            if (!dimension.selected) {
                __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource.map(dataPoint => {
                    dataPoint[dimension.slug] = '';
                });
            }
        });

        // Load data structures.
        const project = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject();

        // Copy current project and add new data points into it.
        /** @type {Project} */
        this.project = __WEBPACK_IMPORTED_MODULE_1_lodash_cloneDeep___default()(project);
        this.project.dataPoints = this.project.dataPoints.concat(__WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource);

        // Use new project for data-structures screen.
        this.sourceDataStructures.setProject(this.project);
        this.sourceDataStructures.sync();

        // Refresh FlexGrid.
        window.dispatchEvent(new Event('resize'));
    }

    finishStep() {
        // Add new Data Points.
        let dataPoints = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource);
        let success = true;
        let successCount = 0;
        let errors = '';
        let totalInitialDataPoints = dataPoints.length;

        for (let i = 0; i < dataPoints.length; i++) {
            let dataPoint = dataPoints[i];
            dataPoint.source = 'manual';
            const result = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().addDataPoint(dataPoint);

            if (!result.success) {
                success = false;
                errors += 'Error for data-point with the value = ' + dataPoint.value + ': ' + result.error + '\n';
            } else {
                successCount++;
                dataPoints.splice(i, 1);
                i--;
            }
        }
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], dataPoints);

        // Add data structures.
        addManualSidebar.sourceDataStructures.addDataStructuresFromProject(this.project);

        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();

        this.ingestionStep = 1;
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].manualWorkflowContent();

        if (success) {
            alert('Your changes have been saved successfully.');

            __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].flexgrid.itemsSource = __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource;
            __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].flexgrid.collectionView.refresh();

            $("input[name=source_data_mode][value='data_points']").prop('checked', true);
            $("input[name=source_data_mode][value='data_points']")
                .parent()
                .addClass('active');
            $("input[name=source_data_mode][value='manual_workflow']")
                .parent()
                .removeClass('active');
            $('.main-options-container input[name=source_data_mode]').change();
        } else {
            alert(
                successCount +
                    '/' +
                    totalInitialDataPoints +
                    ' data-points were saved. The following errors have occurred: ' +
                    '\n' +
                    errors
            );

            __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].flexgrid.itemsSource = __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource;
            __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].flexgrid.collectionView.refresh();
        }
    }

    cancelWorkflow() {
        const confirmation = confirm('Are you sure you want to cancel? You will lose all your progress.');

        if (!confirmation) {
            return;
        }

        __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceData__["a" /* sourceData */].endWorkflow();
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].tableSource = [];
        this.ingestionStep = 1;
        this.setSelectedItem(null);
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].sync();
    }

    updateDimensions() {
        this.displayForm();

        let itemsSource = [
            {
                slug: '__normalized_value',
                label: 'Normalized Value',
                selected: true,
                isReadOnly: true
            },
            {
                slug: 'value',
                label: 'Value',
                selected: true
            }
        ];
        itemsSource = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.concat([], itemsSource, this.columnDefs);
        this.tableColumns = itemsSource;
        __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_manual_workflow_AddManualTable__["a" /* addManualTable */].sync();
    }

    syncDimensionsContainer() {
        $('#add_manual_sidebar ._dimensions-section ._add-custom-dimension').prop('disabled', this.ingestionStep !== 1);
    }
}

const addManualSidebar = new AddManualSidebar();
/* harmony export (immutable) */ __webpack_exports__["a"] = addManualSidebar;



/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_add_file_workflow_AddFileSteps__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceDataService__ = __webpack_require__(24);








class AddManualTable {
    constructor() {
        this.tableSource = [];
        this.columnDefs = [];
        this.scale = 1;
        this.inUpdatedLayout = false;
    }

    init() {
        __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].init();

        this.flexgrid = new wijmo.grid.FlexGrid('#add_manual_workflow ._table', {
            isReadOnly: false,
            selectionMode: 'Row',
            itemsSource: this.tableSource,
            autoGenerateColumns: false,
            formatItem: (s, e) => {
                if (e.panel === s.cells) {
                    let item = s.rows[e.row].dataItem;

                    switch (s.columns[e.col].binding) {
                        case 'value':
                            e.cell.childNodes[0].nodeValue = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item.value);
                            break;

                        case '__normalized_value':
                            e.cell.innerHTML = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item['__normalized_value'] / this.scale);
                            break;

                        case 'scale':
                            // e.cell.innerHTML = item.scale;
                            break;
                    }
                }
            },
            selectionChanged: (s, e) => {
                const selection = this.flexgrid.selection;
                let item;

                if (selection._row in s.rows) {
                    item = s.rows[selection._row].dataItem;
                } else {
                    item = null;
                }

                __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].setSelectedItem(item);
            },
            updatedLayout: () => {
                if (this.inUpdatedLayout) {
                    this.inUpdatedLayout = false;
                } else {
                    this.inUpdatedLayout = true;
                    this.flexgrid.autoSizeRow(0, true);
                }
            },
            beginningEdit: (s, e) => {
                const col = s.columns[e.col];

                // User is allowed to edit?
                if (__WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].ingestionStep !== 1) {
                    e.cancel = true;
                    return;
                }

                // if (col.binding === 'value') {
                //     e.cancel = true;
                //     return;
                // }

                // Get column definition.
                const columnDef = this.columnDefs.find(column => {
                    return column.slug === col.binding;
                });

                // Update data map.
                if (col.dataMap) {
                    col.dataMap = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_SourceDataService__["a" /* sourceDataService */].getDataMapForDimension(
                        columnDef.dimension,
                        __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].project
                    );
                }

                // Always format as general cell, not as number.
                col.format = 'g';
            },
            cellEditEnding: (s, e) => {
                // Check if value has been changed.
                const oldVal = s.getCellData(e.row, e.col);
                const newVal = s.activeEditor.value;
                if ((typeof oldVal === 'string' && oldVal === newVal) || __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].isDeltaZero(oldVal - newVal)) {
                    e.cancel = true;
                }

                // Validate.
                const col = s.columns[e.col];
                const dataPoint = Object.assign({}, s.rows[e.row].dataItem);
                dataPoint[col.binding] = newVal;
                const validation = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().validateDataPoint(dataPoint);
                if (validation.success === false) {
                    e.cancel = true;
                    alert(validation.error);
                }
            },
            cellEditEnded: (s, e) => {
                // Edit was cancelled?
                if (e.cancel) {
                    return;
                }

                // TODO: Show loading screen.
                const dataPoint = s.rows[e.row].dataItem;
                const row = addManualTable.flexgrid.selection.row;
                this.tableSource[row] = dataPoint;

                addManualTable.sync();
                __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].setSelectedItem(dataPoint);
            }
        });
    }

    sync() {
        this.manualWorkflowContent();

        // Columns
        if (__WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].tableColumns.length) {
            this.columnDefs = __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].tableColumns;
        } else {
            this.columnDefs = __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].getAvailableColumns(true, true);
        }
        this.updateColumns();

        // Data points
        let dataPoints = this.tableSource;
        this.setData(dataPoints);
    }

    manualWorkflowContent() {
        // Hightlight selected step in ingestion header.
        $('#add_manual_workflow ._manual-ingestion-steps-display ._step').removeClass('highlight-step');
        $(
            '#add_manual_workflow ._manual-ingestion-steps-display ._step[data-step=' +
                __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].ingestionStep +
                ']'
        ).addClass('highlight-step');

        // Prev and next buttons
        $('#add_manual_sidebar ._ingestion-steps ._next').text(__WEBPACK_IMPORTED_MODULE_3__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].ingestionStep < 3 ? 'Next' : 'Finish');
        $('#add_manual_sidebar ._ingestion-steps ._back').css(
            'display',
            __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].ingestionStep === 1 ? 'none' : ''
        );

        // Misc
        $('#add_manual_sidebar #add_manual_form').css('display', __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].ingestionStep === 1 ? '' : 'none');
        $('#add_manual_workflow ._data-structures').css('display', __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_manual_workflow_AddManualSidebar__["a" /* addManualSidebar */].ingestionStep === 2 ? '' : 'none');
    }

    updateColumns() {
        this.flexgrid.columns.length = 0;
        this.columnDefs.forEach(column => {
            if (!column.selected) {
                return;
            }

            // Add column to grid.
            const gridCol = new wijmo.grid.Column();
            gridCol.binding = column.slug;
            gridCol.header = column.label;
            gridCol.dataMap = column.dataMap;
            gridCol.isReadOnly = column.isReadOnly;
            this.flexgrid.columns.push(gridCol);
        });
    }

    setData(dataset) {
        dataset = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"])(dataset);

        const project = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject();
        // const sourceFiles = project.sourceFiles;

        dataset = dataset.map(item => {
            // Normalize values.
            item['__normalized_value'] = item.value * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseScale(item.scale) * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseInverse(item.inverse);

            // Process dimensions.
            item = project.addDataStructuresToDataPoint(item);

            return item;
        });

        // Save view.
        const sortDescriptions = this.flexgrid.collectionView.sortDescriptions;
        const scrollPosition = this.flexgrid.scrollPosition;
        const selection = this.flexgrid.selection;

        // Update data source.
        this.flexgrid.itemsSource = dataset;
        this.flexgrid.collectionView.refresh();
        this.updateColumns();

        // Load view.
        if (sortDescriptions.length > 0) {
            this.flexgrid.collectionView.sortDescriptions.push(sortDescriptions[0]);
        }
        this.flexgrid.scrollPosition = scrollPosition;
        this.flexgrid.select(selection);
    }
}

const addManualTable = new AddManualTable();
/* harmony export (immutable) */ __webpack_exports__["a"] = addManualTable;



/***/ }),
/* 60 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataExplorerCard__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerCellData__ = __webpack_require__(97);




class DataExplorerAnalysis {
    constructor(dataExplorerAnalysis) {
        this.id = '';
        this.name = '';
        this.dropboxFiles = [];

        // Global filter cards
        this.globalFilters = [];

        /**
         * Column cards
         * @type {DataExplorerCard[]}
         */
        this.columns = [];

        /**
         * Row cards
         * @type {DataExplorerCard[]}
         */
        this.rows = [];

        // Scale used in analysis
        this.scale = 1000;

        /**
         * Data for each individual cell.
         * @type {DataExplorerCellData[][]}
         */
        this.cellData = {};

        this.tableRowToCardNo = {};

        this.tableRowToPath = {};

        this.tableColumnToCardNo = {};

        this.tableRowLevel = {};

        this.tableColumnLevel = {};

        // Initialize from simple object.
        if (dataExplorerAnalysis) {
            Object.assign(this, dataExplorerAnalysis);

            this.columns = this.columns.map(column => {
                return new __WEBPACK_IMPORTED_MODULE_1__DataExplorerCard__["a" /* DataExplorerCard */](column);
            });

            this.rows = this.rows.map(row => {
                return new __WEBPACK_IMPORTED_MODULE_1__DataExplorerCard__["a" /* DataExplorerCard */](row);
            });
        }
    }

    /**
     * @param row {number}
     * @param column {number}
     * @return {DataExplorerCellData}
     * */
    getCellData(row, column) {
        let cellData = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(this.cellData, `[${row}][${column}`);

        if (!cellData) {
            cellData = new __WEBPACK_IMPORTED_MODULE_2__DataExplorerCellData__["a" /* DataExplorerCellData */]();
        }

        return cellData;
    }

    /**
     * @param row {number}
     * @param column {number}
     * @param cellData {DataExplorerCellData}
     */
    setCellData(row, column, cellData) {
        const oldCellData = this.getCellData(row, column);

        // Be sure to make these objects, not arrays.
        if (!this.cellData[row]) {
            this.cellData[row] = {};
        }

        if (!this.cellData[column]) {
            this.cellData[column] = {};
        }

        if (cellData.customFormula === null && oldCellData.customFormula) {
            cellData.customFormula = oldCellData.customFormula;
        }

        Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["set"])(this.cellData, `[${row}][${column}]`, cellData);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataExplorerAnalysis;



/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataExplorerDrillDownStatus__ = __webpack_require__(63);


class DataExplorerCard {
    constructor(card) {
        this.sectionType = null;

        this.title = '';

        /**
         * Filters indexed by dimension. E.g. {attribute: ['Net Revenue'], time: ['2015', '2016']}.
         * @type {{}}
         */
        this.filters = {};

        this.dataValue = '';

        this.year1 = '';

        this.year2 = '';

        /** @type {DataExplorerDrillDownStatus} */
        this.drillDownStatus = new __WEBPACK_IMPORTED_MODULE_0__DataExplorerDrillDownStatus__["a" /* DataExplorerDrillDownStatus */]();

        if (card) {
            Object.assign(this, card);

            if (this.drillDownStatus) {
                this.drillDownStatus = new __WEBPACK_IMPORTED_MODULE_0__DataExplorerDrillDownStatus__["a" /* DataExplorerDrillDownStatus */](this.drillDownStatus);
            }
        }
    }

    /**
     * Get the DrillDownStatus object corresponding to the given path. An empty path (i.e. []) will return this.drillDownStatus.
     * @param {array} path
     * @returns {DataExplorerDrillDownStatus}
     */
    getDrillDownStatusByPath(path) {
        let status = this.drillDownStatus;

        path.forEach(part => {
            status = status.childStatuses[part];
        });

        return status;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataExplorerCard;



/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class DataExplorerDrillDownStatus {
    constructor(drillDownStatus) {
        /**
         * Filters indexed by dimension. E.g. {attribute: ['Net Revenue'], time: ['2015', '2016']}.
         * @type {{}}
         */
        this.filters = {};

        // Is this drillable? I.e. Should we display a plus sign next to it?
        this.expandable = false;

        // Is this expanded/open or collapsed/closed?
        this.expanded = false;

        // Which dimension are we drilling down to? E.g. If we double-click "Net Revenue" to split it into countries, this.dimension would be equal to "country".
        this.dimension = '';

        /**
         * A list of child statuses, indexed by value. E.g. The "Net Revenue" child status will be indexed by "Net Revenue".
         *
         * @type {DataExplorerDrillDownStatus[]}
         **/
        this.childStatuses = {};

        if (drillDownStatus) {
            Object.assign(this, drillDownStatus);

            for (const dimension in this.childStatuses) {
                this.childStatuses[dimension] = new DataExplorerDrillDownStatus(this.childStatuses[dimension]);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataExplorerDrillDownStatus;



/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Constants__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__ = __webpack_require__(26);



class Dimension {
    constructor(object) {
        this.slug = '';
        this.label = '';
        this.hasDataStructures = false;
        this.hasGlobalTerms = false;
        this.usedAsIdentifier = true;
        this.hasTimeIntervals = false;
        this.special = false;
        this.dataType = __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__["a" /* dimensionTypesService */].STRING;
        this.isVisible = true;
        this.dictionaries = [];

        if (object) {
            Object.assign(this, object);
        }
    }

    getParentSlug() {
        return this.slug + __WEBPACK_IMPORTED_MODULE_0__Constants__["a" /* constants */].DIMENSION_SUFFIX_PARENT;
    }

    getGroupSlug() {
        return this.slug + __WEBPACK_IMPORTED_MODULE_0__Constants__["a" /* constants */].DIMENSION_SUFFIX_GROUP;
    }

    getGlobalTermSlug() {
        return this.slug + '__global_term';
    }

    getTimeIntervalBeginSlug() {
        return this.slug + '__time_interval_begin';
    }

    getTimeIntervalEndSlug() {
        return this.slug + '__time_interval_end';
    }

    getDictionaries() {
        return this.dictionaries;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Dimension;



/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(12),
    isKey = __webpack_require__(100),
    stringToPath = __webpack_require__(103),
    toString = __webpack_require__(127);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(60)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(106),
    mapCacheDelete = __webpack_require__(122),
    mapCacheGet = __webpack_require__(124),
    mapCacheHas = __webpack_require__(125),
    mapCacheSet = __webpack_require__(126);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(18),
    isObject = __webpack_require__(15);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),
/* 69 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),
/* 70 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 71 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(27);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerVirtualTable__ = __webpack_require__(8);






/**
 * Class to render a SVG chart based on the HighCharts library.
 */
class DataExplorerRenderChart {
    constructor() {
        this._chart = null;
        this.outputMode = 'both';
        this.chartMode = 'bar';
        this.chartStackingMode = '';
    }

    renderChart() {
        // Convert table data into chart data.
        let series = [];
        let categories = [];

        if (this.chartMode === 'pie') {
            let data = [];

            for (let i = 0; i < __WEBPACK_IMPORTED_MODULE_4__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].tableData.length; i++) {
                let row = __WEBPACK_IMPORTED_MODULE_4__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].tableData[i];

                if (!__WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].isChartEnabledForRow(i + 1)) {
                    continue;
                }

                for (let j = 1; j < row.length; j++) {
                    if (!__WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].isChartEnabledForColumn(j)) {
                        continue;
                    }

                    let value = row[j].value;
                    value = typeof value === 'undefined' ? 0 : value;
                    if (value >= 0) {
                        data.push({
                            name: $('#row_box > .item')
                                .eq(i)
                                .find('input')
                                .val(),
                            y: value
                        });
                    }

                    break;
                }
            }

            series = [
                {
                    data: data
                }
            ];
        } else {
            for (let i = 0; i < __WEBPACK_IMPORTED_MODULE_4__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].tableData.length; i++) {
                let row = __WEBPACK_IMPORTED_MODULE_4__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].tableData[i];
                let data = [];

                const analysis = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentProject().analyses[__WEBPACK_IMPORTED_MODULE_2__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId];
                if (!__WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].isChartEnabledForRow(analysis.tableRowToCardNo[i + 1] + 1)) {
                    continue;
                }

                for (let j = 1; j < row.length; j++) {
                    if (!__WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].isChartEnabledForColumn(j)) {
                        continue;
                    }

                    let value = row[j].value;
                    value = typeof value === 'undefined' ? 0 : value;
                    data.push(value);
                }

                series.push({
                    name: row[0].value,
                    data: data
                });
            }

            let cols = $('#column_box > .item');
            for (let i = 0; i < cols.length; i++) {
                if (!__WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].isChartEnabledForItem(cols[i])) {
                    continue;
                }

                categories.push(
                    $(cols[i])
                        .find('input')
                        .val()
                );
            }
        }

        if (this._chart) {
            this._chart.destroy();
        }

        this._chart = Highcharts.chart('outputChart', {
            chart: {
                type: this.chartMode
            },
            plotOptions: {
                series: {
                    stacking: this.chartStackingMode
                },
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    showInLegend: true,
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                        }
                    }
                }
            },
            title: {
                text: ''
            },
            xAxis: {
                categories: categories
            },
            yAxis: {
                title: {
                    text: ''
                }
            },
            series: series,
            tooltip: {
                formatter: function() {
                    let val = this.y;
                    val /= parseFloat($('#scale').val());
                    val = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].formatNumber(val);

                    return val;
                }
            }
        });
    }
}

const dataExplorerRenderChart = new DataExplorerRenderChart();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerRenderChart;



/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerVirtualTable__ = __webpack_require__(8);




class DataExplorerDrillDown {
    constructor() {
        $(document).on('click', '#data-explorer-table .wj-cell ._drilldown-button', event => {
            this._onClick(event);
        });

        $.contextMenu({
            selector:
                '#data-explorer-table .wj-cells .wj-row:not(:first-child):not(:nth-child(2)) .wj-cell:first-child',
            build: ($trigger, e) => {
                const dimensions = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject().getDimensions();
                const items = {};

                dimensions.forEach(dimension => {
                    if (dimension.special) {
                        return;
                    }

                    items[dimension.slug] = {
                        name: 'Expand by ' + dimension.label,
                        callback: (key, opt) => {
                            const $this = $($trigger.target);
                            const row = $this.attr('data-row');
                            const analysis =
                                __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId];
                            const cardNumber = analysis.tableRowToCardNo[row];
                            const card = analysis.rows[cardNumber];
                            const path = analysis.tableRowToPath[row];
                            const drillDownStatus = card.getDrillDownStatusByPath(path);
                            this._toggleDrillDownStatus(drillDownStatus, opt, true);
                        }
                    };
                });

                return {
                    items: items
                };
            }
        });
    }

    canBeExpanded(filters) {
        return this.getExpandableDimensions(filters).length > 0;
    }

    getExpandableDimensions(filters) {
        const drillable = [];

        // Check if at least one dimension
        for (const dimensionSlug in filters) {
            const values = filters[dimensionSlug];

            // Cannot filter if there is more than one value. E.g. both "2015" and "2016".
            if (values.length !== 1) {
                continue;
            }

            // Check if there is at least one children.
            const value = values[0];
            const children = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject().getChildren(dimensionSlug, value);
            if (children.length > 0) {
                drillable.push(dimensionSlug);
            }
        }

        return drillable;
    }

    _formatItem(s, e) {
        if (
            !__WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject() ||
            e.panel !== s.cells || // Skip grey cells like A, B, C, 1, 2, 3, etc.
            (e.row === 0 && e.col === 0) || // Skip A1 cell.
            (e.row !== 0 && e.col !== 0) // Only consider header cells.
        ) {
            return;
        }

        const analysis = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId];

        // Add indent.
        if (e.col === 0) {
            $(e.cell).css('padding-left', 3 + analysis.tableRowLevel[e.row] * 20 + 'px');
        }

        // TODO: Also consider other columns.
        if (e.col !== 0) {
            return;
        }

        // Remember which row this cell represents.
        $(e.cell).attr('data-row', e.row);

        // Add drill-down button.
        if (!this._addDrillDownButton(analysis, e)) {
            $(e.cell).prepend('<i class="_empty-margin"></i>');
        }
    }

    _addDrillDownButton(analysis, e) {
        const cardNumber = analysis.tableRowToCardNo[e.row];
        const card = analysis.rows[cardNumber];

        if (!card) {
            return false;
        }

        const path = analysis.tableRowToPath[e.row];
        const drillDownStatus = card.getDrillDownStatusByPath(path);

        if (!drillDownStatus.expandable && !drillDownStatus.expanded) {
            return false;
        }

        const buttonClass = drillDownStatus.expanded ? 'fa-minus' : 'fa-plus';
        const button = $(`<i class="_drilldown-button fa ${buttonClass}" data-row="${e.row}"></i>`);
        $(e.cell).prepend(button);

        return true;
    }

    _onClick(event) {
        const $this = $(event.target);
        const row = $this.attr('data-row');
        const analysis = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId];
        const cardNumber = analysis.tableRowToCardNo[row];
        const card = analysis.rows[cardNumber];
        const path = analysis.tableRowToPath[row];
        const drillDownStatus = card.getDrillDownStatusByPath(path);

        this._toggleDrillDownStatus(drillDownStatus);
    }

    /**
     *
     * @param drillDownStatus {DataExplorerDrillDownStatus}
     * @param dimension {string}
     * @param expanded
     * @private
     */
    _toggleDrillDownStatus(drillDownStatus, dimension = null, expanded = null) {
        // Set expanded status.
        drillDownStatus.expanded = expanded === null ? !drillDownStatus.expanded : expanded;

        if (dimension) {
            // Use provided dimension.
            drillDownStatus.dimension = dimension;
        } else if (!drillDownStatus.dimension) {
            // Automatically get dimension.
            const drillableDimensions = this.getExpandableDimensions(drillDownStatus.filters);
            drillDownStatus.dimension = drillableDimensions[0];
        }

        __WEBPACK_IMPORTED_MODULE_2__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].updateTable();
    }
}

const dataExplorerDrillDown = new DataExplorerDrillDown();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerDrillDown;



/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__table_DataExplorerRenderTable__ = __webpack_require__(35);







class DataExplorerCellEditing {
    createDataPoint(row, col, value) {
        let success = true;
        let alertMessage = '';

        const attribute = $($('#row_box .item.row-or-column-card')[row - 1]).attr('data-value');
        const scale = $('#scale').val();

        // Create data points object.
        let datapoint = {
            value: value,
            attribute: attribute,
            scale: scale,
            source: 'manual'
        };

        const rowCard = $($('#row_box .item.row-or-column-card')[row - 1]);
        const rowDimensions = rowCard.find('.item-group .item');
        rowDimensions.each((index, el) => {
            const dimension = $(el).attr('data-filter-type');
            const val = $(el).attr('data-value');

            datapoint[dimension] = val;
        });

        const colCard = $($('#column_box .item.row-or-column-card')[col - 1]);
        const cardDimensions = colCard.find('.item-group .item');
        cardDimensions.each((index, el) => {
            const dimension = $(el).attr('data-filter-type');
            const val = $(el).attr('data-value');

            if (datapoint.hasOwnProperty(dimension)) {
                success = false;
                alertMessage =
                    'There are multiple values for the "' +
                    dimension +
                    '" dimension: ' +
                    val +
                    ' and ' +
                    datapoint[dimension] +
                    '.';

                return false;
            } else {
                datapoint[dimension] = val;
            }
        });

        $('.global-filter-container .global-filter .item').each((index, el) => {
            const dimension = $(el).attr('data-filter-type');
            const val = $(el).attr('data-value');

            if (datapoint.hasOwnProperty(dimension)) {
                success = false;
                alertMessage =
                    'There are multiple values for the "' +
                    dimension +
                    '" dimension: ' +
                    val +
                    ' and ' +
                    datapoint[dimension] +
                    '.';

                return false;
            } else {
                datapoint[dimension] = val;
            }
        });

        return {
            success: success,
            alert: alertMessage,
            datapoint: datapoint
        };
    }

    cellEditValidation(attr) {
        if (__WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].checkIfCellHasChanged(attr.oldVal, attr.newVal, attr.dataType)) {
            return __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].checkIfCellHasChanged(attr.oldVal, attr.newVal, attr.dataType);
        }

        const cellVal = attr.newVal;
        if (cellVal === '' || cellVal === 'null') {
            alert('Please enter a valid value for this cell.');

            return true;
        }

        // Validate.
        const createDataPoint = this.createDataPoint(attr.row, attr.col, cellVal);
        if (!createDataPoint.success) {
            alert(createDataPoint.alert);

            return true;
        }

        let dataPoint = createDataPoint.datapoint;
        const validation = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().validateDataPoint(dataPoint);
        const cellData = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_3__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId].getCellData(
            attr.row - 1,
            attr.col - 1
        );

        if (cellData.numberOfDataPoints > 1) {
            alert('Cannot paste into a cell formed from multiple data points.');
            return;
        }

        if (validation.success === false && cellData.numberOfDataPoints !== 1) {
            alert(validation.error);

            return true;
        }

        return false;
    }

    cellEditAddDataPoint(attr) {
        const createDataPoint = this.createDataPoint(attr.row, attr.col, attr.val);
        const dataPoint = createDataPoint.datapoint;
        const cellData = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].currentProject.analyses[__WEBPACK_IMPORTED_MODULE_3__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId].getCellData(
            attr.row - 1,
            attr.col - 1
        );
        if (cellData.numberOfDataPoints === 1) {
            dataPoint.id = cellData.dataPointIds[0];
        }

        let modifiedFromAnalysis = false;
        if (attr.hasOwnProperty('copiedFromRightTable') && attr.copiedFromRightTable) {
            modifiedFromAnalysis = true;
        }
        const result = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().addDataPoint(dataPoint, modifiedFromAnalysis);
        if (result.success === false) {
            alert(result.error);
            __WEBPACK_IMPORTED_MODULE_5__table_DataExplorerRenderTable__["a" /* dataExplorerRenderTable */].flexgrid.setCellData(attr.row, attr.col, attr.oldVal);
        }

        const tableCol = __WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__["a" /* dataExplorerImport */].rigthTableSelection.col1 + attr.colCounter;
        const tableRow = __WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__["a" /* dataExplorerImport */].rigthTableSelection.row1 + attr.rowCounter;
        if (attr.hasOwnProperty('copiedFromRightTable') && attr.copiedFromRightTable) {
            const matchingDataPoint = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().getMatchingDataPoint(dataPoint);

            if (matchingDataPoint.source !== __WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__["a" /* dataExplorerImport */].uuid) {
                matchingDataPoint.source = __WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__["a" /* dataExplorerImport */].uuid;

                const prevTable = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().sourceFiles[matchingDataPoint.source];
                if (prevTable.hasOwnProperty('cellProperties')) {
                    Object.keys(prevTable.cellProperties).forEach(col => {
                        Object.keys(prevTable.cellProperties[col]).forEach(row => {
                            let cell = prevTable.cellProperties[col][row];

                            if (cell.id === dataPoint.id) {
                                Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["setWith"])(prevTable.cellProperties, [col, row], {}, Object);
                            }
                        });
                    });
                }
            }
        }

        if (attr.hasOwnProperty('copiedFromRightTable') && attr.copiedFromRightTable) {
            let dataPointCopy = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["assign"])({}, dataPoint);
            dataPointCopy.failedSaving = false;
            dataPointCopy.cellType = 'data';

            const importedTable = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject().sourceFiles[__WEBPACK_IMPORTED_MODULE_4__DataExplorerImport__["a" /* dataExplorerImport */].uuid];
            let cellProperties = importedTable.cellProperties;
            Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["setWith"])(cellProperties, [tableCol, tableRow], dataPointCopy, Object);
        }

        // Save project.
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
    }

    cellEditEnding(s, e) {
        const oldVal = s.getCellData(e.row, e.col);
        const newVal = s.activeEditor.value;
        const dataType = s.columns[e.col].dataType;
        const col = e._rng._col;
        const row = e._rng._row;

        e.cancel = this.cellEditValidation({
            oldVal: oldVal,
            newVal: newVal,
            dataType: dataType,
            row: row,
            col: col
        });
    }

    cellEditEnded(s, e) {
        // Edit was cancelled?
        if (e.cancel) {
            return;
        }

        // TODO: Show loading screen.
        const val = $(s._activeCell).text();
        const col = e._rng._col;
        const row = e._rng._row;

        this.cellEditAddDataPoint({
            row: row,
            col: col,
            val: val,
            oldVal: s.getCellData(row, col)
        });
    }
}

const dataExplorerCellEditing = new DataExplorerCellEditing();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerCellEditing;



/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__entities_Project__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__entities_SourceFile__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__backend_BackendFileWorkflowService__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__StorageService__ = __webpack_require__(0);






class ImportXlsxService {
    /**
     * Reads an XLSX file, ingests it via the backend, and saves it in the Project.
     *
     * @param file File uploaded by user.
     * @returns {Promise<String>} Return the UUID of the new file.
     */
    async importXlsx(file) {
        const sheet = await this.getSheet(file);

        const itemsSource = this.getItemsSource(sheet);

        const sourceFile = this.addSourceFile(file, itemsSource);

        await this.ingestViaBackend(file, sourceFile);

        __WEBPACK_IMPORTED_MODULE_5__StorageService__["a" /* storageService */].saveCurrentProject();

        return sourceFile.uuid;
    }

    async getSheet(f) {
        return new Promise((resolve, reject) => {
            let reader = new FileReader();

            reader.onload = e => {
                let data = e.target.result;
                let workbook = XLSX.read(data, {
                    type: 'binary',
                    cellStyles: true
                });
                let number = 0;
                const numberOfSheets = workbook.SheetNames.length;
                if (numberOfSheets > 1) {
                    number = prompt(
                        'Please choose the number of the sheet that you want to upload (1 - ' + numberOfSheets + ')'
                    );
                    if (number === null) {
                        $('#source_data_files_sidebar ._cancel').click();
                    }

                    number--;
                }

                let sheet;
                sheet = workbook.Sheets[workbook.SheetNames[number]];

                resolve(sheet);
            };

            reader.readAsBinaryString(f);
        });
    }

    getItemsSource(sheet) {
        let itemsSource = [];
        let range = XLSX.utils.decode_range(sheet['!ref']);
        let startColumn = 0;
        let endColumn = range.e.c;
        let startRow = 0;
        let endRow = range.e.r;
        const dateFormats = [moment.ISO_8601, 'MMM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'];

        // Load cells one by one.
        for (let column = startColumn; column <= endColumn; column++) {
            let index = 0;

            for (let row = startRow; row <= endRow; row++) {
                if (itemsSource[index] == null) {
                    itemsSource[index] = [];
                }

                let key = XLSX.utils.encode_cell({
                    c: column,
                    r: row
                });

                if (sheet[key]) {
                    let cellValue = sheet[key].v;

                    // Check if valid date.
                    if (moment(sheet[key].w, dateFormats, true).isValid()) {
                        cellValue = sheet[key].w;
                    }

                    // Check if percentage.
                    if (sheet[key].w) {
                        let cellString = sheet[key].w.slice(0, sheet[key].w.length);
                        cellString = cellString.replace(/ /g, '');
                        if (cellString[cellString.length - 1] === '%') {
                            cellValue = cellString;
                        }
                    }

                    if (cellValue !== null && cellValue !== undefined) {
                        itemsSource[index].push(cellValue);
                    } else {
                        itemsSource[index].push('');
                    }
                } else {
                    itemsSource[index].push('');
                }

                index++;
            }
        }

        return itemsSource;
    }

    addSourceFile(file, itemsSource) {
        let thisProject = __WEBPACK_IMPORTED_MODULE_5__StorageService__["a" /* storageService */].getCurrentProject();

        const project = thisProject == null ? new __WEBPACK_IMPORTED_MODULE_2__entities_Project__["a" /* Project */]() : thisProject;

        const sourceFile = new __WEBPACK_IMPORTED_MODULE_3__entities_SourceFile__["a" /* SourceFile */]();
        sourceFile.name = file.name;
        sourceFile.itemsSource = itemsSource;
        sourceFile.formDimensions = project.getDimensions().reduce((a, dimension) => {
            if (dimension.slug !== 'value') {
                a.push(dimension.slug);
            }

            return a;
        }, []);
        const uuid = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getNextUuid();
        sourceFile.uuid = uuid;
        project.sourceFiles[uuid] = sourceFile;
        let projectKey = localStorage.getItem('current_project_key');
        localStorage.setItem('currentFileID', uuid);
        if (thisProject == null) localStorage.setItem(projectKey, JSON.stringify(project));
        else __WEBPACK_IMPORTED_MODULE_5__StorageService__["a" /* storageService */].saveCurrentProject();

        return sourceFile;
    }

    async ingestViaBackend(file, sourceFile) {
        const data = await __WEBPACK_IMPORTED_MODULE_4__backend_BackendFileWorkflowService__["a" /* backendFileWorkflowService */].uploadExcelFile(file);
        if (!data) {
            return;
        }

        const project = __WEBPACK_IMPORTED_MODULE_5__StorageService__["a" /* storageService */].getCurrentProject() == null ? new __WEBPACK_IMPORTED_MODULE_2__entities_Project__["a" /* Project */]() : __WEBPACK_IMPORTED_MODULE_5__StorageService__["a" /* storageService */].getCurrentProject();
        //const project = storageService.getCurrentProject();

        data['labels'].forEach(data => {
            const coord = XLSX.utils.decode_cell(data.coord);
            const cell = sourceFile.getSingleCellProperties(coord.r, coord.c);
            cell.cellType = 'label';
            cell.range = data.range;

            const dimensionSlug = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(data, 'dimensions[0].SLUG');
            if (dimensionSlug) {
                const dimensionLabel = project.getDimensionBySlug(dimensionSlug).label;
                cell.labelDimension = [dimensionLabel];
            }
        });

        data['Data'].forEach(data => {
            const coord = XLSX.utils.decode_cell(data.coord);
            const cell = sourceFile.getSingleCellProperties(coord.r, coord.c);
            cell.cellType = 'data';
            data.dimensions.forEach(dimension => {
                cell[dimension.SLUG] = dimension.VALUE;
            });
        });
    }
}

const importXlsxService = new ImportXlsxService();
/* harmony export (immutable) */ __webpack_exports__["a"] = importXlsxService;



/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataExplorerAttributesTree__ = __webpack_require__(133);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__ = __webpack_require__(5);




class DataExplorerSecondarySidebar {
    init() {
        this.container = $('#output_table_sidebar');
        this.attrContainer = $('#attr_dim_list');
        this.secondarySidebar = this.container.find('.secondary_sidebar');
        $('._contains-visible').removeClass('_contains-visible');
        $('._search-result-hidden').removeClass('_search-result-hidden');

        // Quick search for secondary sidebar
        $('.secondary_sidebar-menu input').on('change keydown keyup', e => {
            $('._contains-visible').removeClass('_contains-visible');
            $('._search-result-hidden').removeClass('_search-result-hidden');
            let val = $(e.target)
                .val()
                .toLowerCase();

            // Reset non-matching entries within target group.
            this.attrContainer.find('._row').removeClass('_search-result-hidden');

            this.attrContainer.find('li').each((index, item) => {
                let $item = $(item);

                if (
                    $item
                        .html()
                        .toLowerCase()
                        .indexOf(val) !== -1 ||
                    val === ''
                ) {
                    $item.removeClass('_hidden');
                } else {
                    $item.addClass('_hidden');
                }
            });

            this.attrContainer.find('._group').each((index, item) => {
                let visible = $(item).find('li:not(._hidden)');

                if (visible.length !== 0) {
                    $(item).show();

                    // Special bug fix
                    visible.each((index, visibleEntry) => {
                        $(visibleEntry)
                            .parentsUntil($('#available_box_names'), '._row')
                            .addClass('_contains-visible');
                    });

                    // Hide non-matching entries within target group.
                    $(item)
                        .find('li._hidden')
                        .each((index, newItem) => {
                            $(newItem)
                                .closest('._row:not(._contains-visible)')
                                .addClass('_search-result-hidden');
                        });
                } else {
                    $(item).hide();
                }
            });
        });

        // Open secondary sidebar when clicking on the main buttons "Columns", "Rows", or "Global".
        this.container.find('#main_sidebar_nav_tabs a').on('click', e => {
            const href = $(e.target).attr('href');

            // Open sidebar.
            this.secondarySidebar.addClass('_open');

            // Hide or show KPIs group.
            this.secondarySidebar
                .find('#attr_dim_list ._group:last-child')
                .css('display', href !== '#main_sidebar_global' ? '' : 'none');

            // Hide or show specific KPIs.
            this.secondarySidebar.find('#attr_dim_list ._group:last-child li.item[data-type="kpi"]').each(function() {
                const value = $(this).attr('data-value');

                switch (value) {
                    case 'CAGR':
                    case 'YoY':
                    case 'Delta':
                        $(this).css('display', href === '#main_sidebar_columns' ? '' : 'none');
                        break;

                    case 'Margin':
                        $(this).css('display', href === '#main_sidebar_rows' ? '' : 'none');
                        break;
                }
            });
        });

        // Close secondary sidebar.
        this.secondarySidebar.find('._close').on('click', () => {
            this.secondarySidebar.removeClass('_open');
        });
    }

    load() {
        // Filtered dimensions.
        let dimensions = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].currentProject.dimensions;
        let filteredDimensions = dimensions.filter(dimension => {
            return ['value', 'scale'].indexOf(dimension.slug) === -1;
        });

        // Attribute trees
        this.dataExplorerAttributesTree = [];
        for (let i = 0; i < filteredDimensions.length; i++) {
            this.dataExplorerAttributesTree.push(new __WEBPACK_IMPORTED_MODULE_1__DataExplorerAttributesTree__["a" /* DataExplorerAttributesTree */](filteredDimensions[i].slug));
            this.dataExplorerAttributesTree[i].init();
        }

        // Attributes tree
        this.attrContainer.html('');
        for (let i = 0; i < this.dataExplorerAttributesTree.length; i++) {
            let tree = $('<div id="available_box_names" class="available_box-sub tree-view" data-type="all"></div>');

            this.addGroup(tree, this.dataExplorerAttributesTree[i].dimensionSlug);
            this.dataExplorerAttributesTree[i].load(tree);
        }

        // Other dimensions
        {
            let kpis = ['Custom Formula', 'CAGR', 'YoY', 'Delta', 'Margin', 'Blank'];
            this.addToList(kpis, 'kpi', 'KPIs');
        }
    }

    addToList(items, dataType, filterName) {
        // Create list.
        let ul = $('<ul class="_list"></ul>');
        for (let i in items) {
            let item = __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].createItem(
                null,
                dataType,
                items[i],
                dataType === 'filter' ? filterName : undefined
            );
            ul.append(item);
        }

        // Add to group.
        this.addGroup(ul, filterName);

        // Enable drag-and-drop.
        Sortable.create(ul[0], __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgsForAttrs, {
            filter: '.remove-filter'
        });
    }

    addGroup(content, title) {
        let div = $('<div class="_group"><span class="_title">' + title + '</span></div>');
        content.appendTo(div);
        this.attrContainer.append(div);
    }
}

const dataExplorerSecondarySidebar = new DataExplorerSecondarySidebar();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerSecondarySidebar;



/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__entities_Project__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);



class DatabaseView {
    constructor() {
        this.table = null;
        this.columns = null;
    }

    init() {
        $('#current_database').on('change', function() {
            __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].setCurrentProject($(this).val());
        });

        $('#add_new_database').on('click', function() {
            let title = prompt('Enter a name for the new database');
            if (!title) {
                return;
            }

            let project = new __WEBPACK_IMPORTED_MODULE_0__entities_Project__["a" /* Project */]();
            project.name = title;

            const key = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].addProject(project);
            __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].setCurrentProject(key);
        });

        $('#remove_current_database').on('click', function() {
            if (!confirm('Are you sure you want to remove the current database?')) {
                return;
            }

            __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].removeCurrentProject();
        });

        $('#reset_everything').on('click', function() {
            if (
                !confirm(
                    'Are you sure you want to reset everything to its initial state? This includes all datasets and data structures.'
                )
            ) {
                return;
            }

            Object.keys(__WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getAllProjects()).forEach(() => {
                __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].removeCurrentProject();
            });
        });
    }

    syncWithDatabase() {
        if (__WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentTab() !== '#database_view') {
            return;
        }

        // Database control
        {
            let currentProject = $('#current_database');
            let dbs = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getAllProjects();

            // Remove existing options.
            currentProject.find('option').remove();

            // Add new options.
            for (let i in dbs) {
                let option = $('<option value="' + i + '">' + dbs[i] + '</option>');

                if (i === __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getDefaultProjectKey()) {
                    option.attr('selected', '');
                }

                currentProject.append(option);
            }
        }
    }
}

const databaseView = new DatabaseView();
/* harmony export (immutable) */ __webpack_exports__["a"] = databaseView;



/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(150);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(152),
    isArguments = __webpack_require__(153),
    isArray = __webpack_require__(12),
    isBuffer = __webpack_require__(81),
    isIndex = __webpack_require__(82),
    isTypedArray = __webpack_require__(156);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(7),
    stubFalse = __webpack_require__(155);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)(module)))

/***/ }),
/* 82 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),
/* 83 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),
/* 84 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(80),
    baseKeysIn = __webpack_require__(161),
    isArrayLike = __webpack_require__(52);

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(88),
    getPrototype = __webpack_require__(89),
    getSymbols = __webpack_require__(53),
    stubArray = __webpack_require__(86);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),
/* 88 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(84);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(88),
    isArray = __webpack_require__(12);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class MultiLevelHashMap {
    constructor(levels) {
        this.levels = levels;
        this.map = {};
    }

    set(keys, value) {
        let currentObject = this.map;
        keys.forEach((key, index) => {
            if (index < keys.length - 1) {
                if (!currentObject.hasOwnProperty(key)) {
                    currentObject[key] = {};
                }

                currentObject = currentObject[key];
            }
            else {
                currentObject[key] = value;
            }
        });
    }

    log() {
        console.log(this.map);
    }

    getUniqueGroups() {
        return this.getUniqueGroupsHelper(this.map, 1);
    }

    getUniqueGroupsHelper(map, level) {
        if (level !== this.levels) {
            let groups = [];

            for (let i in map) {
                let subMap = map[i];

                groups = groups.concat(this.getUniqueGroupsHelper(subMap, level + 1));
            }

            return groups;
        }

        return [map];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MultiLevelHashMap;


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataEditTableCell__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__ = __webpack_require__(9);









class SourceDataTableCellModal {
    constructor() {
        this.modalInputs = [];
        this.multipleCellsInputFields = {};
        this.hasUnsavedChanges = false;
        this.labelMultipleDimensions = [];
        this.labelMultipleOverwriteValues = [];
        this.dropdownValue = '';
        this.appliedLabelChangeCounter = 0;
        this.applyButton = '';
        this.previousSelection = 'notUsed';
    }

    init() {
        const fieldTemplateHtml =
            '<div class="_fields _data-properties"><div class="_field">' +
            '<div class="_name">Value</div><div class="_input"></div></div></div>';
        this.form = $('#tableCellModal .modal-body');
        this.form.append(fieldTemplateHtml);
        this.fieldTemplate = this.form.find('._data-properties ._field');
        const rangeInputHtml = $('#tableCellModal ._label-properties ._range-picker');

        this.rangeInput = new wijmo.input.AutoComplete(rangeInputHtml[0], {
            isReadOnly: false,
            onGotFocus: e => {
                __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.enableRangePickerMode((fileWorkflow, e) => {
                    const value = XLSX.utils.encode_range({
                        s: { r: e.range.topRow, c: e.range.leftCol },
                        e: { r: e.range.bottomRow, c: e.range.rightCol }
                    });

                    this.rangeInput._setText(value);
                });
            },
            lostFocus: e => {
                $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.hostElement).removeClass('_copy-cursor');
            }
        });

        // Prevent modal close when clicking on modal dialog.
        $('#tableCellModal > .modal-dialog').on('mousedown', e => {
            e.stopPropagation();
        });

        // Prevent modal close when clicking on dropdown.
        $('#source_data_files ._table ._modal-container').on('mousedown', '.wj-dropdown-panel', e => {
            e.stopPropagation();
        });

        // Apply changes button functionality on cell modal.
        $('._save-cell-properties').on('click', e => __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].saveProperties(e));

        // When showing the modal...
        $('#tableCellModal').on('show.bs.modal', e => {
            this.hasUnsavedChanges = false;
        });

        // Before hiding the modal...
        $('#tableCellModal').on('hide.bs.modal', e => {
            // Prevent user from losing their changes.
            if (this.hasUnsavedChanges) {
                const userConfirmation = confirm('Are you sure you do not want to save changes before leaving?');

                if (!userConfirmation) {
                    e.preventDefault();
                }
            }
        });

        $('._add-new-label-rule').on('click', () => this.addNewLabelRule());

        $(document).on('click', '._dimension-picker-container ._remove-rule', function() {
            $(this)
                .closest('._dimension-picker-container')
                .remove();
        });

        $('#source_data_files_pre_ingestion ._table').on('keydown', e => {
            if (!$('#tableCellModal').data('bs.modal').isShown || !$('#cellModalSwitchLabel').is(':checked')) {
                return;
            }
            e.preventDefault();
            e.stopImmediatePropagation();

            const keycode = e.keyCode ? e.keyCode : e.which;
            if (keycode === 13) {
                __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].saveProperties(e);
            }
        });
    }

    sync() {}

    getValuesForDimensionsDropdown() {
        let fields = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs;
        let dimensions = [];
        for (const key in fields) {
            const field = fields[key];
            if (field.slug === 'value' || !field.selected) {
                continue;
            }
            dimensions.push(field);
        }

        return dimensions;
    }

    addNewLabelRule() {
        $('#tableCellModal .modal-body ._label-properties ._add-new-label-rule').before(
            this.generateDimensionPickerContainer()
        );

        const dimensionsSelector = $('#tableCellModal ._label-properties ._dimension-picker').last();
        const overwriteValueSelector = $('#tableCellModal ._label-properties ._overwrite-value').last();
        new wijmo.input.ComboBox(dimensionsSelector[0], {
            displayMemberPath: 'label',
            selectedValuePath: 'slug',
            isEditable: true,
            itemsSource: this.getValuesForDimensionsDropdown()
        });
        new wijmo.input.InputMask(overwriteValueSelector[0], {
            isRequired: false
        });
    }

    generateDimensionPickerContainer() {
        let removeButton = '';
        if ($('._dimension-picker-container').length) {
            removeButton = '<div class="btn btn-danger _remove-rule">Remove dimension</div>';
        }

        return (
            '<div class="_dimension-picker-container">' +
            '<div class="_field"><div class="_name">Overwrite</div><div class="_overwrite-value"></div></div>' +
            '<div class="_field"><div class="_name">Dimension</div><div class="_dimension-picker"></div></div>' +
            removeButton +
            '</div>'
        );
    }

    generateDimensionsInputContainerForLabelView() {
        const fileCellProperties = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().cellProperties;
        this.rangeInput._setText(this.getCommonValueForSelection('range'));
        $('._dimension-picker-container').remove();
        $('#tableCellModal ._label-properties ._add-new-label-rule').css('display', '');

        if (__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isSingleCell) {
            const col = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection._col;
            const row = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection._row;
            const dimensions = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${col}][${row}]['labelDimension']`);
            if (dimensions && dimensions.length > 1) {
                dimensions.map((dimension, index) => {
                    $('#tableCellModal .modal-body ._label-properties ._add-new-label-rule').before(
                        this.generateDimensionPickerContainer()
                    );

                    const dimensionsSelector = $('#tableCellModal ._label-properties ._dimension-picker').last();
                    const labelDimensionsInput = new wijmo.input.ComboBox(dimensionsSelector[0], {
                        displayMemberPath: 'label',
                        selectedValuePath: 'slug',
                        isEditable: true,
                        itemsSource: this.getValuesForDimensionsDropdown()
                    });
                    labelDimensionsInput.text = dimension;

                    const overwriteValueSelector = $('#tableCellModal ._label-properties ._overwrite-value').last();
                    const overwriteValueInput = new wijmo.input.InputMask(overwriteValueSelector[0], {
                        isRequired: false
                    });
                    let overwriteVal = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${col}][${row}]['overwriteValue'][${index}]`);
                    overwriteVal = overwriteVal ? overwriteVal : '';
                    overwriteValueInput.rawValue = overwriteVal;
                });
            } else {
                this.createLabelPropertiesContainer(
                    Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${col}][${row}]['labelDimension'][0]`),
                    Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${col}][${row}]['overwriteValue'][0]`)
                );
            }
        } else {
            let sel = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;
            for (let col = sel.leftCol; col <= sel.rightCol; col++) {
                for (let row = sel.topRow; row <= sel.bottomRow; row++) {
                    const dimensions = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${col}][${row}]['labelDimension']`);
                    if (dimensions && dimensions.length > 1) {
                        $('#tableCellModal ._label-properties ._add-new-label-rule').css('display', 'none');

                        return;
                    }
                }
            }

            this.createLabelPropertiesContainer();
            const labelDimensionsInput = $('#tableCellModal ._label-properties ._dimension-picker input');
            const overwriteValueInput = $('#tableCellModal ._label-properties ._overwrite-value input');
            if (Array.isArray(this.labelMultipleDimensions)) {
                if (this.labelMultipleDimensions.length > 1) {
                    labelDimensionsInput.val('Multiple values');
                } else if (this.labelMultipleDimensions.length === 1) {
                    labelDimensionsInput.val(this.labelMultipleDimensions[0]);
                } else {
                    labelDimensionsInput.val('');
                }
            }

            if (Array.isArray(this.labelMultipleOverwriteValues)) {
                if (this.labelMultipleOverwriteValues.length > 1) {
                    overwriteValueInput.val('Multiple values');
                } else if (this.labelMultipleOverwriteValues.length === 1) {
                    overwriteValueInput.val(this.labelMultipleOverwriteValues[0]);
                } else {
                    overwriteValueInput.val('');
                }
            }
        }
    }

    createLabelPropertiesContainer(dimension = '', overwriteVal = '') {
        $('#tableCellModal .modal-body ._label-properties ._add-new-label-rule').before(
            this.generateDimensionPickerContainer()
        );
        const labelDimensionsInput = new wijmo.input.ComboBox(
            $('#tableCellModal ._label-properties ._dimension-picker')[0],
            {
                displayMemberPath: 'label',
                selectedValuePath: 'slug',
                isEditable: true,
                itemsSource: this.getValuesForDimensionsDropdown()
            }
        );
        labelDimensionsInput.text = dimension;

        overwriteVal = overwriteVal ? overwriteVal : '';
        const overwriteValueInput = new wijmo.input.InputMask(
            $('#tableCellModal ._label-properties ._overwrite-value')[0],
            {
                isRequired: false,
                rawValue: overwriteVal
            }
        );
    }

    highlightRangeCells(range) {
        const rangeArray = range.split(':');
        const rangeLeft = rangeArray[0].slice(0, rangeArray[0].length);
        const rangeRight = rangeArray[1].slice(0, rangeArray[1].length);
        let row = rangeLeft.replace(/^\D+/g, '');
        let col = XLSX.utils.decode_col(rangeArray[0].replace(row, ''));
        row = Number(row) - 1;
        let row1 = rangeRight.replace(/^\D+/g, '');
        let col1 = XLSX.utils.decode_col(rangeArray[1].replace(row1, ''));
        row1 = Number(row1) - 1;
        row = Math.min(row, row1);
        row1 = Math.max(row, row1);
        col = Math.min(col, col1);
        col1 = Math.max(col, col1);

        if (row === row1) {
            // First cell.
            $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(row, col)).css('border-left', '1px solid #5797e9');

            // Last cell.
            $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(row, col1)).css('border-right', '1px solid #5797e9');

            for (let i = col; i <= col1; i++) {
                const cell = $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(row, i));
                cell.css('border-top', '1px solid #5797e9');
                cell.css('border-bottom', '1px solid #5797e9');
            }

            $('#tableCellModal .modal-dialog').data('line_range', true);

            return;
        }

        if (col === col1) {
            // First cell.
            $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(row, col)).css('border-top', '1px solid #5797e9');

            // Last cell.
            $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(row1, col)).css('border-bottom', '1px solid #5797e9');

            for (let i = row; i <= row1; i++) {
                const cell = $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(i, col));
                cell.css('border-left', '1px solid #5797e9');
                cell.css('border-right', '1px solid #5797e9');
            }
        } else {
            for (let i = col; i <= col1; i++) {
                const cellTop = $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(row, i));
                const cellBottom = $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(row1, i));
                cellTop.css('border-top', '1px solid #5797e9');
                cellBottom.css('border-bottom', '1px solid #5797e9');
            }

            for (let i = row; i <= row1; i++) {
                const cellLeft = $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(i, col));
                const cellRight = $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(i, col1));
                cellLeft.css('border-left', '1px solid #5797e9');
                cellRight.css('border-right', '1px solid #5797e9');
            }
        }
    }

    detachSubmitFormButton(prevSelection, newSelection, button, prevBtn) {
        if (this.applyButton) {
            if (this.previousSelection === prevSelection) {
                $('.modal-footer').prepend(this.applyButton[0]);
                $(`.${prevBtn}`)
                    .attr('disabled', false)
                    .css('display', '');
                this.applyButton = $(`.${button}`).detach();
            }
        } else {
            this.applyButton = $(`.${button}`).detach();
        }
        this.previousSelection = newSelection;
    }

    displayContentForCellModalForLabelView() {
        this.detachSubmitFormButton('data', 'label', '_apply-and-next', '_save-cell-properties');

        this.generateDimensionsInputContainerForLabelView();

        // Hightlight range cells.
        if (__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isSingleCell) {
            const col = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection._col;
            const row = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection._row;

            const fileCellProperties = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().cellProperties;
            const range = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${col}][${row}][range]`);
            if (range) {
                this.highlightRangeCells(range);
            }
        }
    }

    generateLabelDimensionsForModalInputsInDataView() {
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const fileCellProperties = file.cellProperties;
        const formDimensions = file.formDimensions;
        let labelDimensions2 = [];
        let labelDimensions = [];

        Object.keys(fileCellProperties).forEach(col => {
            Object.keys(fileCellProperties[col]).forEach(row => {
                if (fileCellProperties[col][row].cellType === 'label') {
                    const dimension = fileCellProperties[col][row].labelDimension;
                    const value = fileCellProperties[col][row].overwriteValue
                        ? fileCellProperties[col][row].overwriteValue
                        : fileCellProperties[col][row].value;

                    if (Array.isArray(dimension)) {
                        dimension.map((dimensionValue, index) => {
                            const dimensionObject = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs.filter(obj => {
                                return obj.label === dimensionValue;
                            });

                            if (dimensionObject.length) {
                                const dimensionSlug = dimensionObject[0].slug;

                                labelDimensions2 = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(labelDimensions2, [dimensionSlug]);
                                labelDimensions[dimensionSlug] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], labelDimensions[dimensionSlug], [
                                    value[index]
                                ]);
                            }
                        });
                    } else {
                        labelDimensions2 = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(labelDimensions2, [dimension]);
                        labelDimensions[dimension] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], labelDimensions[dimension], [value]);
                    }
                }

                if (fileCellProperties[col][row].cellType === 'data') {
                    const cell = fileCellProperties[col][row];
                    Object.keys(cell).forEach(function(key) {
                        if (formDimensions.includes(key)) {
                            if (cell[key]) {
                                const value = cell[key];
                                labelDimensions2 = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(labelDimensions2, [key]);
                                labelDimensions[key] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], labelDimensions[key], [value]);
                            }
                        }
                    });
                }
            });
        });

        return labelDimensions;
    }

    setCellTypeForCellModal(type) {
        // $('#tableCellModal ._range-picker').parent().css('display', '');
        $('#tableCellModal .modal-body').data('cell_type', type);
        $('#tableCellModal ._range-picker')
            .parent()
            .css('display', type === 'label' ? '' : 'none');
        $('#tableCellModal ._label-properties').css('display', type === 'label' ? '' : 'none');
        $('#tableCellModal ._data-properties').css('display', type === 'data' ? '' : 'none');
        $('#tableCellModal ._apply-and-next')
            .css('display', type === 'data' ? '' : 'none')
            .prop('disabled', type === 'data' ? false : true);
        $('#tableCellModal ._save-cell-properties')
            .css('display', type !== 'data' ? '' : 'none')
            .prop('disabled', type !== 'data' ? false : true);

        switch (type) {
            case 'data':
                $('#cellModalSwitchData').prop('checked', true);
                this.displayContentForCellModalForDataView();
                break;

            case 'label':
                $('#cellModalSwitchLabel').prop('checked', true);
                this.displayContentForCellModalForLabelView();
                break;

            case 'notUsed':
            default:
                $('#cellModalSwitchNotUsed').prop('checked', true);
                break;
        }
    }

    displayContentForCellModalForDataView() {
        const labelDimensions = this.generateLabelDimensionsForModalInputsInDataView();
        const fileCellProperties = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().cellProperties;
        this.detachSubmitFormButton('label', 'data', '_save-cell-properties', '_apply-and-next');

        // Load settings from cell data.
        let inputFields = {};
        if (__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isSingleCell) {
            let sel = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;
            const cellProperties = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${sel.leftCol}][${sel.topRow}]`);
            if (cellProperties) {
                Object.keys(cellProperties).forEach(function(key) {
                    inputFields[key] = cellProperties[key];
                });
            }
        } else {
            inputFields = this.multipleCellsInputFields;
        }

        // Remove previous stuff.
        this.modalInputs.forEach(modalInput => {
            modalInput.dispose();
        });
        this.modalInputs.length = 0;
        this.form.find('._data-properties ._field').remove();

        // Add fields.
        const dataset = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentDataPoints();
        let fields = __WEBPACK_IMPORTED_MODULE_6__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs;
        for (const key in fields) {
            const field = fields[key];
            if (field.slug === 'value' || !field.selected) {
                continue;
            }

            const e = this.fieldTemplate.clone();
            e.find('._name').text(field.label);
            this.form.find('._fields._data-properties').append(e);

            // Dropdown values
            let values;
            switch (field.slug) {
                case 'attribute__global_terms':
                    values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getGlobalTerms();
                    break;

                case 'parent_attribute':
                    values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(dataset, 'attribute');
                    break;

                default:
                    values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(dataset, field.slug);
                    break;
            }

            values = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(values, labelDimensions[field.slug]);
            // Create input.
            const input = new wijmo.input.AutoComplete(e.find('._input')[0], {
                itemsSource: values.reverse(),
                onGotFocus: () => {
                    this.dropdownValue = input.text;

                    __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.enableClickToCopyMode((fileWorkflow, e) => {
                        const activeCell = $(__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.cells.getCellElement(e._rng._row, e._rng._col));
                        const inputElement = $(input._elRef);

                        // Copy value from cell to focused input.
                        sourceDataTableCellModal.hasUnsavedChanges = true;
                        inputElement.val(activeCell.text());

                        fileWorkflow.disableSelection = true;
                        e.cancel = true;
                        inputElement.animate({ backgroundColor: '#449D44' }, 200);
                        inputElement.animate({ backgroundColor: 'rgba(0, 0, 0, 0)' }, 150).blur(function(e) {
                            setTimeout(function() {
                                input.focus();
                            }, 20);
                        });
                    });
                },
                textChanged: e => {
                    if (this.dropdownValue && __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isSingleCell) {
                        // Check if is applied label.
                        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
                        const table = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource;
                        const selectedCol = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection._col;
                        const selectedRow = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection._row;

                        check_label: {
                            for (let row = 0; row < table.length; row++) {
                                for (let col = 0; col < table[row].length; col++) {
                                    const cellType = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(file.cellProperties, `[${col}][${row}]['cellType']`, false);
                                    if (cellType === 'label') {
                                        let range = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(file.cellProperties, `[${col}][${row}]['range']`, false);
                                        range = XLSX.utils.decode_range(range);
                                        const cellVal = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.getCellData(row, col, true);

                                        if (
                                            cellVal === this.dropdownValue &&
                                            selectedCol >= range.s.c &&
                                            selectedCol <= range.e.c &&
                                            selectedRow >= range.s.r &&
                                            selectedRow <= range.e.r
                                        ) {
                                            if (
                                                !confirm(
                                                    'This value was applied by a label. Are you sure you want to change it?'
                                                )
                                            ) {
                                                $(e._e)
                                                    .find('input')
                                                    .val(this.dropdownValue);
                                                this.dropdownValue = '';
                                                document.activeElement.blur();
                                                if (this.appliedLabelChangeCounter) {
                                                    this.appliedLabelChangeCounter--;
                                                }

                                                return false;
                                            } else {
                                                // file.cellProperties[selectedCol][selectedRow]['appliedLabelWarning'] = true;
                                                this.appliedLabelChangeCounter++;
                                                this.dropdownValue = input.text;
                                            }

                                            break check_label;
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                onLostFocus: () => {
                    this.dropdownValue = '';
                    __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].fileWorkflow.enableModal();
                }
            });
            input._kosmosField = field.slug;
            this.modalInputs.push(input);

            // Default value.
            if (field.slug in inputFields) {
                if (__WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isSingleCell) {
                    input._setText(inputFields[field.slug]);
                } else {
                    if (Array.isArray(inputFields[field.slug])) {
                        if (inputFields[field.slug].length > 1) {
                            input._setText('Multiple values');
                        } else if (inputFields[field.slug].length === 1) {
                            input._setText(inputFields[field.slug][0]);
                        } else {
                            input._setText('');
                        }
                    }
                }
            } else {
                input._setText('');
            }

            // Add events.
            input.textChanged.addHandler(() => {
                this.hasUnsavedChanges = true;
            });
        }
    }

    displayContentForCellModal(activeCell) {
        // Set title of cell modal.
        $('#tableCellModal .modal-title').text(activeCell.text());

        // Add Data | Label switch.
        if (!$('#tableCellModal ._data-label-switch').length) {
            const labelInput =
                '<label class="_modal-switch-label-left"><input disabled type="radio" id="cellModalSwitchData" name="data-label-switch" value="data">Data</label>';
            const dataInput =
                '<label class="_modal-switch-label-middle"><input disabled type="radio" id="cellModalSwitchLabel" name="data-label-switch" value="label">Label</label>';
            const notUsedInput =
                '<label class="_modal-switch-label-right"><input disabled type="radio" id="cellModalSwitchNotUsed" name="data-label-switch" value="notUsed">Not used</label>';
            const divRadioContainer =
                '<div class="_data-label-switch">' + labelInput + dataInput + notUsedInput + '</div>';
            this.form.prepend(divRadioContainer);

            $('#tableCellModal ._data-label-switch input[type=radio][name=data-label-switch]').change(e => {
                const value = $(e.currentTarget).val();
                this.setCellTypeForCellModal(value);
            });
        }

        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        if (__WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].newCellIsBeingEdited) {
            __WEBPACK_IMPORTED_MODULE_5__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].newCellIsBeingEdited = false;

            let sel = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;
            const cellType = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(file, `cellProperties[${sel.leftCol}][${sel.topRow}].cellType`);
            this.setCellTypeForCellModal(cellType);
        }
    }

    displayContentForCellsModal() {
        const grid = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid;
        let sel = grid.selection;
        let cellType = '';
        const project = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject();
        const sourceFile = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        let inputFields = {};
        project.getDimensions().map(dimension => {
            inputFields[dimension.slug] = [];
        });
        inputFields['cellType'] = [];
        inputFields['dataPointId'] = [];

        // Set title of cell modal.
        const modalTitle = XLSX.utils.encode_range({
            s: { r: sel.topRow, c: sel.leftCol },
            e: { r: sel.bottomRow, c: sel.rightCol }
        });
        $('#tableCellModal .modal-title').text(modalTitle);

        this.labelMultipleDimensions = [];
        for (let row = sel.topRow; row <= sel.bottomRow; row++) {
            for (let col = sel.leftCol; col <= sel.rightCol; col++) {
                const cellProperties = sourceFile.getSingleCellProperties(row, col);

                if (cellProperties.cellType === 'label') {
                    if (cellType !== 'data') {
                        cellType = 'label';
                    }

                    if (__WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].ingestionStep === __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_AddFileSteps__["a" /* addFileSteps */].DEFINE_DATA_STEP) {
                        let dimension = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(cellProperties, `['labelDimension'][0]`);
                        dimension = dimension ? dimension : '';
                        this.labelMultipleDimensions = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(this.labelMultipleDimensions, [dimension]);

                        let overwriteValue = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(cellProperties, `['overwriteValue'][0]`);
                        overwriteValue = overwriteValue ? overwriteValue : '';
                        this.labelMultipleOverwriteValues = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(this.labelMultipleOverwriteValues, [overwriteValue]);
                    }
                }

                if (cellProperties.cellType === 'data') {
                    cellType = 'data';
                } else {
                    continue;
                }

                // Prepare inputFields.
                Object.keys(inputFields).forEach(function(key) {
                    if (cellProperties[key]) {
                        inputFields[key] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(inputFields[key], [cellProperties[key]]);
                    } else {
                        if (key !== 'cellType' && key !== 'dataPointId') {
                            if (inputFields[key].length) {
                                inputFields[key] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])(inputFields[key], ['']);
                            } else {
                                inputFields[key] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["concat"])(inputFields[key], ['']);
                            }
                        }
                    }
                });
            }
        }

        this.multipleCellsInputFields = inputFields;

        this.setCellTypeForCellModal(cellType);
    }

    // Get the common value for the currect selection of cells, or a string indicating multiple values.
    getCommonValueForSelection(property) {
        const sel = __WEBPACK_IMPORTED_MODULE_7__tabs_source_data_SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;
        const fileCellProperties = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().cellProperties;
        let values = {};

        // Get all values.
        for (let col = sel.leftCol; col <= sel.rightCol; col++) {
            for (let row = sel.topRow; row <= sel.bottomRow; row++) {
                let value = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["get"])(fileCellProperties, `[${col}][${row}][${property}]`);

                if (!value && value !== 0) {
                    value = '';
                }

                values[value] = true;
            }
        }
        values = Object.keys(values);

        if (values.length > 1) {
            return 'Multiple values';
        } else if (values.length === 1) {
            return values[0];
        }

        return '';
    }

    setCommonProperty(object, property, value) {
        if (value === 'Multiple values') {
            return;
        }

        object[property] = value;
    }
}

const sourceDataTableCellModal = new SourceDataTableCellModal();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataTableCellModal;



/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__ = __webpack_require__(4);






class SourceDataFilesReviewTable {
    constructor() {
        this.columnDefs = [];
        this.scale = 1;
        this.inUpdatedLayout = false;
    }

    init() {
        this.flexgrid = new wijmo.grid.FlexGrid($('#source_data_files_pre_ingestion ._review-table')[0], {
            isReadOnly: true,
            selectionMode: 'Row',
            itemsSource: [],
            autoGenerateColumns: false,
            formatItem: (s, e) => {
                if (e.panel === s.cells) {
                    let item = s.rows[e.row].dataItem;

                    switch (s.columns[e.col].binding) {
                        case 'value':
                            if (e.cell.childNodes[0]) {
                                e.cell.childNodes[0].nodeValue = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item.value);
                            }
                            break;

                        case '__normalized_value':
                            e.cell.innerHTML = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item['__normalized_value'] / this.scale);
                            break;

                        case 'scale':
                            // e.cell.innerHTML = item.scale;
                            break;
                    }
                }
            },
            updatedLayout: () => {
                if (this.inUpdatedLayout) {
                    this.inUpdatedLayout = false;
                } else {
                    this.inUpdatedLayout = true;
                    this.flexgrid.autoSizeRow(0, true);
                }
            }
        });
    }

    sync() {
        // Columns.
        this.columnDefs = this.getAvailableColumns();
        this.updateColumns();

        // Data points.
        let dataPoints = [];
        const file = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        if (file && file.dataPoints) {
            dataPoints = file.dataPoints;
        }
        this.setData(dataPoints);
    }

    getAvailableColumns() {
        const cols = [];
        const allColumns = __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_add_file_workflow_SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs;

        cols.push({
            slug: '__normalized_value',
            label: 'Normalized Value',
            selected: true,
            isReadOnly: true
        });

        cols.push({
            slug: 'value',
            label: 'Value',
            selected: true,
            isReadOnly: true
        });

        allColumns.forEach(column => {
            if (column.selected) {
                cols.push({
                    slug: column.slug,
                    label: column.label,
                    selected: true,
                    isReadOnly: false
                });
            }
        });

        return cols;
    }

    updateColumns() {
        this.flexgrid.columns.length = 0;
        this.columnDefs.forEach(column => {
            if (!column.selected) {
                return;
            }

            // Add column to grid.
            const gridCol = new wijmo.grid.Column();
            gridCol.binding = column.slug;
            gridCol.header = column.label;
            gridCol.dataMap = column.dataMap;
            gridCol.isReadOnly = column.isReadOnly;
            this.flexgrid.columns.push(gridCol);
        });
    }

    setData(dataset) {
        dataset = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"])(dataset);

        const project = __WEBPACK_IMPORTED_MODULE_3__services_StorageService__["a" /* storageService */].getCurrentProject();
        // const sourceFiles = project.sourceFiles;

        dataset = dataset.map(item => {
            // Normalize values.
            item['__normalized_value'] = item.value * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseScale(item.scale) * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseInverse(item.inverse);

            // Process dimensions.
            item = project.addDataStructuresToDataPoint(item);

            return item;
        });

        // Update data source.
        this.flexgrid.itemsSource = dataset;
        this.flexgrid.collectionView.refresh();
        this.updateColumns();
    }
}

const sourceDataFilesReviewTable = new SourceDataFilesReviewTable();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataFilesReviewTable;



/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Tab__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_SourceDataPointsSidebar__ = __webpack_require__(37);






class ProjectSetup extends __WEBPACK_IMPORTED_MODULE_3__Tab__["a" /* Tab */] {
    constructor() {
        super();
        this.tabHref = '#project_setup';
        this.table = null;
        this.columns = null;
    }

    init() {
        this.container = $('#project_setup');
        this.dimensionsTable = this.container.find('._dimensions');
        this.dimensionsTableTemplate = this.dimensionsTable.find('._template').detach();

        this.container.find('._add-custom-dimension').on('click', () => {
            __WEBPACK_IMPORTED_MODULE_4__tabs_source_data_SourceDataPointsSidebar__["a" /* sourceDataPointsSidebar */].addCustomDimension();
        });
    }

    sync() {
        const project = __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].getCurrentProject();
        const tbody = this.dimensionsTable.find('tbody').html('');
        const dimensions = project.getDimensions(true);

        dimensions.forEach(dimension => {
            const tr = this.dimensionsTableTemplate.clone();

            tr.find('._name').html(dimension.label);

            if (!tr.find('._dictionary-selector').contents().length) {
                let dictionarySelect = new wijmo.input.MultiSelect(tr.find('._dictionary-selector')[0], {
                    placeholder: 'Select Dictionaries',
                    itemsSource: [],
                    headerFormat: '{count} dictionaries selected',
                    onCheckedItemsChanged: () => {
                        dimension.dictionaries = dictionarySelect.checkedItems;
                        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                    }
                });
                dictionarySelect.itemsSource = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getGlobalTermsDictionaries();
                dictionarySelect.checkedItems = dimension.getDictionaries();
                tr.find('._dictionary-selector').css('display', dimension.hasGlobalTerms ? '' : 'none');
            }

            tr.find('._has-structures input')
                .css('display', dimension.special ? 'none' : '')
                .prop('checked', dimension.hasDataStructures)
                .on('change', e => {
                    dimension.hasDataStructures = e.target.checked;
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
                });

            tr.find('._has-global-terms input')
                .css('display', dimension.special ? 'none' : '')
                .prop('checked', dimension.hasGlobalTerms)
                .on('change', e => {
                    dimension.hasGlobalTerms = e.target.checked;
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
                });

            tr.find('._used-as-identifier input')
                .css('display', dimension.special ? 'none' : '')
                .prop('checked', dimension.usedAsIdentifier)
                .on('change', e => {
                    dimension.usedAsIdentifier = e.target.checked;
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
                });

            tr.find('._has-time-intervals input')
                .css('display', dimension.special ? 'none' : '')
                .prop('checked', dimension.hasTimeIntervals)
                .on('change', e => {
                    dimension.hasTimeIntervals = e.target.checked;
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
                });

            {
                let selectElement = tr.find('._data-type select');
                selectElement.css('display', dimension.special ? 'none' : '');

                let optionNumber = dimension.dataType + 1;
                selectElement.children('option:nth-child(' + optionNumber + ')').prop('selected', true);

                selectElement.on('change', e => {
                    if (parseInt($(e.target).prop('value')) === __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__["a" /* dimensionTypesService */].STRING) {
                        dimension.dataType = __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__["a" /* dimensionTypesService */].STRING;
                    } else if (parseInt($(e.target).prop('value')) === __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__["a" /* dimensionTypesService */].CURRENCY) {
                        dimension.dataType = __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__["a" /* dimensionTypesService */].CURRENCY;
                    } else {
                        dimension.dataType = __WEBPACK_IMPORTED_MODULE_1__services_DimensionTypesService__["a" /* dimensionTypesService */].NUMBER;
                    }

                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
                });
            }

            tr.find('._hide-dimension')
                .css('display', dimension.special ? 'none' : '')
                .addClass(dimension.isVisible ? '' : 'active');

            tr.find('._remove-dimension').css('display', dimension.special ? 'none' : '');

            tbody.append(tr);
        });

        $('._remove-dimension').on('click', function(e) {
            let result = projectSetup.removeDimension(e, dimensions);

            if (result !== false) {
                project.dimensions = result;
                __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
            }
        });

        $('._hide-dimension').on('click', function() {
            const $this = $(this);
            $this.toggleClass('active');

            const currentDimensionName = $this
                .parent()
                .siblings('._name')
                .text();
            project.dimensions.forEach(function(dimension) {
                if (dimension.label === currentDimensionName) {
                    $this.hasClass('active') ? (dimension.isVisible = false) : (dimension.isVisible = true);
                    __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                }
            });

            __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
        });

        // Calculate Delta by adding children.
        this.container
            .find('._delta-add-children')
            .prop('checked', project.calculateDeltaByAddingChildren)
            .on('change', e => {
                project.calculateDeltaByAddingChildren = e.target.checked;
                __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
                __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
            });
    }

    removeDimension(e, dimensionsArray) {
        let change = confirm('Remove dimension?');

        if (change) {
            let newDimensions = [];
            let dimensionName = $(e.target)
                .parent()
                .siblings('._name')
                .text();
            dimensionsArray.forEach(dimension => {
                if (dimension.label !== dimensionName) {
                    newDimensions.push(dimension);
                }
            });
            return newDimensions;
        }

        return false;
    }
}

const projectSetup = new ProjectSetup();
/* harmony export (immutable) */ __webpack_exports__["a"] = projectSetup;



/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Kosmos_Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Kosmos_services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Kosmos_tabs_data_explorer_DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Kosmos_tabs_DatabaseView__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Kosmos_tabs_dropbox_Dropbox__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Kosmos_tabs_project_setup_ProjectSetup__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Kosmos_tabs_source_data_SourceData__ = __webpack_require__(21);








$(document).ready(function() {
    // Get current tab.
    let currentTab = window.location.hash ? window.location.hash : __WEBPACK_IMPORTED_MODULE_1__Kosmos_services_StorageService__["a" /* storageService */].getCurrentTab();
    if (!currentTab) {
        currentTab = '#database_view';
    }
    if (window.location.pathname.indexOf('datafiles') >= 0) {
        currentTab = '#dropbox';
    } else if (window.location.pathname.indexOf('datasources') >= 0) {
        currentTab = '#source_data';
        localStorage.removeItem('blobExcelData');
    }
    //storageService.setCurrentTab(currentTab);
    //$('ul.nav a[href="' + currentTab + '"]').trigger('click');
    //currentTab = '#dropbox';
    __WEBPACK_IMPORTED_MODULE_1__Kosmos_services_StorageService__["a" /* storageService */].setCurrentTab(currentTab);
    $('ul.nav a[href="' + currentTab + '"]').trigger('click');
    $(window).trigger('resize');

    // Change tab event.
    $('#main_nav_tabs a').on('shown.bs.tab', function(e) {
        __WEBPACK_IMPORTED_MODULE_0__Kosmos_Common__["a" /* common */].showFakeLoading();

        let href = $(this).attr('href');

        // Bug-fix for various UI glitches.
        $(window).trigger('resize');

        // Save current tab.
        __WEBPACK_IMPORTED_MODULE_1__Kosmos_services_StorageService__["a" /* storageService */].setCurrentTab(href);

        // Sync view with database.
        __WEBPACK_IMPORTED_MODULE_1__Kosmos_services_StorageService__["a" /* storageService */].syncViews(true);

        // Sync location hash.
        history.pushState(null, null, href);
    });

    // Init modules and storageService.
    __WEBPACK_IMPORTED_MODULE_3__Kosmos_tabs_DatabaseView__["a" /* databaseView */].init();
    __WEBPACK_IMPORTED_MODULE_2__Kosmos_tabs_data_explorer_DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].init();
    __WEBPACK_IMPORTED_MODULE_6__Kosmos_tabs_source_data_SourceData__["a" /* sourceData */].init();
    __WEBPACK_IMPORTED_MODULE_5__Kosmos_tabs_project_setup_ProjectSetup__["a" /* projectSetup */].init();
    __WEBPACK_IMPORTED_MODULE_4__Kosmos_tabs_dropbox_Dropbox__["a" /* dropbox */].init();
    __WEBPACK_IMPORTED_MODULE_1__Kosmos_services_StorageService__["a" /* storageService */].loadDefaultProjects();
});


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const globalTerms = [
    {
        name: 'Revenue',
        dictionaries: ['V1']
    },
    {
        name: 'Cost of sales',
        dictionaries: ['V1']
    },
    {
        name: 'Gross profit',
        dictionaries: ['V1']
    },
    {
        name: 'Other income',
        dictionaries: ['V1']
    },
    {
        name: 'Selling and distribution expenses',
        dictionaries: ['V1']
    },
    {
        name: 'Administrative expenses',
        dictionaries: ['V1']
    },
    {
        name: 'Research and development expenses',
        dictionaries: ['V1']
    },
    {
        name: 'Results from operating activities',
        dictionaries: ['V1']
    },
    {
        name: 'Finance income',
        dictionaries: ['V1']
    },
    {
        name: 'Finance costs',
        dictionaries: ['V1']
    },
    {
        name: 'Net finance costs',
        dictionaries: ['V1']
    },
    {
        name: 'Share of profit of equity-accounted investees, ner of tax',
        dictionaries: ['V1']
    },
    {
        name: 'Profit before tax',
        dictionaries: ['V1']
    },
    {
        name: 'Tax expense',
        dictionaries: ['V1']
    },
    {
        name: 'Profit from continuing operations',
        dictionaries: ['V1']
    },
    {
        name: 'Net sales',
        dictionaries: ['PL']
    },
    {
        name: 'Material expenses',
        dictionaries: ['PL']
    },
    {
        name: 'Gross profit',
        dictionaries: ['PL']
    },
    {
        name: 'Personnel expenses',
        dictionaries: ['PL']
    },
    {
        name: 'Other operating income',
        dictionaries: ['PL']
    },
    {
        name: 'Other operating expenses',
        dictionaries: ['PL']
    },
    {
        name: 'EBITDA',
        dictionaries: ['PL']
    },
    {
        name: 'Depreciation/amort.',
        dictionaries: ['PL']
    },
    {
        name: 'EBIT',
        dictionaries: ['PL']
    },
    {
        name: 'Interest income',
        dictionaries: ['PL']
    },
    {
        name: 'Interest expenses',
        dictionaries: ['PL']
    },
    {
        name: 'EBT',
        dictionaries: ['PL']
    },

    {
        name: 'Taxes',
        dictionaries: ['PL']
    },
    {
        name: 'Net profit',
        dictionaries: ['PL']
    },
    {
        name: 'Intangible assets',
        dictionaries: ['BS']
    },
    {
        name: 'PPE',
        dictionaries: ['BS']
    },
    {
        name: 'Inventories',
        dictionaries: ['BS']
    },
    {
        name: 'Trade receiveables',
        dictionaries: ['BS']
    },
    {
        name: 'Trade payables',
        dictionaries: ['BS']
    },
    {
        name: 'Others assets',
        dictionaries: ['BS']
    },
    {
        name: 'Other liabilities',
        dictionaries: ['BS']
    },
    {
        name: 'Provisions',
        dictionaries: ['BS']
    },
    {
        name: 'Cash',
        dictionaries: ['BS']
    },
    {
        name: 'Shareholder loan',
        dictionaries: ['BS']
    },
    {
        name: 'Net Debt 1',
        dictionaries: ['BS']
    },
    {
        name: 'Net Debt 2',
        dictionaries: ['BS']
    },
    {
        name: 'Net Debt 3',
        dictionaries: ['BS']
    }
];
/* harmony export (immutable) */ __webpack_exports__["a"] = globalTerms;


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class DataExplorerCellData {
    constructor() {
        // The row-level or column-level formula that was used, if any.
        this.formula = null;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataExplorerCellData;



/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class DataStructure {
    constructor(object) {
        this.attribute = '';
        this.parentAttribute = '';
        this.group = '';
        this.globalTerm = '';
        this.timeIntervalBegin = '';
        this.timeIntervalEnd = '';
        this.changed = false;

        if (object) {
            Object.assign(this, object);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataStructure;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(65),
    toKey = __webpack_require__(72);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(12),
    isSymbol = __webpack_require__(27);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(28);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),
/* 102 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(104);

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(105);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(67);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(107),
    ListCache = __webpack_require__(30),
    Map = __webpack_require__(42);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(108),
    hashDelete = __webpack_require__(113),
    hashGet = __webpack_require__(114),
    hashHas = __webpack_require__(115),
    hashSet = __webpack_require__(116);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(29);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(68),
    isMasked = __webpack_require__(110),
    isObject = __webpack_require__(15),
    toSource = __webpack_require__(69);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(111);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(7);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),
/* 112 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),
/* 113 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(29);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(29);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(29);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),
/* 117 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(31);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(31);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(31);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(31);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(32);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),
/* 123 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(32);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(32);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(32);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(128);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(28),
    arrayMap = __webpack_require__(71),
    isArray = __webpack_require__(12),
    isSymbol = __webpack_require__(27);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorerStorage__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DataExplorerVirtualTable__ = __webpack_require__(8);






class DataExplorerCellFormulas {
    constructor() {
        this.selectedCellRow = null;
        this.selectedCellColumn = null;
        this.table = $('#pivot');
        this.editor = $('#output_table ._formula-cell-editor');

        this.editor.on('blur', e => {
            const input = $(e.target);

            // Skip?
            if (input.prop('data-skip-blur')) {
                input.prop('data-skip-blur', false);
                return;
            }

            this.saveFormula();
        });
        this.editor.on('keydown', e => {
            // Enter
            if (e.keyCode === 13) {
                this.saveFormula();

                // Prevent adding a newline.
                e.preventDefault();
            }
        });
        this.editor.on('click', 'i', e => {
            __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__["a" /* dataExplorerFormulas */].onInputBuilderClick(e);
        });
        $('#output_table ._formula-cell-editor-query').on('click', e => {
            if (!this.editor.hasClass('_active')) {
                return;
            }

            __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__["a" /* dataExplorerFormulas */].onBuilderClick(this.editor, e);
        });
    }

    saveFormula() {
        // Parse input once more.
        __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__["a" /* dataExplorerFormulas */].parseFormulaInput(this.editor);

        // Get formula.
        let formula = this.editor.html();
        if (formula.slice(0, 1) === '=') {
            formula = '=' + this.editor.attr('data-formula');
        }

        // Check if this differs from old formula.
        const dataExplorerAnalysis = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].getCurrentProject().analyses[
            __WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId
        ];
        const cellData = dataExplorerAnalysis.getCellData(this.selectedCellRow, this.selectedCellColumn);
        if (cellData.customFormula === formula) {
            return;
        }

        // Set custom formula.
        cellData.customFormula = formula;
        dataExplorerAnalysis.setCellData(this.selectedCellRow, this.selectedCellColumn, cellData);

        // Save table.
        __WEBPACK_IMPORTED_MODULE_3__DataExplorerStorage__["a" /* dataExplorerStorage */].save(__WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId);

        // Refresh table.
        __WEBPACK_IMPORTED_MODULE_4__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].updateTable();
    }

    // Event when clicking a cell.
    onSelectionChanged(s, e) {
        // Disable editor for ranges (multiple cells) or headers (first row/col).
        if (e.range.isSingleCell === false || e.row === 0 || e.col === 0) {
            this.editor.removeClass('_active');
            this.editor.html('');
            return;
        }
        const row = e.row - 1;
        const col = e.col - 1;

        // Show formula editor.
        this.editor.addClass('_active');
        const customFormula = __WEBPACK_IMPORTED_MODULE_0__services_StorageService__["a" /* storageService */].currentProject.analyses[
            __WEBPACK_IMPORTED_MODULE_1__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId
        ].getCellData(row, col).customFormula;
        this.editor.html(customFormula);
        __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__["a" /* dataExplorerFormulas */].parseFormulaInput(this.editor);

        // Select cell.
        this.selectedCellRow = row;
        this.selectedCellColumn = col;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataExplorerCellFormulas;



/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__entities_VirtualTableCell__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorer__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__ = __webpack_require__(5);





class DataExplorerEval {
    constructor() {
        this.filters = {};

        // The number of data-points that were matched in the last evaluated formula.
        this.numberOfDataPoints = 0;

        // The IDs of the data-points that were matched, per query, for the last evaluated formula.
        this.dataPointIdsPerQuery = [];
    }

    evalColumnFormula(render, formula, filters, row) {
        return this.evalFormula(render, formula, filters, row, null);
    }

    evalRowFormula(render, formula, filters, column) {
        return this.evalFormula(render, formula, filters, null, column);
    }

    evalFormula(render, formula, filters, row, column) {
        this.filters = filters;

        if ((row !== null || column !== null) && !render.previousTableData) {
            return null;
        }

        let start = null,
            prefix,
            tableIds;
        if (row !== null) {
            start = __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].columnSequence - 1;
            prefix = 'C';
            tableIds = render.tableIdsToColumns;
        } else if (column !== null) {
            start = __WEBPACK_IMPORTED_MODULE_2__DataExplorer__["a" /* dataExplorer */].rowSequence - 1;
            prefix = 'R';
            tableIds = render.tableIdsToRows;
        }

        // Replace variables, if applicable.
        let processedFormula = formula;
        if (start !== null) {
            // Replace variables in reverse order, so we don't replace C11 with C1's value for example.
            for (let i = start; i >= 1; i--) {
                let variable = prefix + i;

                if (!(variable in tableIds)) {
                    continue;
                }

                let index = tableIds[variable];
                let value =
                    row !== null ? render.previousTableData[row][index] : render.previousTableData[index][column];
                let r = new RegExp(variable, 'g');

                processedFormula = processedFormula.replace(r, ' ' + value + ' ');
            }
        }

        // Evaluate formula.
        this.numberOfDataPoints = 0;
        this.dataPointIdsPerQuery = [];
        let value;
        try {
            value = eval(processedFormula);
        } catch (e) {
            value = null;
        }

        // Don't show arrays or objects, that means formula is most probably invalid.
        if (Array.isArray(value) || typeof value === 'object') {
            value = '';
        }

        // Compose result.
        const cellData = new __WEBPACK_IMPORTED_MODULE_0__entities_VirtualTableCell__["a" /* VirtualTableCell */]();
        cellData.value = value;
        cellData.formula = formula;
        cellData.numberOfDataPoints = this.numberOfDataPoints;
        cellData.dataPointIdsPerQuery = this.dataPointIdsPerQuery;
        if (this.dataPointIdsPerQuery.length === 1) {
            cellData.dataPointIds = this.dataPointIdsPerQuery[0].ids;
        }

        return cellData;
    }

    parseArguments(args) {
        if (args.length > 0 && Array.isArray(args[0])) {
            if (args[0].length > 0) {
                return args[0].map(dataPoint => dataPoint.value);
            } else {
                return [0];
            }
        }

        return args;
    }
}

const dataExplorerEval = new DataExplorerEval();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerEval;


function MIN() {
    return Math.min.apply(null, dataExplorerEval.parseArguments(arguments));
}

function MAX() {
    return Math.max.apply(null, dataExplorerEval.parseArguments(arguments));
}

function SUM() {
    const args = dataExplorerEval.parseArguments(arguments);
    let sum = 0;

    for (let i = 0; i < args.length; i++) {
        sum += args[i];
    }

    return sum;
}

function AVERAGE() {
    const args = dataExplorerEval.parseArguments(arguments);
    let sum = SUM.apply(null, args);

    return sum / args.length;
}

function QUERY(filters) {
    const allFilters = Object.assign({}, dataExplorerEval.filters, filters);
    const dataPoints = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentDataPoints();
    const results = __WEBPACK_IMPORTED_MODULE_3__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(dataPoints, allFilters);

    // Save stats about matched data-points.
    dataExplorerEval.numberOfDataPoints += results.length;
    dataExplorerEval.dataPointIdsPerQuery.push({
        filters: filters,
        ids: results.map(dataPoint => dataPoint.id)
    });

    return results;
}


/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class BackendFileWorkflowService {
    constructor() {
        this.prefix = 'https://master-kosmos-etl-backend.apps.motius.ci/';
        //this.prefix = '/';
        this.excel = this.prefix + 'api/excel/';
    }

    async uploadExcelFile(file) {
        // Prepare form data.
        const formData = new FormData();
        formData.append('name', file.name);
        formData.append('upload', file);

        // Sent to backend.
        let data;
        try {
            const response = await fetch(this.excel, {
                method: 'POST',
                body: formData
            });

            // Parse response.
            data = await response.json();
            data = data.json;
        } catch (e) {
            data = null;
        }
        localStorage.setItem('uploadExcelFile', JSON.stringify(data));
        return data;
    }
}

const backendFileWorkflowService = new BackendFileWorkflowService();
/* harmony export (immutable) */ __webpack_exports__["a"] = backendFileWorkflowService;



/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__tabs_source_data_SourceDataPoints__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__ = __webpack_require__(34);




class DataExplorerCellViewer {
    constructor() {
        /** @type {VirtualTableCell} */
        this.currentCellData = null;
        this.formulaCellViewer = $('#dataExplorerFormulaCellViewer');
        this.formulaElement = this.formulaCellViewer.find('._formula');
        this.formulaElement.on('click', 'i', e => {
            const icon = $(e.target);
            let filters;
            try {
                filters = JSON.parse(icon.attr('data-args'));
            } catch (e) {
                filters = {};
            }

            let dataPointIds = [];
            this.currentCellData.dataPointIdsPerQuery.forEach(data => {
                if (Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["isEqual"])(filters, data.filters)) {
                    dataPointIds = data.ids;
                }
            });

            this.formulaCellViewer.modal('hide');
            this.showDataPointsViewer(dataPointIds);
        });
    }

    /**
     * @param {VirtualTableCell} cellData
     */
    showCellViewer(cellData) {
        if (cellData.dataPointIdsPerQuery.length < 2) {
            this.showDataPointsViewer(cellData.dataPointIds);
        } else {
            this.showFormulaCellViewer(cellData);
        }
    }

    showDataPointsViewer(dataPointIds) {
        $('#main_nav_tabs a[href="#source_data"]').trigger('click');
        $('._mode > label:nth-of-type(2)').trigger('click');
        $('body').addClass('showing-multiple-data-values');
        $('body').append('<div class="multiple-data-close-button"><i class="fa fa-chevron-left"></i> Back</div>');
        $('#source_data_data_points .input-group, ._mode').css('visibility', 'hidden');

        $('.multiple-data-close-button').on('click', () => {
            $('#main_nav_tabs a[href="#output_table"]').trigger('click');

            this.removeMultipleDataPointsFilter();
        });

        __WEBPACK_IMPORTED_MODULE_1__tabs_source_data_SourceDataPoints__["a" /* sourceDataPoints */].setIdFilter(dataPointIds);

        $('#main_nav_tabs a').on('click', () => {
            this.removeMultipleDataPointsFilter();
        });

        __WEBPACK_IMPORTED_MODULE_1__tabs_source_data_SourceDataPoints__["a" /* sourceDataPoints */].sync();
    }

    removeMultipleDataPointsFilter() {
        __WEBPACK_IMPORTED_MODULE_1__tabs_source_data_SourceDataPoints__["a" /* sourceDataPoints */].setIdFilter([]);
        $('.multiple-data-close-button').remove();
        $('#source_data_data_points .input-group, ._mode').css('visibility', 'visible');

        __WEBPACK_IMPORTED_MODULE_1__tabs_source_data_SourceDataPoints__["a" /* sourceDataPoints */].sync();
    }

    showFormulaCellViewer(cellData) {
        this.currentCellData = cellData;
        const result = __WEBPACK_IMPORTED_MODULE_2__DataExplorerFormulas__["a" /* dataExplorerFormulas */].convertFormulaToHtml(cellData.formula);
        this.formulaElement.html(result);
        this.formulaCellViewer.modal('show');
    }
}

const dataExplorerCellViewer = new DataExplorerCellViewer();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerCellViewer;



/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__ = __webpack_require__(5);




class DataExplorerAttributesTree {
    constructor(dimensionSlug) {
        this.dimensionSlug = dimensionSlug;
    }

    init() {
        this.slugToAttrs = {};
    }

    load(tree) {
        this.container = tree;

        const project = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentProject();
        let dataset = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentDataPoints();
        let attributes = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getUniqueValues(dataset, this.dimensionSlug);

        // Get attributes.
        this.slugToAttrs = {};
        attributes.forEach(attr => {
            let slug = attr;

            this.slugToAttrs[slug] = {
                label: attr,
                slug: slug,
                parentSlug: null,
                open: false,
                hasChildren: false
            };
        });

        // Get parents.
        // TODO
        const dataStructures = project.getDataStructuresForDimension(this.dimensionSlug);
        for (const attribute in dataStructures) {
            const ds = dataStructures[attribute];
            const rightSlug = ds.attribute;
            const leftSlug = ds.parentAttribute;

            if (!(leftSlug in this.slugToAttrs) || !(rightSlug in this.slugToAttrs)) {
                continue;
            }

            // Was the other parent a better match?
            if (
                this.slugToAttrs[rightSlug].parentSlug !== null &&
                rightSlug.indexOf(this.slugToAttrs[rightSlug].parentSlug) !== -1
            ) {
                continue;
            }

            this.slugToAttrs[leftSlug].hasChildren = true;
            this.slugToAttrs[rightSlug].parentSlug = leftSlug;
        }

        this.render();
    }

    render(parentSlug, parentElement) {
        let attrs = [];

        if (typeof parentSlug === 'undefined') {
            parentSlug = null;
        }

        // Get attrs.
        for (let slug in this.slugToAttrs) {
            let attr = this.slugToAttrs[slug];

            if (attr.parentSlug !== parentSlug) {
                continue;
            }

            attrs.push(attr);
        }

        // Get container.
        let container;
        if (parentSlug) {
            container = parentElement;
        } else {
            container = this.container;
            container.html('');
        }

        // Compose HTML.
        attrs.forEach(attr => {
            let button = $('<div class="_button"></div>');
            let item = __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].createItem(null, 'filter', attr.label, this.dimensionSlug);
            let ul = $('<ul></ul>').append(item);
            let row = $('<div class="_row"></div>').append(button, ul);
            container.append(row);

            // Button
            button.addClass(attr.open ? '_open' : '_closed');
            if (attr.hasChildren) {
                button.addClass('_has-children');
                button.html(
                    attr.open
                        ? '<i class="fa fa-minus-square-o" aria-hidden="true"></i>'
                        : '<i class="fa fa-plus-square-o" aria-hidden="true"></i>'
                );
                button.on('click', () => {
                    attr.open = !attr.open;
                    this.render();

                    return false;
                });
            } else {
                button.html('<i class="fa fa-square-o" aria-hidden="true"></i>');
            }

            // Sortable item
            Sortable.create(ul[0], __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].sortableArgsForAttrs, {
                filter: '.remove-filter'
            });

            // Render children.
            if (attr.open) {
                let children = $('<div class="_children"></div>');
                this.render(attr.slug, children);
                row.append(children);
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataExplorerAttributesTree;



/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__ = __webpack_require__(5);




class DataExplorerQueryBuilder {
    constructor() {
        this.filters = {};
        this.formula = '';
        this.dimensionInputs = {};

        // DOM
        this.rootElement = $('#dataExplorerQueryBuilder');
        this.dimensionsElement = this.rootElement.find('._dimensions');
        this.dimensionsTemplate = this.dimensionsElement.find('._template').detach();
        this.formulaElement = this.rootElement.find('._formula ._text');
        if (!localStorage.getItem('blobExcelData'))
            this.flexgrid = new wijmo.grid.FlexGrid(this.rootElement.find('._preview')[0], {
                isReadOnly: true,
                selectionMode: 'Row',
                itemsSource: [],
                autoGenerateColumns: false,
                formatItem: (s, e) => {
                    if (e.panel === s.cells) {
                        const item = s.rows[e.row].dataItem;
                        const binding = s.columns[e.col].binding;

                        switch (binding) {
                            case 'value':
                            case '__normalized_value':
                                if (e.cell.childNodes[0]) {
                                    e.cell.childNodes[0].nodeValue = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].formatNumber(item[binding]);
                                }
                                break;
                        }
                    }
                }
            });

        // Events
        this.rootElement.on('hidden.bs.modal', () => {
            this.onHidden();
        });
        this.rootElement.on('shown.bs.modal', () => {
            this.onShown();
        });
        this.rootElement.find('._save-changes').on('click', () => {
            this.saveChanges();
        });
    }

    /**
     * Open the visual query builder.
     * @param filters Selected values for each dimension.
     * @param callback Function to call once the user hits "Save"
     */
    open(filters, callback) {
        // Save callback.
        this.callback = callback;

        // Add dimensions.
        const project = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentProject();
        const dimensions = project.getDimensions();
        dimensions.forEach(dimension => {
            if (dimension.slug === 'value' || dimension.slug === 'scale') {
                return;
            }

            // Label
            const d = this.dimensionsTemplate.clone();
            d.find('._label').html(dimension.label);

            // Input
            const values = __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].getUniqueValues(project.dataPoints, dimension.slug);
            const input = new wijmo.input.MultiSelect(d.find('._dropdown')[0], {
                placeholder: 'Inherit',
                // isEditable: true,
                itemsSource: values,
                onCheckedItemsChanged: () => {
                    this.updateFormula();
                    this.updateFlexGrid();
                }
            });
            input.checkedItems = filters.hasOwnProperty(dimension.slug) ? filters[dimension.slug] : [];
            this.dimensionInputs[dimension.slug] = input;

            // Append.
            this.dimensionsElement.append(d);
        });

        // Show modal.
        this.rootElement.modal('show');
    }

    saveChanges() {
        // Use callback.
        this.callback(this.formula);

        // Hide modal.
        this.rootElement.modal('hide');
    }

    updateFormula() {
        const formula = {};

        // Consider each dimension input.
        for (const dimension in this.dimensionInputs) {
            const input = this.dimensionInputs[dimension];

            // Ignore inputs without any checked items.
            if (input.checkedItems.length === 0) {
                continue;
            }

            // Save checked items.
            formula[dimension] = input.checkedItems;
        }

        // Save as final formula.
        this.filters = formula;
        this.formula = 'QUERY(' + JSON.stringify(formula) + ')';
        this.formulaElement.val(this.formula);
    }

    updateFlexGrid() {
        const project = __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].getCurrentProject();

        // Set columns.
        {
            this.flexgrid.columns.length = 0;

            const gridCol = new wijmo.grid.Column();
            gridCol.binding = '__normalized_value';
            gridCol.header = 'Normalized Value';
            this.flexgrid.columns.push(gridCol);

            project.dimensions.forEach(dimension => {
                const gridCol = new wijmo.grid.Column();
                gridCol.binding = dimension.slug;
                gridCol.header = dimension.label;
                this.flexgrid.columns.push(gridCol);
            });
        }

        // Fetch items.
        const dataPoints = __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].getMatchingDataPoints(project.dataPoints, this.filters);
        dataPoints.forEach(item => {
            // Normalize values.
            item['__normalized_value'] = item.value * __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseScale(item.scale) * __WEBPACK_IMPORTED_MODULE_0__Common__["a" /* common */].parseInverse(item.inverse);
        });
        this.flexgrid.itemsSource = dataPoints;
    }

    onHidden() {
        // Remove dimensions.
        for (const dimension in this.dimensionInputs) {
            const input = this.dimensionInputs[dimension];
            input.dispose();
        }
        this.dimensionInputs = {};
        this.dimensionsElement.html('');
    }

    onShown() {
        this.updateFormula();
        this.updateFlexGrid();
    }
}

const dataExplorerQueryBuilder = new DataExplorerQueryBuilder();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerQueryBuilder;



/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataExplorerFormulas__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__ = __webpack_require__(5);




class DataExplorerSidebar {
    init() {
        this.container = $('#output_table_sidebar');
        this.itemGroups = this.container.find('.item-group');
        this.lastSelectedItem = null;
        this.clipboardItems = [];

        $(document).on('keydown', e => {
            // Copy
            if (__WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].ctrlDown && e.keyCode === __WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].cKey) {
                // Save a clone of each item.
                this.clipboardItems = this.itemGroups.find('> .item._active').toArray();
                this.clipboardItems = this.clipboardItems.map(item => {
                    return $(item).clone();
                });
            }

            // Paste
            if (__WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].ctrlDown && e.keyCode === __WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].vKey && this.clipboardItems.length > 0) {
                // Append a clone of each item.
                this.clipboardItems.forEach(item => {
                    const newItem = $(item).clone();
                    newItem.hide();
                    this.itemGroups.filter(':visible').append(newItem);
                    __WEBPACK_IMPORTED_MODULE_1__DataExplorerFormulas__["a" /* dataExplorerFormulas */].initInput(newItem.find('._formula'));
                    newItem.fadeIn(333);
                });

                // Reset IDs.
                __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].resetRowIds();
                __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].resetColumnIds();

                // Deselect everything.
                this.deselectAll();

                // Save and update table, after fade-in animation has ended.
                setTimeout(() => {
                    __WEBPACK_IMPORTED_MODULE_2__DataExplorerHelper__["a" /* dataExplorerHelper */].saveAndUpdate();
                }, 333);
            }
        });

        this.container.on('click', e => {
            if (!__WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].ctrlDown && !__WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].shiftDown) {
                this.deselectAll();
            }
        });

        this.container.on('click', '.row-or-column-card', e => {
            const item = $(e.currentTarget);

            // Deselect other cards if shift/ctrl is not pressed.
            if (!__WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].ctrlDown && !__WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].shiftDown) {
                this.deselectAll();
            }

            // If shift if pressed, select all items between the previous and the current one.
            if (__WEBPACK_IMPORTED_MODULE_0__services_KeyboardService__["a" /* keyboardService */].shiftDown) {
                const index1 = this.lastSelectedItem.index();
                const index2 = item.index();
                const indexMin = Math.min(index1, index2);
                const indexMax = Math.max(index1, index2);
                const parent = item.parent();

                for (let i = indexMin; i <= indexMax; i++) {
                    parent
                        .children()
                        .eq(i)
                        .addClass('_active');
                }
            } else {
                // Simply toggle the state.
                item.toggleClass('_active');
            }

            // Remember the last selected item.
            this.lastSelectedItem = item;

            e.stopPropagation();
        });
    }

    deselectAll() {
        this.itemGroups.find('.item').removeClass('_active');
    }
}

const dataExplorerSidebar = new DataExplorerSidebar();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerSidebar;



/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__datasets_filter_template_1__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__datasets_filter_template_2__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__datasets_filter_template_3__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__datasets_filter_template_4__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__datasets_filter_template_5__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__DataExplorer__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__DataExplorerAnalyses__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__DataExplorerHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__DataExplorerStorage__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__DataExplorerVirtualTable__ = __webpack_require__(8);













class DataExplorerTemplate {
    checkFormulaYearsGlobalTerms(item, termsToReplace, filteredTemplate) {
        const years = ['year1', 'year2'];
        let foundMatch;

        for (let i = 0; i < years.length; i++) {
            foundMatch = false;
            let year = years[i];
            let parameter = 'time';

            if (item.type === 'margin') {
                parameter = 'attribute';
            }

            for (let yearItem in termsToReplace[parameter]) {
                let intermediateTerm = termsToReplace[parameter];
                if (item[year] !== intermediateTerm[yearItem].globalTerm) {
                    continue;
                }

                foundMatch = true;
                item.localTerm = item.localTerm || {};
                item.localTerm[year] = intermediateTerm[yearItem].attribute;

                break;
            }
        }

        if (foundMatch) {
            filteredTemplate.push(item);
        }
    }

    addKpiFromTemplate(item) {
        $(
            `.main_sidebar .row-or-column-card[data-section-type="${item.type}"] ._year1 option[value="${
                item.localTerm.year1
            }"]`
        ).prop('selected', 'selected');
        $(
            `.main_sidebar .row-or-column-card[data-section-type="${item.type}"] ._year2 option[value="${
                item.localTerm.year2
            }"]`
        ).prop('selected', 'selected');

        __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].syncTitle($(`.main_sidebar .row-or-column-card[data-section-type=${item.type}]`));
    }

    addCardsFromTemplate(template, termsToReplace, set) {
        // Step 1: identify valid filters for rows/columns
        let filteredTemplate = [];
        const key = set + 's';

        // Iterate through each row/column
        for (let i = 0; i < template[key].length; i++) {
            let item = template[key][i];
            let temporaryRow = [];

            if (item.hasOwnProperty('type')) {
                switch (item.type) {
                    case 'yoy':
                    case 'delta':
                    case 'cagr':
                    case 'margin':
                        this.checkFormulaYearsGlobalTerms(item, termsToReplace, filteredTemplate);
                        break;

                    case 'formula':
                    case 'blank':
                        filteredTemplate.push(item);
                        break;
                }
            } else {
                // Iterate through each row/column's filters
                for (let j = 0; j < item.filters.length; j++) {
                    let type = item.filters[j].dimension;
                    let value = item.filters[j].value;

                    let matchesGlobalTerm = undefined;

                    // If dimension has Global Term
                    if (termsToReplace.hasOwnProperty(type)) {
                        for (let instance in termsToReplace[type]) {
                            // If Global Term matches supplied value, display user selected synonim (local value)
                            if (termsToReplace[type][instance].globalTerm === value) {
                                value = termsToReplace[type][instance].attribute;
                                matchesGlobalTerm = true;
                                break;
                            } else {
                                matchesGlobalTerm = false;
                            }
                        }
                    }
                    // If filter Local Term needs to match Global Term but does not, don't display it
                    if (matchesGlobalTerm === false) {
                        continue;
                    }

                    temporaryRow.push({ type: type, value: value });
                }

                if (item.hasOwnProperty('in_chart')) {
                    temporaryRow.in_chart = true;
                }

                filteredTemplate.push(temporaryRow);
            }
        }

        // Step 2: display valid filters in main sidebar
        for (let i = 0; i < filteredTemplate.length; i++) {
            let item = filteredTemplate[i];

            if (item.hasOwnProperty('type')) {
                switch (item.type) {
                    case 'yoy':
                    case 'delta':
                        let percentMode = item.type === 'yoy';
                        __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].addYoyColumn(item.year1, item.year2, percentMode);
                        this.addKpiFromTemplate(item);
                        break;

                    case 'cagr':
                        __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].addCagrColumn(item.year1, item.year2);
                        this.addKpiFromTemplate(item);
                        break;

                    case 'margin':
                        __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].addMarginRow(item.year1, item.year2);
                        this.addKpiFromTemplate(item);
                        break;

                    case 'formula':
                        __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].addFormula(item.formula, set);
                        break;

                    case 'blank':
                        const currentItem = __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].addFilter(item, set);

                        $(currentItem)
                            .attr('data-value', 'Blank')
                            .find('._title')
                            .attr('value', 'Blank');
                        break;
                }
            } else if (item.length > 0) {
                const section = __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].addFilter(null, set);

                for (let j = 0; j < item.length; j++) {
                    let filterItem = __WEBPACK_IMPORTED_MODULE_8__DataExplorerHelper__["a" /* dataExplorerHelper */].createItem(null, 'filter', item[j].value, item[j].type);
                    section.find('._filters').append(filterItem);
                }

                __WEBPACK_IMPORTED_MODULE_9__DataExplorerSections__["a" /* dataExplorerSections */].syncTitle(section);
            }

            this.showInChart(item, set, i);
        }
    }

    // Load chart display options if present in template.
    loadChartOptions(template) {
        if (!template.hasOwnProperty('chart_options')) {
            return;
        }

        for (let key in template.chart_options[0]) {
            if (template.chart_options[0].hasOwnProperty(key)) {
                $(`.${key}`)
                    .find(`input[value="${template.chart_options[0][key]}"]`)
                    .trigger('click');
            }
        }
    }

    // Load template items
    showInChart(item, set, i) {
        i = i + 1;

        let itemChartOption = $(`#main_sidebar_${set}s`).find(`.row-or-column-card:nth-child(${i}) ._button._chart`);
        if (item.hasOwnProperty('in_chart')) {
            if (itemChartOption.attr('data-checked', false)) {
                itemChartOption.trigger('click');
            }
        } else {
            if (itemChartOption.attr('data-checked', true)) {
                itemChartOption.trigger('click');
            }
        }
    }

    // Template specifics.
    loadTemplate(templateSource) {
        const templateArray = [__WEBPACK_IMPORTED_MODULE_0__datasets_filter_template_1__["a" /* filterTemplate1 */], __WEBPACK_IMPORTED_MODULE_1__datasets_filter_template_2__["a" /* filterTemplate2 */], __WEBPACK_IMPORTED_MODULE_2__datasets_filter_template_3__["a" /* filterTemplate3 */], __WEBPACK_IMPORTED_MODULE_3__datasets_filter_template_4__["a" /* filterTemplate4 */], __WEBPACK_IMPORTED_MODULE_4__datasets_filter_template_5__["a" /* filterTemplate5 */]];
        const template = templateArray[templateSource];

        // Get all filter-type properties
        const dimensions = __WEBPACK_IMPORTED_MODULE_5__services_StorageService__["a" /* storageService */].getCurrentProject().getDimensions();

        let termsToReplace = {};
        for (let i = 0; i < dimensions.length; i++) {
            // Filter-types that have a global term
            if (dimensions[i].hasGlobalTerms) {
                // Filter type
                let dimensionType = dimensions[i].slug;

                // All data structures of that filter-type
                termsToReplace[dimensionType] = __WEBPACK_IMPORTED_MODULE_5__services_StorageService__["a" /* storageService */]
                    .getCurrentProject()
                    .getDataStructuresForDimension(dimensionType);
            }
        }

        // Empty columns and rows
        $('#row_box, #column_box').empty();

        // Reset rows and columns counter to 1
        __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].columnSequence = 1;
        __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].rowSequence = 1;

        // Add rows from template
        this.addCardsFromTemplate(template, termsToReplace, __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].SET_ROW);

        // Add columns from template
        this.addCardsFromTemplate(template, termsToReplace, __WEBPACK_IMPORTED_MODULE_6__DataExplorer__["a" /* dataExplorer */].SET_COLUMN);

        // Add global filters from template
        $('#filter_box_headline, #filter_box_a1, #filter_box_hidden').html('');

        const globalsSections = ['globals_headline', 'globals_a1', 'globals_hidden'];

        for (let g = 0; g < globalsSections.length; g++) {
            if (template[globalsSections[g]].length > 0) {
                for (let i = 0; i < template[globalsSections[g]].length; i++) {
                    let filterData = template[globalsSections[g]][i].filters[0];

                    let value = filterData.value;
                    let type = filterData.dimension;

                    if (
                        termsToReplace.hasOwnProperty(type) &&
                        termsToReplace[type].hasOwnProperty(value) &&
                        termsToReplace[type][value].globalTerm
                    ) {
                        value = termsToReplace[type][value].globalTerm;
                    }

                    let filter = $(
                        '.secondary_sidebar .item[data-filter-type="' + type + '"][data-value="' + value + '"]'
                    );
                    $(`.global-filter-container:nth-of-type(${g + 1}) ul`).append(filter.clone());
                }
            }
        }

        this.loadChartOptions(template);

        __WEBPACK_IMPORTED_MODULE_8__DataExplorerHelper__["a" /* dataExplorerHelper */].addFilterRemoveButton();

        __WEBPACK_IMPORTED_MODULE_10__DataExplorerStorage__["a" /* dataExplorerStorage */].save(__WEBPACK_IMPORTED_MODULE_7__DataExplorerAnalyses__["a" /* dataExplorerAnalyses */].currentAnalysisId);

        __WEBPACK_IMPORTED_MODULE_11__DataExplorerVirtualTable__["a" /* dataExplorerVirtualTable */].updateTable();
    }
}

const dataExplorerTemplate = new DataExplorerTemplate();
/* harmony export (immutable) */ __webpack_exports__["a"] = dataExplorerTemplate;



/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const filterTemplate1 =
    {
        title: 'Awesome Template 1',
        rows: [
            {
                name: 'row 1',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Revenue'
                    }
                ],
                in_chart: true
            },
            {
                name: 'row 2',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Cost of sales'
                    },
                    {
                        dimension: 'time',
                        value: '2015 GT'
                    }
                ],
                in_chart: true
            },
            {
                name: 'blank row',
                type: 'blank'
            },
            {
                name: 'row 3',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015'
                    },
                    {
                        dimension: 'attribute',
                        value: 'Cost of sales'
                    }
                ],
                in_chart: true
            },
            {
                name: 'row 4',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Gross Profit'
                    }
                ],
                in_chart: true
            },
            {
                name: 'New Margin example',
                type: 'margin',
                year1: 'Cost of sales',
                year2: 'Revenue',
                in_chart: true
            },
            {
                name: 'New Formula example',
                type: 'formula',
                formula: 'AVERAGE(25,36)',
                in_chart: true
            },
            {
                name: 'New Formula example 2',
                type: 'formula',
                formula: 'MAX(R1,R2)',
            }
        ],
        columns: [
            {
                name: 'col 1',
                filters: [
                    {
                        dimension: 'time',
                        value: '2003 GT'
                    }
                ],
                in_chart: true
            },
            {
                name: 'col 2',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015 GT'
                    },
                    {
                        dimension: 'quality',
                        value: 'Reported'
                    }
                ],
                in_chart: true
            },
            {
                name: 'blank col',
                type: 'blank',
            },
            {
                name: 'YoY example',
                type: 'yoy',
                year1: '2015 GT',
                year2: '2016 GT',
            },
            {
                name: 'CAGR example',
                type: 'cagr',
                year1: '2015 GT',
                year2: '2016 GT',
                in_chart: true
            },
            {
                name: 'Delta example',
                type: 'delta',
                year1: '2015 GT',
                year2: '2016 GT'
            },
            {
                name: 'Custom formula example',
                type: 'formula',
                formula: 'SUM(C2,C5)',
                in_chart: true
            }
        ],
        globals_headline: [
            {
                name: 'g1',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Actual'
                    }
                ]
            },
            {
                name: 'g2',
                filters: [
                    {
                        dimension: 'time',
                        value: '2016 GT'
                    }
                ]
            }
        ],
        globals_a1: [
            {
                name: 'g3',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015 GT'
                    }
                ]
            },
            {
                name: 'g4',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Budget'
                    }
                ]

            }
        ],
        globals_hidden: [
            {
                name: 'g5',
                filters: [
                    {
                        dimension: 'unit',
                        value: 'EUR'
                    }
                ]
            }
        ],
        chart_options: [
            {
                _chartStackingMode: 'percent',
                _chartMode: 'line'
            }
        ]
    }
;
/* harmony export (immutable) */ __webpack_exports__["a"] = filterTemplate1;


/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const filterTemplate2 =
    {
        title: 'Awesome Template 2',
        rows: [
            {
                name: 'row 1',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'ebitda GT'
                    }
                ],
                in_chart: true
            },

            {
                name: 'row 2',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Cost of sales'
                    },
                    {
                        dimension: 'time',
                        value: '2016 GT'
                    }
                ]
            },

            {
                name: 'row 3',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015'
                    },
                    {
                        dimension: 'attribute',
                        value: 'Cost of sales'
                    }
                ]
            },

            {
                name: 'row 4',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Gross Profit'
                    }
                ]
            }
        ],
        columns: [
            {
                name: 'col 1',
                filters: [
                    {
                        dimension: 'time',
                        value: '2003 GT'
                    }
                ],
                in_chart: true
            },
            {
                name: 'col 2',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015 GT'
                    },
                    {
                        dimension: 'quality',
                        value: 'Reported'
                    }
                ]
            }
        ],
        globals_headline: [
            {
                name: 'g1',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Actual'
                    }
                ]
            },
            {
                name: 'g2',
                filters: [
                    {
                        dimension: 'time',
                        value: '2016 GT'
                    }
                ]
            }
        ],
        globals_a1: [
            {
                name: 'g3',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015'
                    }
                ]
            },
            {
                name: 'g4',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Budget'
                    }
                ]

            }
        ],
        globals_hidden: [
            {
                name: 'g5',
                filters: [
                    {
                        dimension: 'unit',
                        value: 'EUR'
                    }
                ]
            }
        ],
        chart_options: [
            {
                _chartStackingMode: 'stacked',
                _chartMode: 'area'
            }
        ]
    };
/* harmony export (immutable) */ __webpack_exports__["a"] = filterTemplate2;


/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const filterTemplate3 =
    {
        title: 'Awesome Template 3',
        rows: [
            {
                name: 'row 1',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Revenue'
                    }
                ]
            },

            {
                name: 'row 2',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Cost of sales'
                    },
                    {
                        dimension: 'time',
                        value: '2015 GT'
                    }
                ]
            },

            {
                name: 'row 3',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015'
                    },
                    {
                        dimension: 'attribute',
                        value: 'Cost of sales'
                    }
                ]
            },

            {
                name: 'row 4',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Gross Profit'
                    }
                ]
            }
        ],
        columns: [
            {
                name: 'col 1',
                filters: [
                    {
                        dimension: 'time',
                        value: '2003 GT'
                    }
                ]
            },
            {
                name: 'col 2',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015 GT'
                    },
                    {
                        dimension: 'quality',
                        value: 'Reported'
                    }
                ]
            }
        ],
        globals_headline: [
            {
                name: 'g1',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Actual'
                    }
                ]
            },
            {
                name: 'g2',
                filters: [
                    {
                        dimension: 'time',
                        value: '2016'
                    }
                ]
            }
        ],
        globals_a1: [
            {
                name: 'g3',
                filters: [
                    {
                        dimension: 'time',
                        value: '2015'
                    }
                ]
            },
            {
                name: 'g4',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Budget'
                    }
                ]

            }
        ],
        globals_hidden: [
            {
                name: 'g5',
                filters: [
                    {
                        dimension: 'unit',
                        value: 'EUR'
                    }
                ]
            }
        ],
        chart_options: [
            {
                _chartStackingMode: 'normal',
                _chartMode: 'pie'
            }
        ]
    };
/* harmony export (immutable) */ __webpack_exports__["a"] = filterTemplate3;


/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const filterTemplate4 =
    {
        title: 'Awesome Template 2',
        rows: [
            {
                name: 'row 1',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Revenue'
                    },
                ]
            },
            {
                name: 'row 2',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Cost of Sales'
                    }
                ]
            },
            {
                name: 'row 3',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Gross Profit'
                    },
                ],
                in_chart: true
            },
            {
                name: 'row 4',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Other Income'
                    }
                ]
            },
            {
                name: 'row 5',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Selling and Distribution Expenses'
                    }
                ]
            },
            {
                name: 'row 6',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Administrative Expenses'
                    }
                ]
            },
            {
                name: 'row 7',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'R&D Expenses'
                    }
                ]
            },
            {
                name: 'row 8',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Other Expenses'
                    }
                ]
            },
            {
                name: 'row 9',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'EBITDA'
                    }
                ],
                in_chart: true
            },
            {
                name: 'row 10',
                filters: [
                    {
                        dimension: 'attribute',
                        value: 'Margin'
                    }
                ],
                in_chart: true
            },
            {
                name: 'YoY example',
                type: 'yoy',
                year1: '2016 GT',
                year2: '2017 GT',
            },
            {
                name: 'YoY example',
                type: 'yoy',
                year1: '2017 GT',
                year2: '2018 GT',
            }
        ],
        columns: [
            {
                name: 'col 1',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Actual'
                    },
                    {
                        dimension: 'time',
                        value: '2016 GT'
                    }
                ],
                in_chart: true
            },
            {
                name: 'col 2',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Actual'
                    },
                    {
                        dimension: 'time',
                        value: '2017 GT'
                    }
                ],
                in_chart: true
            },
            {
                name: 'col 3',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Actual'
                    },
                    {
                        dimension: 'time',
                        value: '2017 GT'
                    }
                ],
                in_chart: true
            },
            {
                name: 'YoY example',
                type: 'yoy',
                year1: '2016 GT',
                year2: '2017 GT',
            },
            {
                name: 'YoY example',
                type: 'yoy',
                year1: '2017 GT',
                year2: '2018 GT',
            }
        ],
        globals_headline: [
            {
                name: 'g1',
                filters: [
                    {
                        dimension: 'layer',
                        value: 'Historical Profit'
                    }
                ]
            },
            {
                name: 'g2',
                filters: [
                    {
                        dimension: 'time',
                        value: 'Loss'
                    }
                ]
            }
        ],
        globals_a1: [
            {
                name: 'g3',
                filters: [
                    {
                        dimension: 'unit',
                        value: 'EUR'
                    }
                ]
            },
            {
                name: 'g4',
                filters: [
                    {
                        dimension: 'scale',
                        value: 'Million'
                    }
                ]

            }
        ],
        globals_hidden: [
        ],
        chart_options: [
            {
                _chartStackingMode: 'stacked',
                _chartMode: 'area'
            }
        ]
    };
/* harmony export (immutable) */ __webpack_exports__["a"] = filterTemplate4;


/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const filterTemplate5 =
    {
        title: 'Reset (empty) Template',
        rows: [],
        columns: [],
        globals_headline: [],
        globals_a1: [],
        globals_hidden: [],
        chart_options: [
            {
                _chartStackingMode: 'stacked',
                _chartMode: 'area'
            }
        ]
    };
/* harmony export (immutable) */ __webpack_exports__["a"] = filterTemplate5;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(143),
    arrayEach = __webpack_require__(149),
    assignValue = __webpack_require__(48),
    baseAssign = __webpack_require__(151),
    baseAssignIn = __webpack_require__(160),
    cloneBuffer = __webpack_require__(163),
    copyArray = __webpack_require__(164),
    copySymbols = __webpack_require__(165),
    copySymbolsIn = __webpack_require__(167),
    getAllKeys = __webpack_require__(168),
    getAllKeysIn = __webpack_require__(169),
    getTag = __webpack_require__(54),
    initCloneArray = __webpack_require__(174),
    initCloneByTag = __webpack_require__(175),
    initCloneObject = __webpack_require__(181),
    isArray = __webpack_require__(12),
    isBuffer = __webpack_require__(81),
    isMap = __webpack_require__(183),
    isObject = __webpack_require__(15),
    isSet = __webpack_require__(185),
    keys = __webpack_require__(40);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });

    return result;
  }

  if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });

    return result;
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(30),
    stackClear = __webpack_require__(144),
    stackDelete = __webpack_require__(145),
    stackGet = __webpack_require__(146),
    stackHas = __webpack_require__(147),
    stackSet = __webpack_require__(148);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(30);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),
/* 145 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),
/* 146 */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),
/* 147 */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(30),
    Map = __webpack_require__(42),
    MapCache = __webpack_require__(67);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),
/* 149 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(14);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(39),
    keys = __webpack_require__(40);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),
/* 152 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(154),
    isObjectLike = __webpack_require__(13);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(18),
    isObjectLike = __webpack_require__(13);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),
/* 155 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(157),
    baseUnary = __webpack_require__(49),
    nodeUtil = __webpack_require__(50);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(18),
    isLength = __webpack_require__(83),
    isObjectLike = __webpack_require__(13);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(51),
    nativeKeys = __webpack_require__(159);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(84);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(39),
    keysIn = __webpack_require__(85);

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15),
    isPrototype = __webpack_require__(51),
    nativeKeysIn = __webpack_require__(162);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),
/* 162 */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(7);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)(module)))

/***/ }),
/* 164 */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(39),
    getSymbols = __webpack_require__(53);

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),
/* 166 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(39),
    getSymbolsIn = __webpack_require__(87);

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(90),
    getSymbols = __webpack_require__(53),
    keys = __webpack_require__(40);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(90),
    getSymbolsIn = __webpack_require__(87),
    keysIn = __webpack_require__(85);

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(14),
    root = __webpack_require__(7);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(14),
    root = __webpack_require__(7);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(14),
    root = __webpack_require__(7);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(14),
    root = __webpack_require__(7);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),
/* 174 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(55),
    cloneDataView = __webpack_require__(177),
    cloneRegExp = __webpack_require__(178),
    cloneSymbol = __webpack_require__(179),
    cloneTypedArray = __webpack_require__(180);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(7);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(55);

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),
/* 178 */
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(28);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(55);

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(182),
    getPrototype = __webpack_require__(89),
    isPrototype = __webpack_require__(51);

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMap = __webpack_require__(184),
    baseUnary = __webpack_require__(49),
    nodeUtil = __webpack_require__(50);

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(54),
    isObjectLike = __webpack_require__(13);

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsSet = __webpack_require__(186),
    baseUnary = __webpack_require__(49),
    nodeUtil = __webpack_require__(50);

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(54),
    isObjectLike = __webpack_require__(13);

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__entities_Dimension__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_source_data_structures_SourceDataStructureValidator__ = __webpack_require__(57);





class SourceDataStructureSets {
    constructor(container, saveHandler) {
        this.container = container;
        /** @type {Function} */
        this.saveHandler = saveHandler;
        /** @type {Project} */
        this.project = null;
        this.validFilterSelect = this.container.find('._filterByState select');
        this.autoReconcileButton = this.container.find('._auto-reconcile');
        this.setsTable = this.container.find('._setsTable');
        this.modal = this.container.find('.modal');
        this.sourceDataStructureValidator = new __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_source_data_structures_SourceDataStructureValidator__["a" /* SourceDataStructureValidator */]();
        this.dataset = null;
        this.validFilter = 'invalid';
        /** @type {Dimension} */
        this.dimension = null;
        this.inUpdatedLayout = false;
        if (!localStorage.getItem('blobExcelData'))
            this.flexgrid = new wijmo.grid.FlexGrid(this.setsTable, {
                isReadOnly: true,
                allowSorting: false,
                selectionMode: 'None',
                itemsSource: [],
                autoGenerateColumns: false,
                childItemsPath: 'children',
                formatItem: (s, e) => {
                    // Row headers
                    if (e.panel.cellType === wijmo.grid.CellType.RowHeader) {
                        const item = s.rows[e.row].dataItem;
                        if (item.children && !item.valid) {
                            // Create checkbox.
                            e.cell.innerHTML = '<input type="checkbox">';
                            const checkbox = e.cell.firstChild;
                            checkbox.checked = item.selected ? true : false;

                            // On click, update selection for this row and all children as well.
                            checkbox.addEventListener('change', () => {
                                this.flexgrid.beginUpdate();
                                item.selected = checkbox.checked;
                                item.children.forEach(child => {
                                    child.selected = checkbox.checked;
                                });
                                this.flexgrid.endUpdate();
                                this.updateAutoReconcileButton();
                            });
                        } else {
                            e.cell.innerHTML = '';
                        }
                    }

                    // Top-left cell
                    if (e.panel.cellType === wijmo.grid.CellType.TopLeft) {
                        // Count selected items.
                        let selected = 0,
                            total = 0;
                        this.flexgrid.rows.forEach(row => {
                            const item = row.dataItem;
                            if (!item.children || item.valid) {
                                return;
                            }
                            if (item.selected) {
                                selected++;
                            }
                            total++;
                        });

                        // Create checkbox.
                        e.cell.innerHTML = '<input type="checkbox">';
                        const checkbox = e.cell.firstChild;
                        checkbox.checked = selected > 0 && selected === total;
                        checkbox.indeterminate = selected > 0 && selected !== total;

                        // On click, update selection for all rows.
                        checkbox.addEventListener('change', () => {
                            this.flexgrid.beginUpdate();
                            this.flexgrid.rows.forEach(row => {
                                const item = row.dataItem;
                                if (!item.children || item.valid) {
                                    return;
                                }
                                item.selected = checkbox.checked;
                                item.children.forEach(child => {
                                    child.selected = checkbox.checked;
                                });
                            });
                            this.flexgrid.endUpdate();
                            this.updateAutoReconcileButton();
                        });
                    }

                    // Regular cells
                    if (e.panel === s.cells) {
                        const sourceFiles = this.project.sourceFiles;
                        const item = s.rows[e.row].dataItem;
                        const binding = s.columns[e.col].binding;

                        // Update "source" column.
                        switch (binding) {
                            case 'source':
                                // Get name.
                                if (item.source === 'manual') {
                                    e.cell.innerHTML = 'Manual';
                                } else if (item.source in sourceFiles) {
                                    e.cell.innerHTML = sourceFiles[item.source].name;
                                }
                                break;

                            case 'value':
                                if (!item.children && !item.isDelta) {
                                    e.cell.innerHTML = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item.value);
                                }
                                break;

                            case '__normalized_value':
                                if (!item.children) {
                                    e.cell.innerHTML = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].formatNumber(item['__normalized_value']);
                                }
                                break;

                            case 'scale':
                                if (item.scale) {
                                    e.cell.innerHTML = item.scale;
                                }
                                break;
                        }

                        // Make parents bold.
                        if (item.children) {
                            e.cell.style.fontWeight = 'bold';
                        } else {
                            e.cell.style.fontWeight = '';
                        }

                        if (item.isDelta) {
                            if (__WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].isDeltaZero(item['__normalized_value'])) {
                                e.cell.style.color = 'green';
                            } else {
                                e.cell.style.color = 'red';
                            }
                        } else {
                            // Apply selection.
                            e.cell.style.color = item.selected ? 'white' : '';
                        }

                        // Parent or last in set?
                        if (
                            (binding === '__normalized_value' || binding === this.dimension.slug) &&
                            (item._isLastParent || item._isLast)
                        ) {
                            e.cell.style.borderBottom = '2px solid #aaa';
                        } else {
                            e.cell.style.borderBottom = '';
                        }

                        // Apply selection.
                        e.cell.style.background = item.selected ? '#80adbf' : '';
                    }
                },
                updatedLayout: () => {
                    if (this.inUpdatedLayout) {
                        this.inUpdatedLayout = false;
                    } else {
                        this.inUpdatedLayout = true;
                        this.flexgrid.autoSizeRow(0, true);
                    }
                }
            });

        // Filter
        this.validFilterSelect.on('change', () => {
            this.validFilter = this.validFilterSelect.val();
            this.flexgrid.collectionView.refresh();
        });

        // Show auto-reconcile modal.
        this.autoReconcileButton.on('click', () => {
            // Populate values.
            const list = this.container.find('._list-of-inputs');
            list.html('');
            list.append(
                '<div><label><input type="radio" value="' +
                    this.dataset.value +
                    '" name="attribute"> ' +
                    this.dataset.value +
                    ' (parent)</label></div>'
            );
            this.dataset.childValues.forEach(child => {
                list.append(
                    '<div><label><input type="radio" value="' +
                        child +
                        '" name="attribute"> ' +
                        child +
                        '</label></div>'
                );
            });

            this.modal.modal('show');
        });

        // Apply auto-reconciliation.
        this.modal.find('._apply').on('click', () => {
            const dfar = this.project.getDimensionForAutoReconciliations();

            // Get selected options.
            let value = this.modal.find('input[name=attribute]:checked').attr('value');
            if (value === '_new') {
                value = this.modal.find('input[name=new_attribute]').val();

                if (value) {
                    this.project.addDataStructure(
                        this.dimension.slug,
                        value,
                        this.dataset.value,
                        this.dataset.group,
                        ''
                    );
                    this.dataset.childValues.push(value);
                }
            }
            if (!value) {
                return;
            }

            // Take each selected group.
            this.flexgrid.rows.forEach(row => {
                const group = row.dataItem;

                if (group.valid || !group.selected) {
                    return;
                }

                // Get delta.
                let delta = 0;
                if (value === this.dataset.value) {
                    delta = -group.delta;
                } else {
                    delta = group.delta;
                }

                // Get data-point that needs to be adjusted.
                let dataPoint = Object.assign({}, group.dimensions);
                dataPoint[dfar.dimension] = dfar.value;
                dataPoint.source = 'manual';
                dataPoint[this.dimension.slug] = value;
                let matchingDataPoint = this.project.getMatchingDataPoint(dataPoint);
                if (matchingDataPoint) {
                    dataPoint = Object.assign({}, matchingDataPoint);
                } else {
                    dataPoint.value = 0;
                    dataPoint.scale = 1;
                }
                dataPoint.value += delta / dataPoint.scale;

                // Persist changes.
                this.project.addDataPoint(dataPoint);
            });

            // Force update of sets.
            delete this.dataset.groups;
            this.saveHandler();

            // Close modal.
            this.modal.modal('hide');
        });
    }

    setProject(project) {
        this.project = project;
        this.sourceDataStructureValidator.setProject(project);
    }

    sync() {
        this.setData(this.dataset);
    }

    setData(dataset) {
        dataset = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"])(dataset);
        this.dataset = dataset;
        if (!dataset) {
            return;
        }
        this.dimension = dataset.dimension;

        if (!dataset.groups) {
            const result = this.sourceDataStructureValidator.validateParentAndChildren(
                this.dimension.slug,
                dataset.value,
                dataset.childValues
            );
            Object.assign(dataset, result);
        }

        const items = [];
        dataset.groups.forEach(row => {
            const children = [];

            // Add child data-points.
            for (const i in row.dataPoints) {
                const dataPoint = row.dataPoints[i];
                dataPoint['__normalized_value'] =
                    dataPoint.value * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseScale(dataPoint.scale) * __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].parseInverse(dataPoint.inverse);
                children.push(dataPoint);
            }

            // Add child for delta value.
            const child = {};
            child['__normalized_value'] = row.delta;
            child[this.dimension.slug] = 'Delta';
            child.isDelta = true;
            children.push(child);

            // Add parent.
            const item = Object.assign({}, row, {
                attribute: 'Set #' + (items.length + 1),
                valid: row.valid,
                children: children
            });

            items.push(item);
        });
        this.flexgrid.itemsSource = items;

        // Get columns.
        let dimensions = this.project.getDimensions();
        {
            dimensions.push(
                new __WEBPACK_IMPORTED_MODULE_2__entities_Dimension__["a" /* Dimension */]({
                    slug: 'source',
                    label: 'Source'
                })
            );

            dimensions.unshift(
                new __WEBPACK_IMPORTED_MODULE_2__entities_Dimension__["a" /* Dimension */]({
                    slug: '__normalized_value',
                    label: 'Normalized Value',
                    dataType: wijmo.DataType.Number
                })
            );

            // Always put the selected dimension on the 1st column.
            let selectedDimension;
            for (let i = 0; i < dimensions.length; i++) {
                if (dimensions[i].slug === this.dimension.slug) {
                    selectedDimension = dimensions[i];
                    dimensions.splice(i, 1);
                    break;
                }
            }
            dimensions.splice(0, 0, selectedDimension);
        }

        // Add columns in flexgrid.
        this.flexgrid.columns.length = 0;
        dimensions.forEach(dimension => {
            const col = new wijmo.grid.Column();
            col.binding = dimension.slug;
            col.header = dimension.label;
            if (dimension.dataType) {
                col.dataType = dimension.dataType;
            }
            this.flexgrid.columns.push(col);
        });

        // Filter
        this.flexgrid.collectionView.filter = item => {
            if (this.validFilter === 'valid') {
                return item.valid;
            }

            if (this.validFilter === 'invalid') {
                return !item.valid;
            }

            return true;
        };
        if (!dataset.invalid && this.validFilter === 'invalid') {
            this.validFilterSelect.val('all').trigger('change');
        }
        this.updateAutoReconcileButton();
    }

    updateAutoReconcileButton() {
        const selected = this.flexgrid.rows.reduce((selected, row) => {
            if (row.dataItem.selected) {
                selected++;
            }

            return selected;
        }, 0);

        this.autoReconcileButton.attr('disabled', selected === 0);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SourceDataStructureSets;



/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(189),
    isArrayLike = __webpack_require__(52),
    isString = __webpack_require__(193),
    toInteger = __webpack_require__(194),
    values = __webpack_require__(197);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__(190),
    baseIsNaN = __webpack_require__(191),
    strictIndexOf = __webpack_require__(192);

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;


/***/ }),
/* 190 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;


/***/ }),
/* 191 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;


/***/ }),
/* 192 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(18),
    isArray = __webpack_require__(12),
    isObjectLike = __webpack_require__(13);

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var toFinite = __webpack_require__(195);

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var toNumber = __webpack_require__(196);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15),
    isSymbol = __webpack_require__(27);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var baseValues = __webpack_require__(198),
    keys = __webpack_require__(40);

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(71);

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var baseSet = __webpack_require__(200);

/**
 * This method is like `_.set` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.setWith(object, '[0][1]', 'a', Object);
 * // => { '0': { '1': 'a' } }
 */
function setWith(object, path, value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return object == null ? object : baseSet(object, path, value, customizer);
}

module.exports = setWith;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(48),
    castPath = __webpack_require__(65),
    isIndex = __webpack_require__(82),
    isObject = __webpack_require__(15),
    toKey = __webpack_require__(72);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__FileWorkflowItemFormatter__ = __webpack_require__(202);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__SourceDataEditTableCell__ = __webpack_require__(22);





class FileWorkflow {
    constructor() {
        this.MODE_MODAL = 0;
        this.MODE_BRUSH = 1;
        this.MODE_STRUCTURE = 2;
        this.MODE_RANGE_PICKER = 3;
        this.MODE_CLICK_TO_COPY = 4;

        // Current operating mode.
        this.mode = this.MODE_MODAL;

        // Is the user making a selection using the mouse?
        this.isSelectingWithMouse = false;

        // Function to call after brush mode has ended.
        this.callback = null;

        // Disable any further selection events on the flex-grid.
        this.disableSelection = false;

        // List of cells selected while in Structure mode.
        this.selectedStructureCells = [];

        // Saves the previous cell selection when the modal mode is active.
        this.previousModalSelection = null;

        // Ignore selection-changing events, e.g. if we're programatically changing the selection.
        this.ignoreSelectionChangingEvents = false;

        // Catch mouse-up events even if they are outside the flexgrid.
        $(document).on('mouseup', () => {
            this.onMouseUp();
        });

        // Item formatter.
        this.itemFormatter = new __WEBPACK_IMPORTED_MODULE_2__FileWorkflowItemFormatter__["a" /* FileWorkflowItemFormatter */]();
    }

    enableModal() {
        this.reset();
        this.mode = this.MODE_MODAL;
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selectionMode = wijmo.grid.SelectionMode.CellRange;
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
    }

    enableBrush(callback) {
        this.reset();
        this.mode = this.MODE_BRUSH;
        this.callback = callback;
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selectionMode = wijmo.grid.SelectionMode.CellRange;
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
    }

    enableStructure() {
        this.reset();
        this.mode = this.MODE_STRUCTURE;
        this.selectedStructureCells = [];
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selectionMode = wijmo.grid.SelectionMode.Cell;
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection = new wijmo.grid.CellRange(-1, -1, -1, -1);
    }

    enableRangePickerMode(callback) {
        // If multiple cells are selected, label range cannot be edited.
        if (__WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isSingleCell === false) {
            return;
        }

        // Reset.
        this.reset();

        // Save previous selection, will be used when we re-active modal mode.
        if (this.mode === this.MODE_MODAL) {
            this.previousModalSelection = __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;
        }

        $(__WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.hostElement).addClass('_copy-cursor');
        this.mode = this.MODE_RANGE_PICKER;
        this.callback = callback;
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
    }

    enableClickToCopyMode(callback) {
        // Reset.
        this.reset();

        // Save previous selection, will be used when we re-active modal mode.
        if (this.mode === this.MODE_MODAL) {
            this.previousModalSelection = __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection;
        }

        $(__WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.hostElement).addClass('_copy-cursor');
        this.mode = this.MODE_CLICK_TO_COPY;
        this.callback = callback;
        __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
    }

    reset() {
        this.disableSelection = false;
        $(__WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.hostElement).removeClass('_copy-cursor');
    }

    onTableSelectionChanging(s, e) {
        if (this.ignoreSelectionChangingEvents) {
            return;
        }

        // If user is still dragging the selection but we already cancelled it...
        if (this.disableSelection) {
            e.cancel = true;
            return;
        }

        switch (this.mode) {
            case this.MODE_MODAL:
                // If modal is open, try to close it.
                if ($('#tableCellModal').is(':visible')) {
                    $('#tableCellModal').modal('hide');

                    // Still visible? Then the user clicked "cancel", so we should cancel too.
                    if ($('#tableCellModal').is(':visible')) {
                        e.cancel = true;
                    }
                }

                break;

            case this.MODE_BRUSH:
                break;

            case this.MODE_RANGE_PICKER:
                if (s === undefined || e === undefined) {
                    break;
                }
                this.callback(this, e);
                break;

            case this.MODE_CLICK_TO_COPY:
                if (s === undefined || e === undefined) {
                    break;
                }
                this.callback(this, e);
                break;
        }
    }

    onTableSelectionChanged(s, e) {
        if (this.ignoreSelectionChangingEvents) {
            return;
        }

        if (e.cancel || !e.range.isValid) {
            return;
        }

        // Do not call this event when first opening the table. Flexgrid automatically calls this for the [0, 0] cell.
        if (!this.firstCellAutomaticSelectionFinished) {
            this.firstCellAutomaticSelectionFinished = true;

            return;
        }

        switch (this.mode) {
            case this.MODE_MODAL:
                __WEBPACK_IMPORTED_MODULE_3__SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].onTableSelectionChanged(s, e);
                break;

            case this.MODE_BRUSH:
                break;

            case this.MODE_STRUCTURE:
                const cellProperties = __WEBPACK_IMPORTED_MODULE_0__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().getSingleCellProperties(e.row, e.col);

                // Only consider data-cells.
                if (cellProperties.cellType !== 'data') {
                    break;
                }

                // Save new cell.
                this.selectedStructureCells.push({
                    row: e.row,
                    col: e.col
                });

                // Format table.
                __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
                break;
            case this.MODE_RANGE_PICKER:
                break;
            case this.MODE_CLICK_TO_COPY:
                break;
        }
    }

    onMouseDown() {
        if (this.disableSelection) {
            return;
        }
        this.isSelectingWithMouse = true;
    }

    onMouseUp() {
        if (!this.isSelectingWithMouse || !__WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection.isValid) {
            return;
        }

        this.isSelectingWithMouse = false;
        this.disableSelection = false;

        switch (this.mode) {
            case this.MODE_MODAL:
                break;

            case this.MODE_BRUSH:
                this.callback(__WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection);
                __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection = new wijmo.grid.CellRange(-1, -1, -1, -1);
                break;

            case this.MODE_RANGE_PICKER:
                if (this.previousModalSelection !== null) {
                    this.ignoreSelectionChangingEvents = true;
                    __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection = this.previousModalSelection;
                    this.ignoreSelectionChangingEvents = false;
                    this.previousModalSelection = null;
                }

                this.disableSelection = true;
                this.enableModal();
                break;

            case this.MODE_CLICK_TO_COPY:
                if (this.previousModalSelection !== null) {
                    this.ignoreSelectionChangingEvents = true;
                    __WEBPACK_IMPORTED_MODULE_1__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.selection = this.previousModalSelection;
                    this.ignoreSelectionChangingEvents = false;
                    this.previousModalSelection = null;
                }

                this.disableSelection = true;
                this.enableModal();
                break;
        }
    }

    formatTableCell(s, e) {
        if ($(e.cell).hasClass('wj-header')) {
            return;
        }

        $(e.cell).removeClass('_structure-mode-parent');
        $(e.cell).removeClass('_structure-mode-child');

        switch (this.mode) {
            case this.MODE_STRUCTURE:
                this.selectedStructureCells.forEach((position, index) => {
                    if (e.col === position.col && e.row === position.row) {
                        if (index === 0) {
                            $(e.cell).addClass('_structure-mode-parent');
                        } else {
                            $(e.cell).addClass('_structure-mode-child');
                        }
                    }
                });
                break;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflow;



/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Constants__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AddFileSteps__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__SourceDataFilesSidebar__ = __webpack_require__(4);






class FileWorkflowItemFormatter {
    constructor() {
        // Used for cell warnings.
        this.cellWarnings = [];
        this.nextCellWarning = 0;

        // Used for cell triangles.
        this.style = null;
        this.previousFormDimensionsLength = null;
    }

    updatingView() {
        // Table is refreshing, so all of our cell-warning-elements have been detached.
        this.nextCellWarning = 0;

        // We need a source file.
        const sourceFile = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        if (!sourceFile) {
            return;
        }

        // Create style element.
        if (!this.style) {
            this.style = $('<style>');
            $('html > head').append(this.style);
        }

        // Recreate CSS rules, if necessary.
        if (this.previousFormDimensionsLength !== sourceFile.formDimensions.length) {
            this.previousFormDimensionsLength = sourceFile.formDimensions.length;
            let styleHtml = '';

            for (let i = 0; i <= sourceFile.formDimensions.length; i++) {
                const ratio = i / sourceFile.formDimensions.length;
                const color = chroma
                    .mix(
                        __WEBPACK_IMPORTED_MODULE_1__Constants__["a" /* constants */].FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN,
                        __WEBPACK_IMPORTED_MODULE_1__Constants__["a" /* constants */].FILE_WORKFLOW_CELL_PROGRESS_COLOR_END,
                        ratio,
                        'lab'
                    )
                    .hex();
                const background =
                    "url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='15' height='15'><polygon points='0,0 15,0 0,15' style='fill:" +
                    color +
                    '\'></polygon></svg>")';

                styleHtml +=
                    '.wj-cell[data-type="data"][data-ratio="' +
                    Math.round(ratio * 100) +
                    '"] { background-image: ' +
                    background +
                    ' !important; background-repeat: no-repeat !important; background-position: 0 0 !important; }\n';
            }

            // Save rules.
            this.style.html(styleHtml);
        }
    }

    formatItem(s, e) {
        const cellElement = $(e.cell);

        if (cellElement.hasClass('wj-header')) {
            return;
        }

        // Reset everything, because cells are reused.
        const css = {
            background: '',
            'background-color': '',
            color: ''
        };

        const col = e._rng._col;
        const row = e._rng._row;
        const sourceFile = __WEBPACK_IMPORTED_MODULE_2__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const cell = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(sourceFile, `cellProperties[${col}][${row}]`);

        // No cell properties? Just reset everything and return early.
        if (!cell) {
            cellElement.attr('data-type', '');
            cellElement.css(css);
            return;
        }

        if (cell.cellType === 'data') {
            // Add inverse operator
            if (cell.inverse === 'Yes') {
                // Check if cell value is percentage or other format which should be ignored.
                let cellValString = cell.value.toString();
                const isPercentage = this.isPercentage(cellValString);
                cellValString = this.removePercentage(cellValString, isPercentage);

                if (!isNaN(cellValString)) {
                    cellValString = cellValString * -1;
                }

                cellValString = this.applyPercentage(cellValString, isPercentage);

                cellElement.text(cellValString);
            }

            // Add 2 decimals to numbers.
            if (cell.value !== '' && cell.value !== null) {
                // Check if cell value is percentage or other format which should be ignored.
                let cellValue = cellElement.text();
                const isPercentage = this.isPercentage(cellValue);
                cellValue = this.removePercentage(cellValue, isPercentage);

                if (!isNaN(parseFloat(cellValue.replace(/,/g, '')))) {
                    cellValue = parseFloat(cellValue.replace(/,/g, ''));
                    cellValue = this.addZeroes(cellValue);
                }

                cellValue = this.applyPercentage(cellValue, isPercentage);
                cellElement.text(cellValue);
            }

            // Set ratio.
            const ratio = sourceFile.getCellCompletionPercentage(row, col);
            cellElement.attr('data-ratio', Math.round(ratio * 100));

            if (cell.appliedLabelWarning) {
                const cellWarning = this.getNextCellWarning();
                cellElement.append(cellWarning);
            }

            if (cell.failedSaving === true) {
                css['background-color'] = '#ff5c52';
            }
        } else if (cell.cellType === 'label') {
            const dimension = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(cell, `labelDimension[0]`);
            if (dimension) {
                // Get color for dimension.
                let colorIndex = 0;
                for (let i = 0; i < __WEBPACK_IMPORTED_MODULE_4__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs.length; i++) {
                    if (__WEBPACK_IMPORTED_MODULE_4__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs[i].label === dimension) {
                        colorIndex = i;
                        break;
                    }
                }

                // Apply color.
                const backgroundColor = __WEBPACK_IMPORTED_MODULE_3__AddFileSteps__["a" /* addFileSteps */].labelBrushesColors[colorIndex];
                css['background-color'] = backgroundColor;
                css['color'] = __WEBPACK_IMPORTED_MODULE_1__Constants__["a" /* constants */].getTextColorForBackground(backgroundColor);
            } else {
                css['background-color'] = '#a9e2ff';
            }
        }

        // Apply CSS in bulk.
        cellElement.css(css);

        // Save cell-type as attribute, used by CSS selectors.
        cellElement.attr('data-type', cell.cellType);
    }

    addZeroes(num) {
        num = num.toString();
        let value = Number(num);

        if (isNaN(value)) {
            return;
        }

        let res = num.split('.');
        if (res.length === 1 || res[1].length < 3) {
            value = value.toFixed(2);
        }
        return value;
    }

    isPercentage(cellValString) {
        let isPercentage = false;

        if (cellValString.indexOf('%') > -1) {
            isPercentage = true;
        }
        return isPercentage;
    }

    removePercentage(cellValString, isPercentage) {
        if (isPercentage) {
            cellValString = cellValString.replace('%', '');
        }
        return cellValString;
    }

    applyPercentage(cellValString, isPercentage) {
        if (isPercentage) {
            cellValString = cellValString + '%';
        }

        return cellValString;
    }

    getNextCellWarning() {
        if (this.cellWarnings.length > this.nextCellWarning) {
            // Reuse existing.
            return this.cellWarnings[this.nextCellWarning++];
        } else {
            // Create new element.
            const element = $(
                '<div class="_applied-label-warning"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i></div>'
            );
            this.cellWarnings.push(element);
            this.nextCellWarning++;
            return element;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflowItemFormatter;



/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_add_file_workflow_SourceDataEditTableCell__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__FileWorkflowAutoDetectTable__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SourceDataFilesSidebar__ = __webpack_require__(4);








class FileWorkflowStep1 {
    /**
     * @param rootElement
     * @param fileWorkflow {FileWorkflow}
     */
    constructor(rootElement, fileWorkflow) {
        this.rootElement = rootElement;
        this.fileWorkflow = fileWorkflow;

        // DOM
        this.brushSection = this.rootElement.find('.brush-section');
        this.dataPointBrush = this.brushSection.find('._data-point');
        this.freezeCol = this.brushSection.find('._freeze-col');
        this.unfreezeCol = this.brushSection.find('._unfreeze-col');
        this.freezeRow = this.brushSection.find('._freeze-row');
        this.unfreezeRow = this.brushSection.find('._unfreeze-row');
        this.notUsedBrush = this.brushSection.find('._not-used');
        this.tableBrush = this.brushSection.find('._table');
        this.table = this.rootElement.find('#source_data_files_pre_ingestion > ._table');

        // Events
        this.dataPointBrush.on('click', () => {
            const isActive = this.dataPointBrush.hasClass('_active');
            this.resetBrushes();

            if (isActive) {
                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;
            } else {
                this.table.addClass('_brush-cursor');
                this.dataPointBrush.addClass('_active');
                this.fileWorkflow.enableBrush(this.onDataPointBrushEnd);
            }
        });
        this.notUsedBrush.on('click', () => {
            const isActive = this.notUsedBrush.hasClass('_active');
            this.resetBrushes();

            if (isActive) {
                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;
            } else {
                this.table.addClass('_brush-cursor');
                this.notUsedBrush.addClass('_active');
                this.fileWorkflow.enableBrush(this.onNotUsedBrushEnd);
            }
        });
        this.tableBrush.on('click', () => {
            const isActive = this.tableBrush.hasClass('_active');
            this.resetBrushes();

            if (isActive) {
                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;
            } else {
                this.table.addClass('_brush-cursor');
                this.tableBrush.addClass('_active');
                this.fileWorkflow.enableBrush(this.onTableBrushEnd);
            }
        });
        $(document.body).on('click', '._label-brush', event => {
            const brush = $(event.target);
            const isActive = brush.hasClass('_active');
            this.resetBrushes();

            if (isActive) {
                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;
            } else {
                this.table.addClass('_brush-cursor-for-labels');
                brush.addClass('_active');
                this.fileWorkflow.enableBrush(selection => {
                    $('._show-loading').css('display', 'block');

                    // Use setTimeout because otherwise loading animation does not appear.
                    setTimeout(() => {
                        this.onLabelBrushEnd(selection, brush.attr('data-dimension'));
                        $('._show-loading').css('display', 'none');
                    }, 50);
                });
            }
        });
        $(document.body).on('click', '._label-global', event => {
            const container = $(event.target).closest('._label-global');

            if (container.find('i').length === 0) {
                container.append('<i class="fa fa-check" aria-hidden="true"></i>');
                const globalRange = this.getGlobalRange();
                const dimension = container.siblings('._label-brush').data('dimension');
                this.setGlobalRangeToLabels(globalRange, dimension);
            } else {
                container.find('i').remove();
            }
        });
        this.freezeCol.on('click', () => {
            const isActive = this.freezeCol.hasClass('_active');
            this.resetBrushes();

            if (isActive) {
                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;
            } else {
                this.table.addClass('_brush-cursor');
                this.freezeCol.addClass('_active');
                this.fileWorkflow.enableBrush(this.onFreezeCol);
            }
        });
        this.freezeRow.on('click', () => {
            const isActive = this.freezeRow.hasClass('_active');
            this.resetBrushes();

            if (isActive) {
                this.fileWorkflow.mode = this.fileWorkflow.MODE_MODAL;
            } else {
                this.table.addClass('_brush-cursor');
                this.freezeRow.addClass('_active');
                this.fileWorkflow.enableBrush(this.onFreezeRow);
            }
        });
        this.unfreezeCol.on('click', () => {
            __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.frozenColumns = 0;
        });
        this.unfreezeRow.on('click', () => {
            __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.frozenRows = 0;
        });
    }

    sync() {}

    show() {
        this.brushSection.show();
        this.dataPointBrush.show();
        this.notUsedBrush.show();
        this.tableBrush.show();
        $('#source_data_files_sidebar ._ingestion-steps ._back').css('display', 'none');
        $('#source_data_files_pre_ingestion ._table').css('display', '');
        __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
    }

    hide() {
        this.brushSection.hide();
        this.dataPointBrush.hide();
        this.notUsedBrush.hide();
        this.tableBrush.hide();
        this.tableBrush.removeClass('_active');
        this.dataPointBrush.removeClass('_active');
        $('._label-brush').removeClass('_active');
        $('._label-brush-range').remove();
        $('#source_data_files_sidebar ._ingestion-steps ._back').css('display', '');
        this.resetBrushes();
        // Reset label brush ranges buttons.
        $('._label-brush-range').removeClass('_active');
        $('._label-brush-range').attr('data-active', false);
        __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].resetGridBorders();
        $('#source_data_files_pre_ingestion ._table').hide();
    }

    resetBrushes() {
        this.table.removeClass('_brush-cursor');
        this.table.removeClass('_brush-cursor-for-labels');
        $('.brush-section ._brush').removeClass('_active');
        $('.brush-section ._table').removeClass('_active');
    }

    onFreezeCol(selection) {
        if (selection.isSingleCell) {
            __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.frozenColumns = selection._col;
        }
    }

    onFreezeRow(selection) {
        if (selection.isSingleCell) {
            __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.frozenRows = selection._row;
        }
    }

    setGlobalRangeToLabels(globalRange, dimension) {
        const file = __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const table = __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource;

        for (let row = 0; row < table.length; row++) {
            for (let col = 0; col < table[row].length; col++) {
                const cellType = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(file.cellProperties, `[${col}][${row}]['cellType']`, false);
                if (cellType === 'label') {
                    const dimensions = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(file.cellProperties, `[${col}][${row}]['labelDimension']`, false);
                    if (dimensions[0] === dimension) {
                        file.cellProperties[col][row]['range'] = globalRange;
                    }
                }
            }
        }
    }

    getGlobalRange() {
        let globalRange;
        const file = __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const table = __WEBPACK_IMPORTED_MODULE_4__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.itemsSource;
        let leftCol = table[0].length;
        let leftRow = table.length;
        let rightCol = 0;
        let rightRow = 0;

        for (let row = 0; row < table.length; row++) {
            for (let col = 0; col < table[row].length; col++) {
                const cellType = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(file.cellProperties, `[${col}][${row}]['cellType']`, false);
                if (cellType === 'data') {
                    if (leftCol > col) {
                        leftCol = col;
                    }
                    if (leftRow > row) {
                        leftRow = row;
                    }

                    break;
                }
            }
        }

        for (let row = table.length - 1; row >= 0; row--) {
            for (let col = table[row].length - 1; col >= 0; col--) {
                const cellType = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(file.cellProperties, `[${col}][${row}]['cellType']`, false);
                if (cellType === 'data') {
                    if (rightCol < col) {
                        rightCol = col;
                    }
                    if (rightRow < row) {
                        rightRow = row;
                    }

                    break;
                }
            }
        }

        globalRange = XLSX.utils.encode_range({ r: leftRow, c: leftCol }, { r: rightRow, c: rightCol });

        return globalRange;
    }

    /**
     *
     * @param selection {wijmo.grid.CellRange}
     */
    onDataPointBrushEnd(selection) {
        const sourceFile = __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();

        for (let row = selection.topRow; row <= selection.bottomRow; row++) {
            for (let col = selection.leftCol; col <= selection.rightCol; col++) {
                const properties = sourceFile.getSingleCellProperties(row, col);

                // Skip empty cells.
                const val = sourceFile.getCellValue(row, col);
                if (val === '') {
                    continue;
                }

                properties.cellType = 'data';
                properties.value = val;
            }
        }

        __WEBPACK_IMPORTED_MODULE_6__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
    }

    /**
     *
     * @param selection {wijmo.grid.CellRange}
     */
    onNotUsedBrushEnd(selection) {
        for (let row = selection.topRow; row <= selection.bottomRow; row++) {
            for (let col = selection.leftCol; col <= selection.rightCol; col++) {
                const properties = __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile().getSingleCellProperties(row, col);

                properties.cellType = 'notUsed';
            }
        }

        __WEBPACK_IMPORTED_MODULE_6__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
    }

    /**
     *
     * @param selection {wijmo.grid.CellRange}
     */
    onTableBrushEnd(selection) {
        let detect = new __WEBPACK_IMPORTED_MODULE_5__FileWorkflowAutoDetectTable__["a" /* FileWorkflowAutoDetectTable */]();
        detect.autoDetectTable(selection);

        __WEBPACK_IMPORTED_MODULE_6__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
    }

    onLabelBrushEnd(selection, dimension) {
        const sourceFile = __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();

        for (let row = selection.topRow; row <= selection.bottomRow; row++) {
            for (let col = selection.leftCol; col <= selection.rightCol; col++) {
                const properties = sourceFile.getSingleCellProperties(row, col);

                // Skip cells that are not labels.
                if (properties.cellType !== 'label') {
                    continue;
                }

                // Skip empty cells.
                const val = sourceFile.getCellValue(row, col);
                if (!val) {
                    continue;
                }

                properties.labelDimension = [dimension];
                __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__["a" /* sourceFilesService */].applyDimensions(properties, __WEBPACK_IMPORTED_MODULE_6__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs);
                const range = __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(properties, `['range']`, false);
                if (range) {
                    this.updateAppliedLabelWarning(range, true);
                }
            }
        }

        __WEBPACK_IMPORTED_MODULE_6__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].displayLoadedFileSidebar();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].saveCurrentProject();
        __WEBPACK_IMPORTED_MODULE_2__services_StorageService__["a" /* storageService */].syncViews();
    }

    updateAppliedLabelWarning(range, onlyCheckCellsWithWarning = false) {
        const sourceFile = __WEBPACK_IMPORTED_MODULE_1__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const rangeObject = XLSX.utils.decode_range(range);

        // Apply new value to each cell in range.
        for (let row = rangeObject.s.r; row <= rangeObject.e.r; row++) {
            for (let col = rangeObject.s.c; col <= rangeObject.e.c; col++) {
                const properties = sourceFile.getSingleCellProperties(row, col);

                // Skip cells without a warning.
                if (onlyCheckCellsWithWarning && !properties.appliedLabelWarning) {
                    // continue;
                }

                properties.appliedLabelWarning = __WEBPACK_IMPORTED_MODULE_3__tabs_source_data_add_file_workflow_SourceDataEditTableCell__["a" /* sourceDataEditTableCell */].setAppliedLabelWarning(col, row, properties);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflowStep1;



/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SourceDataFilesSidebar__ = __webpack_require__(4);



class FileWorkflowAutoDetectTable {
    constructor() {}

    /**
     *
     * @param selection {wijmo.grid.CellRange}
     */
    autoDetectTable(selection) {
        const sourceFile = __WEBPACK_IMPORTED_MODULE_0__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();

        // Get range of data-points.
        let dataPointsFound = false;
        let dataFirstRow = sourceFile.getNumberOfRows();
        let dataLastRow = 0;
        let dataFirstColumn = sourceFile.getNumberOfCols();
        let dataLastColumn = 0;
        for (let i = selection.leftCol; i <= selection.rightCol; i++) {
            for (let j = selection.topRow; j <= selection.bottomRow; j++) {
                const cellProperties = sourceFile.getSingleCellProperties(j, i);

                if (cellProperties.cellType !== 'data') {
                    continue;
                }

                // Found at least one data point.
                dataPointsFound = true;

                // Adjust range.
                dataFirstRow = Math.min(dataFirstRow, j);
                dataLastRow = Math.max(dataLastRow, j);
                dataFirstColumn = Math.min(dataFirstColumn, i);
                dataLastColumn = Math.max(dataLastColumn, i);
            }
        }

        // No data-points?
        if (!dataPointsFound) {
            alert('You must assign the data-points first.');
            return;
        }

        // Everything else becomes a label.
        for (let i = selection.leftCol; i <= selection.rightCol; i++) {
            for (let j = selection.topRow; j <= selection.bottomRow; j++) {
                let cellProperties = sourceFile.getSingleCellProperties(j, i);
                const cellValue = sourceFile.getCellValue(j, i);

                if (cellProperties.cellType === 'data' || cellValue === '') {
                    continue;
                }

                cellProperties.cellType = 'label';

                let range = '';

                // Check for data-point on the same row.
                let dataOnRow = false;
                for (let ii = dataFirstColumn; ii <= dataLastColumn; ii++) {
                    const thisCellProperties = sourceFile.getSingleCellProperties(j, ii);

                    if (thisCellProperties.cellType === 'data') {
                        dataOnRow = true;
                    }
                }
                if (dataOnRow) {
                    range = XLSX.utils.encode_range({ r: j, c: dataFirstColumn }, { r: j, c: dataLastColumn });
                }

                let dataOnColumn = false;
                for (let jj = dataFirstRow; jj <= dataLastRow; jj++) {
                    const thisCellProperties = sourceFile.getSingleCellProperties(jj, i);

                    if (thisCellProperties.cellType === 'data') {
                        dataOnColumn = true;
                    }
                }
                if (dataOnColumn) {
                    range = XLSX.utils.encode_range({ r: dataFirstRow, c: i }, { r: dataLastRow, c: i });
                }

                // Apply to all data-points.
                if (
                    !dataOnRow &&
                    !dataOnColumn &&
                    (j < dataFirstRow || j > dataLastRow) &&
                    (i < dataFirstColumn || i > dataLastColumn)
                ) {
                    range = XLSX.utils.encode_range(
                        { r: dataFirstRow, c: dataFirstColumn },
                        { r: dataLastRow, c: dataLastColumn }
                    );
                }

                // We must get the cellProperties again, the object might have been overwrriten.
                cellProperties = sourceFile.getSingleCellProperties(j, i);

                // Apply new range.
                cellProperties.range = range;

                // Re-apply dimensions to data-points.
                __WEBPACK_IMPORTED_MODULE_0__services_SourceFilesService__["a" /* sourceFilesService */].applyDimensions(cellProperties, __WEBPACK_IMPORTED_MODULE_1__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].columnDefs);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflowAutoDetectTable;



/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SourceDataFiles__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AddFileSteps__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__SourceDataFilesSidebar__ = __webpack_require__(4);






class FileWorkflowStep2 {
    /**
     * @param rootElement
     * @param fileWorkflow {FileWorkflow}
     */
    constructor(rootElement, fileWorkflow) {
        this.rootElement = rootElement;
        this.fileWorkflow = fileWorkflow;

        // DOM
        this.dataStructureSection = this.rootElement.find('.data-structures-section');
        this.addRelationship = this.dataStructureSection.find('._add-relationship');
        this.addRelationshipContainer = this.dataStructureSection.find('._add-relationship-container');
        this.save = this.addRelationshipContainer.find('._save');
        this.cancel = this.addRelationshipContainer.find('._cancel');

        // Events
        this.addRelationship.on('click', () => {
            this.addRelationship.prop('disabled', true);
            this.addRelationshipContainer.show();
            this.fileWorkflow.enableStructure();
        });
        this.save.on('click', () => {
            const cells = this.fileWorkflow.selectedStructureCells;
            const file = __WEBPACK_IMPORTED_MODULE_0__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
            let parentValue = null;
            let parentProperties = null;

            cells.forEach((cell, index) => {
                const cellValue = file.getCellValue(cell.row, cell.col);
                const cellProperties = file.getSingleCellProperties(cell.row, cell.col);

                // First cell is always the parent.
                if (index === 0) {
                    parentValue = cellValue;
                    parentProperties = cellProperties;
                } else {
                    // Get the dimension that differs.
                    const dimensions = [];
                    file.formDimensions.forEach(dimension => {
                        let cellValue = cellProperties[dimension];
                        let parentValue = parentProperties[dimension];

                        // Consider undefined values as empty string.
                        cellValue = typeof cellValue === 'undefined' ? '' : cellValue;
                        parentValue = typeof parentValue === 'undefined' ? '' : parentValue;

                        if (cellValue !== parentValue) {
                            dimensions.push(dimension);
                        }
                    });

                    if (dimensions.length === 1) {
                        const dimension = dimensions[0];
                        const ds = __WEBPACK_IMPORTED_MODULE_3__AddFileSteps__["a" /* addFileSteps */].project.addDataStructure(
                            dimension,
                            cellProperties[dimension],
                            parentProperties[dimension]
                        );
                        ds.changed = true;
                    }
                }
            });

            __WEBPACK_IMPORTED_MODULE_4__SourceDataFilesSidebar__["a" /* sourceDataFilesSidebar */].sourceDataStructures.sync();
            __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].saveCurrentProject();
            __WEBPACK_IMPORTED_MODULE_1__services_StorageService__["a" /* storageService */].syncViews();

            this.cancel.trigger('click');
        });
        this.cancel.on('click', () => {
            this.addRelationship.prop('disabled', false);
            this.addRelationshipContainer.hide();
            this.fileWorkflow.enableModal();
        });
    }

    sync() {}

    show() {
        this.dataStructureSection.show();
        $('#source_data_files_pre_ingestion ._table').css('display', '');
        __WEBPACK_IMPORTED_MODULE_2__SourceDataFiles__["a" /* sourceDataFiles */].flexGrid.refresh();
    }

    hide() {
        this.cancel.trigger('click');
        this.dataStructureSection.hide();
        $('#source_data_files_pre_ingestion ._table').hide();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflowStep2;



/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_KeyboardService__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_SourceFilesService__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_StorageService__ = __webpack_require__(0);






class FileWorkflowStep3 {
    /**
     * @param rootElement
     * @param fileWorkflow {FileWorkflow}
     */
    constructor(rootElement, fileWorkflow) {
        this.rootElement = rootElement;
        this.fileWorkflow = fileWorkflow;
        this.dataStructures = [];
        this.inputsValues = {};
        this.lastSelectedItem = null;

        const globalMappingContainer = this.rootElement.find('._add-file-global-mapping ._mapping-select-dimension');
        if (!localStorage.getItem('blobExcelData'))
            this.dimensionSelect = new wijmo.input.ComboBox(globalMappingContainer[0], {
                placeholder: 'Select Dimension',
                itemsSource: [],
                displayMemberPath: 'label',
                onSelectedIndexChanged: () => {
                    this.changeDimension();
                }
            });
        const selectDictionaryContainer = this.rootElement.find('._add-file-global-mapping ._select-dictionary');
        if (!localStorage.getItem('blobExcelData'))
            this.selectDictionary = new wijmo.input.ComboBox(selectDictionaryContainer[0], {
                placeholder: 'Select Dictionary',
                itemsSource: [],
                onSelectedIndexChanged: () => {
                    this.changeDictionary();
                }
            });
        // DOM

        // Events
        $('._add-file-global-mapping').on('click', e => {
            if (!__WEBPACK_IMPORTED_MODULE_2__services_KeyboardService__["a" /* keyboardService */].ctrlDown && !__WEBPACK_IMPORTED_MODULE_2__services_KeyboardService__["a" /* keyboardService */].shiftDown) {
                $('._values-left ._mapping-value').removeClass('_active');
            }
        });

        $('._add-file-global-mapping').on('click', '._values-left ._mapping-value', e => {
            const item = $(e.currentTarget);

            let multipleSelection = false;
            let addClass = true;
            if (item.hasClass('_active')) {
                addClass = false;
            }

            // Deselect other cards if shift/ctrl is not pressed.
            if (!__WEBPACK_IMPORTED_MODULE_2__services_KeyboardService__["a" /* keyboardService */].ctrlDown && !__WEBPACK_IMPORTED_MODULE_2__services_KeyboardService__["a" /* keyboardService */].shiftDown) {
                if ($('._values-left ._mapping-value._active').length > 1) {
                    multipleSelection = true;
                }

                $('._values-left ._mapping-value').removeClass('_active');
            }

            // If shift if pressed, select all items between the previous and the current one.
            if (__WEBPACK_IMPORTED_MODULE_2__services_KeyboardService__["a" /* keyboardService */].shiftDown) {
                const index1 = this.lastSelectedItem.index();
                const index2 = item.index();
                const indexMin = Math.min(index1, index2);
                const indexMax = Math.max(index1, index2);
                const parent = item.parent();

                for (let i = indexMin; i <= indexMax; i++) {
                    parent
                        .children()
                        .eq(i)
                        .addClass('_active');
                }
            } else {
                if (addClass || multipleSelection) {
                    item.addClass('_active');
                } else {
                    item.removeClass('_active');
                }
            }

            // Remember the last selected item.
            this.lastSelectedItem = item;

            e.stopPropagation();
        });
    }

    sync() {}

    show() {
        $('._add-file-global-mapping').css('display', 'flex');
        setTimeout(() => {
            $('#source_data_files_pre_ingestion ._table').hide();
        }, 20);
        const project = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject();
        let dimensions = project.getDimensions();
        dimensions = dimensions.filter(dimension => {
            return dimension.hasGlobalTerms;
        });

        if (!this.dimensionSelect.itemsSource.length) {
            this.dimensionSelect.itemsSource = dimensions;
        }

        this.changeDimension();
        $('._values-left ._mapping-value').removeClass('_active');
    }

    hide() {
        $('._add-file-global-mapping').css('display', 'none');

        const sourceFile = __WEBPACK_IMPORTED_MODULE_3__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        if (sourceFile) {
            sourceFile.globalMappingStructures = this.dataStructures;
        }
        __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].saveCurrentProject();

        $('._values-left ._mapping-value').removeClass('_active');
    }

    changeDimension() {
        // Clear values.
        $('._add-file-global-mapping ._values-left ._mapping-value').remove();

        const slug = this.dimensionSelect.selectedItem.slug;
        if (!this.inputsValues[slug]) {
            this.inputsValues[slug] = {};
        }
        const dataStructuresForDimension = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject().getDataStructuresForDimension(slug);

        const file = __WEBPACK_IMPORTED_MODULE_3__services_SourceFilesService__["a" /* sourceFilesService */].getCurrentSourceFile();
        const cellProperties = file.cellProperties;
        let values = [];
        Object.keys(cellProperties).forEach(col => {
            Object.keys(cellProperties[col]).forEach(row => {
                const cell = cellProperties[col][row];
                if (cell.cellType === 'data') {
                    if (cell.hasOwnProperty(slug)) {
                        if (values.length) {
                            values = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], values, [cell[slug]]);
                        } else {
                            values = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], [cell[slug]]);
                        }
                    }
                }
            });
        });

        values.map(value => {
            if (!dataStructuresForDimension.hasOwnProperty(value) || !dataStructuresForDimension[value].globalTerm) {
                if (!this.inputsValues[slug].hasOwnProperty(value) || this.inputsValues[slug][value].length === 0) {
                    this.rootElement.find('._values-left').append('<div class="_mapping-value">' + value + '</div>');
                }
            } else {
                if (this.inputsValues[slug][value]) {
                    this.inputsValues[slug][value] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], this.inputsValues[slug][value], [
                        dataStructuresForDimension[value].globalTerm
                    ]);
                } else {
                    this.inputsValues[slug][value] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], [dataStructuresForDimension[value].globalTerm]);
                }
            }
        });

        Sortable.create(this.rootElement.find('._values-left')[0], {
            group: {
                name: 'dimension-value',
                put: ['map-global-terms']
            }
        });

        this.selectDictionary.itemsSource = this.dimensionSelect.selectedItem.getDictionaries();
        this.selectDictionary.refresh();
    }

    changeDictionary() {
        // Clear values.
        $('._add-file-global-mapping ._global-term-from-dictionary').remove();

        // Create Global terms containers.
        const dictionary = this.selectDictionary.selectedItem;
        const globalTerms = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getGlobalTermsByDictionary(dictionary);
        globalTerms.map(term => {
            const divTitle = '<div class="_term-title">' + term + '</div>';
            const divSortable = '<div class="_global-term-from-dictionary-sortable"></div>';
            const div =
                '<div class="_global-term-from-dictionary" data-term="' +
                term +
                '">' +
                divTitle +
                divSortable +
                '</div>';
            this.rootElement.find('._global-terms-from-dictionary').append(div);
            const el = this.rootElement.find($('._global-term-from-dictionary[data-term="' + term + '"]'))[0];

            Sortable.create(el, {
                group: {
                    name: 'map-global-terms',
                    put: 'dimension-value'
                },
                filter: '._term-title',
                onAdd: e => {
                    $(e.item).removeClass('_active');
                    const slug = this.dimensionSelect.selectedItem.slug;
                    const value = $(e.item).text();
                    const dataStructure = {
                        dimension: slug,
                        value: value,
                        globalTerm: term
                    };
                    this.dataStructures.push(dataStructure);

                    if (this.inputsValues[slug][value]) {
                        this.inputsValues[slug][value] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], this.inputsValues[slug][value], [term]);
                    } else {
                        this.inputsValues[slug][value] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], [term]);
                    }

                    // Handle moving multiple mapping-values.
                    $('._values-left ._mapping-value').each((index, el) => {
                        if ($(el).hasClass('_active')) {
                            const value = $(el).text();
                            const dataStructure = {
                                dimension: slug,
                                value: value,
                                globalTerm: term
                            };
                            this.dataStructures.push(dataStructure);

                            if (this.inputsValues[slug][value]) {
                                this.inputsValues[slug][value] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], this.inputsValues[slug][value], [term]);
                            } else {
                                this.inputsValues[slug][value] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["union"])([], [term]);
                            }

                            $(e.to).append('<div class="_mapping-value">' + value + '</div>');
                            $(el).remove();
                        }
                    });
                },
                onRemove: e => {
                    const slug = this.dimensionSelect.selectedItem.slug;
                    const value = $(e.item).text();
                    const dataStructure = {
                        dimension: slug,
                        value: $(e.item).text(),
                        globalTerm: term
                    };
                    Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["remove"])(this.dataStructures, el => {
                        return (
                            dataStructure.dimension === el.dimension &&
                            dataStructure.value === el.value &&
                            dataStructure.globalTerm === el.globalTerm
                        );
                    });

                    this.inputsValues[slug][value] = Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["difference"])(this.inputsValues[slug][value], [term]);
                }
            });
        });

        // Add specific dimension values to each Global term container.
        const slug = this.dimensionSelect.selectedItem.slug;
        const dimensionVals = this.inputsValues[slug];
        Object.keys(dimensionVals).forEach(attr => {
            const globalTerms = dimensionVals[attr];
            const termHtml = $('._global-term-from-dictionary ._term-title').filter(function() {
                return $.inArray($(this).text(), globalTerms) !== -1;
            });

            // Used to remove from the left when val is associated to a global term and add it to the right.
            const valExists = this.rootElement.find('._values-left ._mapping-value').filter(function() {
                return $(this).text() === attr;
            });

            if (termHtml.length) {
                termHtml.after('<div class="_mapping-value">' + attr + '</div>');
                valExists.remove();
            } else {
                if (!valExists.length) {
                    this.rootElement.find('._values-left').append('<div class="_mapping-value">' + attr + '</div>');
                }
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflowStep3;



/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class FileWorkflowStep4 {
    /**
     * @param rootElement
     * @param fileWorkflow {FileWorkflow}
     */
    constructor(rootElement, fileWorkflow) {
        this.rootElement = rootElement;
        this.fileWorkflow = fileWorkflow;

        // DOM

        // Events
    }

    sync() {
    }

    show() {
        $('#source_data_files_pre_ingestion ._review-table').css('display', '');
        $('#source_data_files_pre_ingestion ._table').hide();
    }

    hide() {
        $('#source_data_files_pre_ingestion ._review-table').hide();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflowStep4;


/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__entities_SourceFile__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MultiLevelHashMap__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_StorageService__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__source_data_structures_SourceDataStructureValidator__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SourceData__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__SourceDataPoints__ = __webpack_require__(36);









class SourceDataGraphView {
    constructor() {
        this.network = null;
        this.sourceDataStructureValidator = new __WEBPACK_IMPORTED_MODULE_5__source_data_structures_SourceDataStructureValidator__["a" /* SourceDataStructureValidator */]();
        this.filters = [];
        this.dataAvailability = null;
    }

    init() {
        this.container = $('#graph_view');
        this.filtersContainer = this.container.find('._row3');

        this.dimensionSelect = new wijmo.input.ComboBox(this.container.find('._dimension-selector')[0], {
            placeholder: 'Select Dimension',
            itemsSource: [],
            displayMemberPath: 'label',
            onSelectedIndexChanged: () => {
                if (!this.isSyncing) {
                    this.syncGraph();
                }
            }
        });

        this.coloringSelect = new wijmo.input.ComboBox(this.container.find('._coloring-selector')[0], {
            placeholder: 'Select Coloring',
            itemsSource: [
                {
                    label: 'File',
                    value: 'file'
                },
                {
                    label: 'Validation',
                    value: 'validation'
                },
                {
                    label: 'Data Availability',
                    value: 'data_availability'
                }
            ],
            displayMemberPath: 'label',
            onSelectedIndexChanged: () => {
                const coloring = this.coloringSelect.selectedItem.value;
                this.filtersContainer.css('display', coloring === 'data_availability' ? '' : 'none');

                if (!this.isSyncing) {
                    this.syncGraph();
                }
            }
        });

        this.sourceFileSelect = new wijmo.input.MultiSelect(this.container.find('._source-file-selector')[0], {
            placeholder: 'Select Source Files',
            itemsSource: [],
            headerFormat: '{count} files selected',
            displayMemberPath: 'name',
            checkedMemberPath: 'selected',
            onCheckedItemsChanged: () => {
                this.syncGraph();
            }
        });

        this.graphProgress = this.container.find('._graph-progress');
        this.graphContainer = this.container.find('._graph');

        this.hierarchicalCheckbox = this.container.find('._hierarchical-checkbox');
        this.hierarchicalCheckbox.on('change', () => this.syncGraph());

        this.useGlobalTermsCheckbox = this.container.find('._use-global-terms-checkbox');
        this.useGlobalTermsCheckbox.on('change', () => this.syncGraph());

        this.hideDisconnectedValuesCheckbox = this.container.find('._hide-disconnected-values');
        this.hideDisconnectedValuesCheckbox.on('change', () => this.syncGraph());
    }

    sync() {
        // Prevent multiple runs.
        if (this.isSyncing) {
            return;
        }
        this.isSyncing = true;

        const project = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject();

        // Get dimensions that have data structures or global terms.
        let dimensions = project.getDimensions();
        dimensions = dimensions.filter(dimension => {
            return dimension.hasDataStructures;
        });
        this.dimensionSelect.itemsSource = dimensions;

        // Set source files.
        {
            // Get source files.
            let sourceFiles = Object.values(__WEBPACK_IMPORTED_MODULE_0_lodash_cloneDeep___default()(project.sourceFiles));
            sourceFiles.unshift(
                new __WEBPACK_IMPORTED_MODULE_2__entities_SourceFile__["a" /* SourceFile */]({
                    uuid: 'manual',
                    name: 'Manual'
                })
            );

            let colors = ['#00338d', '#0091da', '#6d2077', '#005eb8', '#00a3a1', '#eaaa00'];
            let i = 0;
            sourceFiles = sourceFiles.map(sourceFile => {
                // All are selected by default.
                sourceFile.selected = true;

                // Set color.
                sourceFile.color = colors[i % colors.length];
                i++;

                return sourceFile;
            });

            this.sourceFileSelect.itemsSource = sourceFiles;
        }

        // Create filters.
        {
            this.filters = [];
            this.filtersContainer.html('');
            const dimensions = project.getDimensions();
            dimensions.forEach(dimension => {
                // Skip certain dimensions.
                if (
                    this.dimensionSelect.selectedItem &&
                    ['value', 'scale', this.dimensionSelect.selectedItem.slug].indexOf(dimension.slug) !== -1
                ) {
                    return;
                }

                // Create DOM elements.
                const div = $('<div>' + dimension.label + '</div>');
                const filterContainer = $('<div></div>').appendTo(div);
                this.filtersContainer.append(filterContainer);
                this.filtersContainer.append('&nbsp;&nbsp;&nbsp;');

                // Get items.
                const items = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(project.dataPoints, dimension.slug);
                items.unshift('');

                // Create filter.
                const comboBox = new wijmo.input.ComboBox(filterContainer[0], {
                    placeholder: 'Select ' + dimension.label,
                    itemsSource: items,
                    onSelectedIndexChanged: () => {
                        if (!this.isSyncing) {
                            this.syncGraph();
                        }
                    }
                });
                this.filters.push({
                    dimensionSlug: dimension.slug,
                    comboBox: comboBox
                });
            });
        }

        // Update graph.
        this.syncGraph();
        this.isSyncing = false;
    }

    syncGraph() {
        console.log('syncGraph');
        if (!this.dimensionSelect.selectedItem) {
            return;
        }

        this.syncDataAvailability();

        const coloring = this.coloringSelect.selectedItem.value;
        const dimensionSlug = this.dimensionSelect.selectedItem.slug;
        const files = this.sourceFileSelect.itemsSource.filter(sourceFile => {
            return sourceFile.selected;
        });

        // Get values, add nodes and index name-slugs to node-IDs.
        const project = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject();
        this.sourceDataStructureValidator.setProject(project);
        const dataStructures = project.getDataStructuresForDimension(dimensionSlug);
        let nodes = [];
        const slugsToNodes = {};
        const groupNodesToAdd = {};
        let sequence = 0;
        files.forEach(file => {
            let dataset = project.getDataPointsForSource(file.uuid);
            let values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(dataset, dimensionSlug);
            values.forEach(value => {
                /** @type {DataStructure} */
                const dataStructure = dataStructures[value] || {};

                // Don't add duplicate values.
                if (value in slugsToNodes) {
                    return;
                }

                // Get label.
                let label;
                {
                    label = value;

                    if (this.useGlobalTermsCheckbox.is(':checked') && dataStructure.globalTerm) {
                        // Use global term.
                        label = dataStructure.globalTerm;
                    } else {
                        label = value;
                    }

                    // Replace whitespaces with newlines.
                    label = label.replace(/ /g, '\n');

                    if (coloring === 'data_availability') {
                        let percentage = this.getDataAvailabilityForValue(value);
                        label += '\n ' + Math.round(percentage * 100) + '%';
                    }
                }

                // Get color.
                let color = this.getColor(file['color'], dimensionSlug, value);

                // Create node.
                let node = {
                    id: sequence++,
                    label: label,
                    color: color,
                    value: 1,
                    _parentSlug: null,
                    _dimensionValue: value
                };
                nodes.push(node);
                slugsToNodes[value] = node;

                // Save the group node for later.
                if (dataStructure.group) {
                    const slug = this.getGroupSlug(dataStructure);
                    groupNodesToAdd[slug] = dataStructure;
                }
            });
        });

        // Add group nodes.
        for (const slug in groupNodesToAdd) {
            /** @type {DataStructure} */
            const dataStructure = groupNodesToAdd[slug];

            // Get parent node.
            const parentNode = slugsToNodes[dataStructure.parentAttribute];
            if (!parentNode) {
                continue;
            }

            // Get color.
            let color = this.getColor(
                parentNode.color,
                dimensionSlug,
                dataStructure.parentAttribute,
                dataStructure.group
            );

            // Create node.
            let node = {
                id: sequence++,
                label: dataStructure.group,
                color: color,
                value: 1,
                _parentSlug: null,
                _groupValue: dataStructure.group
            };
            nodes.push(node);
            slugsToNodes[slug] = node;
        }

        // Add edges.
        const edges = [];
        const addedEdgeForGroup = {};
        for (const value in dataStructures) {
            /** @type {DataStructure} */
            const dataStructure = dataStructures[value];
            const childSlug = dataStructure.attribute;
            const parentSlug = dataStructure.parentAttribute;

            if (!(parentSlug in slugsToNodes) || !(childSlug in slugsToNodes)) {
                continue;
            }

            // Was the other parent a better match?
            if (
                slugsToNodes[childSlug]._parentSlug !== null &&
                childSlug.indexOf(slugsToNodes[childSlug]._parentSlug) !== -1
            ) {
                continue;
            }

            if (!dataStructure.group) {
                // Create parent-child edge.
                edges.push({
                    from: slugsToNodes[parentSlug].id,
                    to: slugsToNodes[childSlug].id
                });
            } else {
                const groupSlug = this.getGroupSlug(dataStructure);

                // Create parent-group edge. Prevent duplicates.
                if (!(groupSlug in addedEdgeForGroup)) {
                    addedEdgeForGroup[groupSlug] = true;
                    edges.push({
                        from: slugsToNodes[parentSlug].id,
                        to: slugsToNodes[groupSlug].id
                    });
                }

                // Create group-child edge.
                edges.push({
                    from: slugsToNodes[groupSlug].id,
                    to: slugsToNodes[childSlug].id
                });
            }

            // Increase parent node.
            slugsToNodes[childSlug]._parentSlug = parentSlug;
            slugsToNodes[parentSlug]['value']++;
        }

        // Index nodes by ID.
        const idsToNodes = nodes.reduce((a, node) => {
            a[node.id] = node;

            return a;
        }, {});

        // Hide disconnected nodes.
        if (this.hideDisconnectedValuesCheckbox.is(':checked')) {
            // Mark connected nodes.
            edges.forEach(edge => {
                idsToNodes[edge.from].connected = true;
                idsToNodes[edge.to].connected = true;
            });

            // Remove disconnected.
            nodes = nodes.filter(node => {
                return node.connected;
            });
        }

        // Adjust colors.
        if (coloring === 'file') {
            let maxValue = 0;
            nodes.forEach(node => {
                maxValue = Math.max(maxValue, node['value']);
            });
            nodes.forEach(node => {
                let percent = (maxValue - node['value']) / maxValue / 2.5;
                node['color'] = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].shadeColor2(node['color'], percent);
            });
        }

        // Compose network arguments.
        let data = {
            nodes: new vis.DataSet(nodes),
            edges: new vis.DataSet(edges)
        };
        let options = {
            nodes: {
                shape: 'box',
                font: {
                    size: 18,
                    color: '#ffffff'
                }
            },
            interaction: {
                dragNodes: false
            }
        };
        if (!this.hierarchicalCheckbox.is(':checked')) {
            options['physics'] = {
                enabled: true,
                barnesHut: {
                    gravitationalConstant: -2000,
                    centralGravity: 0.3,
                    springLength: 95,
                    springConstant: 0.04,
                    damping: 0.09,
                    avoidOverlap: 0
                },
                maxVelocity: 50,
                minVelocity: 0.1,
                stabilization: {
                    enabled: true,
                    iterations: 1000,
                    updateInterval: 10,
                    onlyDynamicEdges: false,
                    fit: true
                },
                timestep: 1,
                adaptiveTimestep: true
            };
            options['nodes']['scaling'] = {
                label: {
                    min: 15,
                    max: 20
                }
            };
        } else {
            options['physics'] = false;
            options['layout'] = {
                hierarchical: {
                    enabled: true,
                    sortMethod: 'directed',
                    nodeSpacing: 150,
                    blockShifting: false
                }
            };
            options['edges'] = {
                selectionWidth: 0
            };
        }

        // Create network.
        if (this.network) {
            this.network.destroy();
        }
        this.network = new vis.Network(this.graphContainer[0], data, options);
        this.network.on('stabilizationProgress', o => {
            this.graphProgress
                .css('display', '')
                .html('Loading ' + Math.round((o.iterations / o.total) * 100) + '%...');
        });
        this.network.on('stabilizationIterationsDone', o => {
            this.graphProgress.css('display', 'none').html('');
        });
        this.network.on('afterDrawing', o => {
            this.graphProgress.css('display', 'none').html('');
        });
        this.network.on('doubleClick', params => {
            if (params.nodes.length === 0) {
                return;
            }

            const id = params.nodes[0];
            const node = idsToNodes[id];
            const coloring = this.coloringSelect.selectedItem.value;

            if (coloring === 'data_availability') {
                // Open Data Cockpit tab.
                $('#source_data input[name="source_data_mode"]').trigger('blur');
                $('#source_data input[name="source_data_mode"][value="data_points"]').trigger('click');

                // Ensure required columns are enabled in data cockpit.
                this.filters.forEach(filter => {
                    __WEBPACK_IMPORTED_MODULE_7__SourceDataPoints__["a" /* sourceDataPoints */].columnsSelect.itemsSource.forEach(column => {
                        if (column.slug === filter.dimensionSlug) {
                            column.selected = true;
                        }
                    });
                });
                __WEBPACK_IMPORTED_MODULE_7__SourceDataPoints__["a" /* sourceDataPoints */].columnsSelect.refresh();
                __WEBPACK_IMPORTED_MODULE_7__SourceDataPoints__["a" /* sourceDataPoints */].updateColumns();

                // Get filters.
                const flexFilters = [];
                this.filters.forEach(filter => {
                    // Check if selected.
                    const selectedValue = filter.comboBox.selectedItem;
                    if (selectedValue === '') {
                        return;
                    }

                    const showValues = {};
                    showValues[filter.comboBox.selectedItem] = true;

                    const flexFilter = {
                        binding: filter.dimensionSlug,
                        type: 'value',
                        filterText: '',
                        showValues: showValues
                    };

                    flexFilters.push(flexFilter);
                });

                // Set filter definition.
                const filterDefinition = {
                    defaultFilterType: 3,
                    filters: flexFilters
                };
                __WEBPACK_IMPORTED_MODULE_7__SourceDataPoints__["a" /* sourceDataPoints */].flexGridFilter.filterDefinition = JSON.stringify(filterDefinition);
            } else {
                // Open Structures tab.
                $('#source_data input[name="source_data_mode"]').trigger('blur');
                $('#source_data input[name="source_data_mode"][value="data_structures"]').trigger('click');

                // Select dimension.
                __WEBPACK_IMPORTED_MODULE_6__SourceData__["a" /* sourceData */].sourceDataStructures.dimensionSelect.selectedValue = this.dimensionSelect.selectedValue;

                setTimeout(() => {
                    // Select relevant row.
                    const flexgrid = __WEBPACK_IMPORTED_MODULE_6__SourceData__["a" /* sourceData */].sourceDataStructures.flexgrid;
                    let row = 0;
                    for (let i = 0; i < flexgrid.rows.length; i++) {
                        const item = flexgrid.rows[i].dataItem;
                        row = i;

                        if (
                            (item.value && item.value === node._dimensionValue) ||
                            (item.group && item.group === node._groupValue)
                        ) {
                            break;
                        }
                    }
                    flexgrid.select(new wijmo.grid.CellRange(row, 0, row, 0), true);
                }, 50);
            }
        });
    }

    syncDataAvailability() {
        const coloring = this.coloringSelect.selectedItem.value;
        if (coloring !== 'data_availability') {
            return;
        }

        // Filter data points.
        const project = __WEBPACK_IMPORTED_MODULE_4__services_StorageService__["a" /* storageService */].getCurrentProject();
        let dataPoints = project.dataPoints;
        dataPoints = dataPoints.filter(dataPoint => {
            let matches = true;

            this.filters.forEach(filter => {
                const value = filter.comboBox.selectedItem;
                if (value && dataPoint[filter.dimensionSlug] !== value) {
                    matches = false;
                }
            });

            return matches;
        });

        // Group values by unique dimension-combinations.
        const dimensionSlug = this.dimensionSelect.selectedItem.slug;
        let dimensions = project.getDimensionsForDataStructureValidation(dimensionSlug);
        let map = new __WEBPACK_IMPORTED_MODULE_3__MultiLevelHashMap__["a" /* MultiLevelHashMap */](dimensions.length + 1);
        dataPoints.forEach((dataPoint, index) => {
            const key = [];
            dimensions.forEach(dimension => {
                // Undefined or an empty string must count as the same thing.
                let value = dataPoint[dimension.slug];
                if (typeof value === 'undefined') {
                    value = '';
                }

                key.push(value);
            });

            // Add copy of data-point to map.
            map.set(key.concat([dataPoint.id]), Object.assign({}, dataPoint));
        });
        let groups = map.getUniqueGroups();

        // Get availability for each value.
        this.dataAvailability = {};
        const values = __WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].getUniqueValues(dataPoints, dimensionSlug);
        values.forEach(value => {
            let groupsFound = 0;

            groups.forEach(group => {
                let dataPointFound = false;

                for (const id in group) {
                    const dataPoint = group[id];
                    if (dataPoint[dimensionSlug] === value) {
                        dataPointFound = true;
                    }
                }

                if (dataPointFound) {
                    groupsFound++;
                }
            });

            this.dataAvailability[value] = groupsFound / groups.length;
        });
    }

    getDataAvailabilityForValue(value) {
        const percentage = this.dataAvailability[value];

        if (!percentage) {
            return 0;
        }

        if (__WEBPACK_IMPORTED_MODULE_1__Common__["a" /* common */].isDeltaZero(percentage - 1)) {
            return 1;
        }

        return percentage;
    }

    getColor(fileColor, dimensionSlug, parentAttribute, group) {
        const coloring = this.coloringSelect.selectedItem.value;
        let color;

        switch (coloring) {
            case 'validation':
                const result = this.sourceDataStructureValidator.validateValue(dimensionSlug, parentAttribute, group);
                if (result === null) {
                    color = '#888';
                } else if (result.invalid === 0) {
                    color = 'green';
                } else if (result.invalid > 0) {
                    color = 'red';
                }
                break;

            case 'file':
                color = fileColor;
                break;

            case 'data_availability':
                if (group) {
                    color = 'green';
                } else {
                    const value = this.getDataAvailabilityForValue(parentAttribute);

                    color = chroma.mix('red', 'green', value, 'lab').hex();
                }
                break;
        }

        return color;
    }

    /**
     * @param {DataStructure} dataStructure
     */
    getGroupSlug(dataStructure) {
        const slug = '__group__' + dataStructure.parentAttribute + '__' + dataStructure.group;

        return slug;
    }
}

const sourceDataGraphView = new SourceDataGraphView();
/* harmony export (immutable) */ __webpack_exports__["a"] = sourceDataGraphView;



/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Constants__ = __webpack_require__(10);


class FileWorkflowLegend {
    constructor(rootElement) {
        this.rootElement = rootElement;
    }

    sync(columnDefs) {
        this.rootElement.html('');
        const projectFields = columnDefs.filter(field => {
            return field.selected;
        });
        const totalFields = projectFields.length;

        this.rootElement.append('<span>0%</span>');

        for (let i = 0; i <= totalFields; i++) {
            const ratio = totalFields > 0 ? i / totalFields : 1;
            const color = chroma
                .mix(
                    __WEBPACK_IMPORTED_MODULE_0__Constants__["a" /* constants */].FILE_WORKFLOW_CELL_PROGRESS_COLOR_BEGIN,
                    __WEBPACK_IMPORTED_MODULE_0__Constants__["a" /* constants */].FILE_WORKFLOW_CELL_PROGRESS_COLOR_END,
                    ratio,
                    'lab'
                )
                .hex();
            const percentage = Math.round(ratio * 100);
            const div = $(`<div style='background-color: ${color}'></div>`);

            this.rootElement.append(div);
        }

        this.rootElement.append('<span>100%</span>');
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FileWorkflowLegend;



/***/ })
/******/ ]);
//# sourceMappingURL=entry.js.map