import { Observable, Subject } from 'rxjs';
export interface OnDestroy {
    readonly destroyed$?: Observable<boolean>;
    ngOnDestroy(): void;
}
/**
 *
 * @param destroyMethodName
 */
export declare function TakeUntilDestroy(destroyMethodName?: string): <T extends new (...args: any[]) => {}>(constructor: T) => {
    new (...args: any[]): {
        _takeUntilDestroy$: Subject<boolean>;
        readonly destroyed$: Observable<boolean>;
    };
} & T;
export declare const untilDestroyed: (that: any) => <T>(source: Observable<T>) => Observable<T>;
